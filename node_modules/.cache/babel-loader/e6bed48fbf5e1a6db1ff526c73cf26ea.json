{"ast":null,"code":"import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport plot from \"../store/plot\";\nimport Axis from \"../component/axis\";\nimport BulletSeries from \"../component/bulletSeries\";\nimport Plot from \"../component/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Legend from \"../component/legend\";\nimport AxisTitle from \"../component/axisTitle\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrushes from \"../brushes/basic\";\nimport * as axisBrushes from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\n/**\n * @class\n * @classdesc Bullet Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Bullet Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {number} props.data.series.data - Series data.\n *       @param {Array<number>} props.data.series.markers - Series markers. It specifies the marker for comparing.\n *       @param {Array<Array<number>>} props.data.series.ranges - Series ranges. It specifies the range of values that can be compared.\n *   @param {Object} [props.options] - Options for making Bullet Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {number} [props.options.series.vertical] - Whether to use vertical bullet series or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object} [props.options.yAxis]\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bullets Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\nexport default class BulletChart extends Chart {\n  constructor({\n    el,\n    options,\n    data: {\n      series\n    }\n  }) {\n    super({\n      el,\n      options,\n      series: {\n        bullet: series\n      },\n      modules: [dataRange, scale, axes, plot]\n    });\n    /**\n     * Hide series data label.\n     * @api\n     * @example\n     * chart.hideSeriesDataLabel();\n     */\n\n    this.hideSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: false\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Show series data label.\n     * @api\n     * @example\n     * chart.showSeriesDataLabel();\n     */\n\n\n    this.showSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: true\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   xAxis: {\n     *     title: 'Month',\n     *   },\n     *   yAxis: {\n     *     title: 'Energy (kWh)',\n     *   },\n     *   series: {\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n     *      @param {number} seriesInfo.seriesIndex - Index of series.\n     * @api\n     * @example\n     * chart.showTooltip({seriesIndex: 1});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), {\n        state: this.store.state\n      }));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(Plot);\n    this.componentManager.add(Legend);\n    this.componentManager.add(BulletSeries);\n    this.componentManager.add(Axis, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(DataLabels);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrushes, axisBrushes, legendBrush, labelBrush, exportMenuBrush, dataLabelBrush]);\n  }\n  /**\n   * Add series.\n   * @param {Object} data - Data to be added\n   *   @param {string} data.name - Series name\n   *   @param {Array<<Array<number>>} data.data - Array of data to be added\n   *   @param {Array<number>} data.markers - Series markers. It specifies the marker for comparing.\n   *   @param {Array<Array<number>>} data.ranges - Series ranges. It specifies the range of values that can be compared.\n   * @api\n   * @example\n   * chart.addSeries({\n   *   name: 'newSeries',\n   *   data: 20,\n   *   markers: [28, 2, 15],\n   *   ranges: [\n   *     [-1, 10],\n   *     [10, 20],\n   *     [20, 30],\n   *   ],\n   * });\n   */\n\n\n  addSeries(data) {\n    this.resetSeries();\n    this.store.dispatch('addSeries', {\n      data\n    });\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set\n   * @api\n   * @example\n   * chart.setData({\n   *   series: [\n   *     {\n   *       name: 'newSeries',\n   *       data: 20,\n   *       markers: [28, 2, 15],\n   *       ranges: [\n   *         [-1, 10],\n   *         [10, 20],\n   *         [20, 30],\n   *       ],\n   *     }\n   *   ]\n   * });\n   */\n\n\n  setData(data) {\n    this.resetSeries();\n    this.store.dispatch('setData', {\n      series: {\n        bullet: data.series\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/bulletChart.js"],"names":["Chart","dataRange","scale","axes","plot","Axis","BulletSeries","Plot","Tooltip","Legend","AxisTitle","Title","ExportMenu","SelectedSeries","HoveredSeries","DataLabels","Background","NoDataText","basicBrushes","axisBrushes","legendBrush","labelBrush","dataLabelBrush","exportMenuBrush","BulletChart","constructor","el","options","data","series","bullet","modules","hideSeriesDataLabel","store","dispatch","dataLabels","visible","showSeriesDataLabel","setOptions","resetSeries","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","Object","assign","state","hideTooltip","initialize","componentManager","add","name","chartEl","painter","addGroups","addSeries","setData"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport plot from \"../store/plot\";\nimport Axis from \"../component/axis\";\nimport BulletSeries from \"../component/bulletSeries\";\nimport Plot from \"../component/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Legend from \"../component/legend\";\nimport AxisTitle from \"../component/axisTitle\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrushes from \"../brushes/basic\";\nimport * as axisBrushes from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\n/**\n * @class\n * @classdesc Bullet Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Bullet Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {number} props.data.series.data - Series data.\n *       @param {Array<number>} props.data.series.markers - Series markers. It specifies the marker for comparing.\n *       @param {Array<Array<number>>} props.data.series.ranges - Series ranges. It specifies the range of values that can be compared.\n *   @param {Object} [props.options] - Options for making Bullet Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {number} [props.options.series.vertical] - Whether to use vertical bullet series or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object} [props.options.yAxis]\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bullets Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class BulletChart extends Chart {\n    constructor({ el, options, data: { series } }) {\n        super({\n            el,\n            options,\n            series: {\n                bullet: series,\n            },\n            modules: [dataRange, scale, axes, plot],\n        });\n        /**\n         * Hide series data label.\n         * @api\n         * @example\n         * chart.hideSeriesDataLabel();\n         */\n        this.hideSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: false } } },\n            });\n        };\n        /**\n         * Show series data label.\n         * @api\n         * @example\n         * chart.showSeriesDataLabel();\n         */\n        this.showSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: true } } },\n            });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   xAxis: {\n         *     title: 'Month',\n         *   },\n         *   yAxis: {\n         *     title: 'Energy (kWh)',\n         *   },\n         *   series: {\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n         *      @param {number} seriesInfo.seriesIndex - Index of series.\n         * @api\n         * @example\n         * chart.showTooltip({seriesIndex: 1});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(Plot);\n        this.componentManager.add(Legend);\n        this.componentManager.add(BulletSeries);\n        this.componentManager.add(Axis, { name: 'yAxis' });\n        this.componentManager.add(Axis, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'yAxis' });\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(DataLabels);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrushes,\n            axisBrushes,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            dataLabelBrush,\n        ]);\n    }\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added\n     *   @param {string} data.name - Series name\n     *   @param {Array<<Array<number>>} data.data - Array of data to be added\n     *   @param {Array<number>} data.markers - Series markers. It specifies the marker for comparing.\n     *   @param {Array<Array<number>>} data.ranges - Series ranges. It specifies the range of values that can be compared.\n     * @api\n     * @example\n     * chart.addSeries({\n     *   name: 'newSeries',\n     *   data: 20,\n     *   markers: [28, 2, 15],\n     *   ranges: [\n     *     [-1, 10],\n     *     [10, 20],\n     *     [20, 30],\n     *   ],\n     * });\n     */\n    addSeries(data) {\n        this.resetSeries();\n        this.store.dispatch('addSeries', { data });\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set\n     * @api\n     * @example\n     * chart.setData({\n     *   series: [\n     *     {\n     *       name: 'newSeries',\n     *       data: 20,\n     *       markers: [28, 2, 15],\n     *       ranges: [\n     *         [-1, 10],\n     *         [10, 20],\n     *         [20, 30],\n     *       ],\n     *     }\n     *   ]\n     * });\n     */\n    setData(data) {\n        this.resetSeries();\n        this.store.dispatch('setData', { series: { bullet: data.series } });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}