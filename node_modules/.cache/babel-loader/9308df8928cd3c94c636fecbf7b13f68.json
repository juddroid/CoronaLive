{"ast":null,"code":"import { includes, isUndefined } from \"./utils\";\nexport function getActiveSeriesMap(legend) {\n  return legend.data.reduce((acc, {\n    active,\n    label\n  }) => Object.assign(Object.assign({}, acc), {\n    [label]: active\n  }), {});\n}\nexport function showCircleLegend(options) {\n  var _a, _b, _c;\n\n  return _c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.circleLegend) === null || _b === void 0 ? void 0 : _b.visible, _c !== null && _c !== void 0 ? _c : true;\n}\nexport function showLegend(options, series) {\n  var _a, _b, _c;\n\n  if (series.treemap && !((_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue)) {\n    return false;\n  }\n\n  return isUndefined((_b = options.legend) === null || _b === void 0 ? void 0 : _b.visible) ? true : !!((_c = options.legend) === null || _c === void 0 ? void 0 : _c.visible);\n}\nexport function showCheckbox(options) {\n  var _a, _b;\n\n  return isUndefined((_a = options.legend) === null || _a === void 0 ? void 0 : _a.showCheckbox) ? true : !!((_b = options.legend) === null || _b === void 0 ? void 0 : _b.showCheckbox);\n} // @TODO: Need to manage with chart type constant/Enum\n\nfunction useRectIcon(type) {\n  return includes(['bar', 'column', 'area', 'pie', 'boxPlot', 'bullet', 'radialBar'], type);\n}\n\nfunction useCircleIcon(type) {\n  return includes(['bubble', 'scatter'], type);\n}\n\nfunction useLineIcon(type) {\n  return includes(['line', 'radar'], type);\n}\n\nexport function getIconType(type) {\n  let iconType = 'spectrum';\n\n  if (useCircleIcon(type)) {\n    iconType = 'circle';\n  } else if (useRectIcon(type)) {\n    iconType = 'rect';\n  } else if (useLineIcon(type)) {\n    iconType = 'line';\n  }\n\n  return iconType;\n}\nexport function getLegendAlign(options) {\n  var _a, _b;\n\n  return _b = (_a = options.legend) === null || _a === void 0 ? void 0 : _a.align, _b !== null && _b !== void 0 ? _b : 'right';\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/helpers/legend.js"],"names":["includes","isUndefined","getActiveSeriesMap","legend","data","reduce","acc","active","label","Object","assign","showCircleLegend","options","_a","_b","_c","circleLegend","visible","showLegend","series","treemap","useColorValue","showCheckbox","useRectIcon","type","useCircleIcon","useLineIcon","getIconType","iconType","getLegendAlign","align"],"mappings":"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","sourcesContent":["import { includes, isUndefined } from \"./utils\";\nexport function getActiveSeriesMap(legend) {\n    return legend.data.reduce((acc, { active, label }) => (Object.assign(Object.assign({}, acc), { [label]: active })), {});\n}\nexport function showCircleLegend(options) {\n    var _a, _b, _c;\n    return _c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.circleLegend) === null || _b === void 0 ? void 0 : _b.visible, (_c !== null && _c !== void 0 ? _c : true);\n}\nexport function showLegend(options, series) {\n    var _a, _b, _c;\n    if (series.treemap && !((_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue)) {\n        return false;\n    }\n    return isUndefined((_b = options.legend) === null || _b === void 0 ? void 0 : _b.visible) ? true : !!((_c = options.legend) === null || _c === void 0 ? void 0 : _c.visible);\n}\nexport function showCheckbox(options) {\n    var _a, _b;\n    return isUndefined((_a = options.legend) === null || _a === void 0 ? void 0 : _a.showCheckbox) ? true : !!((_b = options.legend) === null || _b === void 0 ? void 0 : _b.showCheckbox);\n}\n// @TODO: Need to manage with chart type constant/Enum\nfunction useRectIcon(type) {\n    return includes(['bar', 'column', 'area', 'pie', 'boxPlot', 'bullet', 'radialBar'], type);\n}\nfunction useCircleIcon(type) {\n    return includes(['bubble', 'scatter'], type);\n}\nfunction useLineIcon(type) {\n    return includes(['line', 'radar'], type);\n}\nexport function getIconType(type) {\n    let iconType = 'spectrum';\n    if (useCircleIcon(type)) {\n        iconType = 'circle';\n    }\n    else if (useRectIcon(type)) {\n        iconType = 'rect';\n    }\n    else if (useLineIcon(type)) {\n        iconType = 'line';\n    }\n    return iconType;\n}\nexport function getLegendAlign(options) {\n    var _a, _b;\n    return _b = (_a = options.legend) === null || _a === void 0 ? void 0 : _a.align, (_b !== null && _b !== void 0 ? _b : 'right');\n}\n"]},"metadata":{},"sourceType":"module"}