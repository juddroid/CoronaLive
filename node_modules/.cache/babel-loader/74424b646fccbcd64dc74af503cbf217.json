{"ast":null,"code":"import Chart from \"./chart\";\nimport stackSeriesData from \"../store/stackSeriesData\";\nimport plot from \"../store/plot\";\nimport axes from \"../store/axes\";\nimport scale from \"../store/scale\";\nimport dataRange from \"../store/dataRange\";\nimport Legend from \"../component/legend\";\nimport BoxStackSeries from \"../component/boxStackSeries\";\nimport BoxSeries from \"../component/boxSeries\";\nimport LineSeries from \"../component/lineSeries\";\nimport Plot from \"../component/plot\";\nimport Title from \"../component/title\";\nimport ZeroAxis from \"../component/zeroAxis\";\nimport Axis from \"../component/axis\";\nimport AxisTitle from \"../component/axisTitle\";\nimport ExportMenu from \"../component/exportMenu\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport Tooltip from \"../component/tooltip\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as lineSeriesBrush from \"../brushes/lineSeries\";\nimport { isExist } from \"../helpers/utils\";\n\nfunction hasPointEventType(respondersModel, name) {\n  return respondersModel.find(({\n    component\n  }) => component.name === name && component.eventDetectType === 'point');\n}\n\nfunction hasColumnLineUsingPointEventType(respondersModel) {\n  return isExist(hasPointEventType(respondersModel, 'column')) && isExist(hasPointEventType(respondersModel, 'line'));\n}\n/**\n * @class\n * @classdesc ColumnLine Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making ColumnLine Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {Array<Object>} props.data.series.line - Line series data. Coordinate types data is not possible.\n *       @param {Array<Object>} props.data.series.column - Column series data.\n *   @param {Object} [props.options] - Options for making ColumnLine Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series] - Write common options in the upper depth and separate options to be applied to each chart.\n *       @param {Object} [props.options.series.line] - Options to be applied to the line chart. 'spline', 'showDot', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Line Chart guide} on github.\n *       @param {Object} [props.options.series.column] - Options to be applied to the column chart. 'barWidth', 'stack', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Column Chart guide} on github.\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'near', 'nearest', 'grouped', 'point' is available.\n *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *       @param {Array<Object>} [props.options.plot.lines] - Plot lines information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.\n *       @param {Array<Object>} [props.options.plot.bands] - Plot bands information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|ColumnLine Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme. Each theme to be applied to the two charts should be written separately.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\n\nexport default class ColumnLineChart extends Chart {\n  constructor({\n    el,\n    options,\n    data: {\n      series,\n      categories\n    }\n  }) {\n    super({\n      el,\n      options,\n      series: series,\n      categories,\n      modules: [stackSeriesData, dataRange, scale, axes, plot]\n    });\n    /**\n     * Add data.\n     * @param {Array} data - Array of data to be added.\n     * @param {string} category - Category to be added.\n     * @param {string} chartType - Which type of chart to add.\n     * @api\n     * @example\n     * chart.addData([10, 20], '6', 'line');\n     */\n\n    this.addData = (data, category, chartType) => {\n      this.animationControlFlag.updating = true;\n      this.resetSeries();\n      this.store.dispatch('addData', {\n        data,\n        category,\n        chartType\n      });\n    };\n    /**\n     * Hide series data label.\n     * @api\n     * @example\n     * chart.hideSeriesDataLabel();\n     */\n\n\n    this.hideSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: false\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Show series data label.\n     * @api\n     * @example\n     * chart.showSeriesDataLabel();\n     */\n\n\n    this.showSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: true\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   xAxis: {\n     *     title: 'Month',\n     *     date: { format: 'yy/MM' },\n     *   },\n     *   yAxis: {\n     *     title: 'Energy (kWh)',\n     *   },\n     *   series: {\n     *     line: {\n     *       showDot: true,\n     *     },\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   series: {\n     *     line: {\n     *       showDot: true,\n     *     },\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n     *      @param {number} seriesInfo.seriesIndex - Index of series.\n     *      @param {number} seriesInfo.index - Index of data within series.\n     *      @param {string} seriesInfo.chartType - Specify which chart to select.\n     * @api\n     * @example\n     * chart.showTooltip({index: 1, seriesIndex: 2, chartType: 'column'});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(Plot);\n    this.componentManager.add(Legend);\n    this.componentManager.add(BoxStackSeries, {\n      name: 'column'\n    });\n    this.componentManager.add(BoxSeries, {\n      name: 'column'\n    });\n    this.componentManager.add(LineSeries);\n    this.componentManager.add(ZeroAxis);\n    this.componentManager.add(Axis, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'secondaryYAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'secondaryYAxis'\n    });\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(DataLabels);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, axisBrush, legendBrush, labelBrush, exportMenuBrush, dataLabelBrush, lineSeriesBrush]);\n  }\n\n  handleEventForAllResponders(event, responderModels, delegationMethod, mousePosition) {\n    if (hasColumnLineUsingPointEventType(responderModels)) {\n      const columnSeries = responderModels.find(({\n        component\n      }) => component.name === 'column');\n      columnSeries.component[delegationMethod]({\n        mousePosition,\n        responders: []\n      }, event);\n    }\n  }\n  /**\n   * Add series.\n   * @param {Object} data - Data to be added.\n   * @param {string} data.name - Series name.\n   * @param {Array<number>} data.data - Array of data to be added.\n   * @param {Object} dataInfo - Which type of chart to add.\n   * @param {Object} dataInfo.chartType - Chart type.\n   * @api\n   * @example\n   * chart.addSeries(\n   *   {\n   *     name: 'newSeries',\n   *     data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],\n   *   },\n   *   {\n   *     chartType: 'line'\n   *   });\n   */\n\n\n  addSeries(data, dataInfo) {\n    this.resetSeries();\n    this.store.dispatch('addSeries', Object.assign({\n      data\n    }, dataInfo));\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set\n   * @api\n   * @example\n   * chart.setData({\n   *   categories: ['1', '2', '3'],\n   *   series: {\n   *     column: [\n   *       {\n   *         name: 'A',\n   *         data: [1, 2, 3],\n   *       }\n   *     ],\n   *     line: [\n   *       {\n   *         name: 'B',\n   *         data: [4, 5, 6],\n   *       }\n   *     ]\n   *   }\n   * });\n   */\n\n\n  setData(data) {\n    this.resetSeries();\n    this.store.dispatch('setData', data);\n  }\n  /**\n   * Add plot line.\n   * @param {Object} data - Plot info.\n   *   @param {string|number} data.value - The value where the plot line will be drawn.\n   *   @param {string} data.color - Plot line color.\n   *   @param {string} [data.id] - Plot id. The value on which the removePlotLine is based.\n   * @api\n   * @example\n   * chart.addPlotLine({\n   *   value: 2,\n   *   color: '#00ff22',\n   *   id: 'plot-1',\n   * });\n   */\n\n\n  addPlotLine(data) {\n    this.store.dispatch('addPlotLine', {\n      data\n    });\n  }\n  /**\n   * Remove plot line with id.\n   * @param {string} id - Id of the plot line to be removed\n   * @api\n   * @example\n   * chart.removePlotLine('plot-1');\n   */\n\n\n  removePlotLine(id) {\n    this.store.dispatch('removePlotLine', {\n      id\n    });\n  }\n  /**\n   * Add plot band.\n   * @param {Object} data - plot info\n   *   @param {Array<string|number>} data.range - The range to be drawn\n   *   @param {string} data.color - Plot band color\n   *   @param {string} [data.id] - Plot id. The value on which the removePlotBand is based\n   * @api\n   * @example\n   * chart.addPlotBand({\n   *   value: [2, 4],\n   *   color: '#00ff22',\n   *   id: 'plot-1',\n   * });\n   */\n\n\n  addPlotBand(data) {\n    this.store.dispatch('addPlotBand', {\n      data\n    });\n  }\n  /**\n   * Remove plot band with id.\n   * @param {string} id - id of the plot band to be removed\n   * @api\n   * @example\n   * chart.removePlotBand('plot-1');\n   */\n\n\n  removePlotBand(id) {\n    this.store.dispatch('removePlotBand', {\n      id\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/columnLineChart.js"],"names":["Chart","stackSeriesData","plot","axes","scale","dataRange","Legend","BoxStackSeries","BoxSeries","LineSeries","Plot","Title","ZeroAxis","Axis","AxisTitle","ExportMenu","SelectedSeries","HoveredSeries","DataLabels","Tooltip","Background","NoDataText","basicBrush","axisBrush","legendBrush","labelBrush","exportMenuBrush","dataLabelBrush","lineSeriesBrush","isExist","hasPointEventType","respondersModel","name","find","component","eventDetectType","hasColumnLineUsingPointEventType","ColumnLineChart","constructor","el","options","data","series","categories","modules","addData","category","chartType","animationControlFlag","updating","resetSeries","store","dispatch","hideSeriesDataLabel","dataLabels","visible","showSeriesDataLabel","setOptions","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","Object","assign","hideTooltip","initialize","componentManager","add","chartEl","painter","addGroups","handleEventForAllResponders","event","responderModels","delegationMethod","mousePosition","columnSeries","responders","addSeries","dataInfo","setData","addPlotLine","removePlotLine","id","addPlotBand","removePlotBand"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport stackSeriesData from \"../store/stackSeriesData\";\nimport plot from \"../store/plot\";\nimport axes from \"../store/axes\";\nimport scale from \"../store/scale\";\nimport dataRange from \"../store/dataRange\";\nimport Legend from \"../component/legend\";\nimport BoxStackSeries from \"../component/boxStackSeries\";\nimport BoxSeries from \"../component/boxSeries\";\nimport LineSeries from \"../component/lineSeries\";\nimport Plot from \"../component/plot\";\nimport Title from \"../component/title\";\nimport ZeroAxis from \"../component/zeroAxis\";\nimport Axis from \"../component/axis\";\nimport AxisTitle from \"../component/axisTitle\";\nimport ExportMenu from \"../component/exportMenu\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport Tooltip from \"../component/tooltip\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as lineSeriesBrush from \"../brushes/lineSeries\";\nimport { isExist } from \"../helpers/utils\";\nfunction hasPointEventType(respondersModel, name) {\n    return respondersModel.find(({ component }) => component.name === name && component.eventDetectType === 'point');\n}\nfunction hasColumnLineUsingPointEventType(respondersModel) {\n    return (isExist(hasPointEventType(respondersModel, 'column')) &&\n        isExist(hasPointEventType(respondersModel, 'line')));\n}\n/**\n * @class\n * @classdesc ColumnLine Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making ColumnLine Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {Array<Object>} props.data.series.line - Line series data. Coordinate types data is not possible.\n *       @param {Array<Object>} props.data.series.column - Column series data.\n *   @param {Object} [props.options] - Options for making ColumnLine Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series] - Write common options in the upper depth and separate options to be applied to each chart.\n *       @param {Object} [props.options.series.line] - Options to be applied to the line chart. 'spline', 'showDot', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Line Chart guide} on github.\n *       @param {Object} [props.options.series.column] - Options to be applied to the column chart. 'barWidth', 'stack', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Column Chart guide} on github.\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'near', 'nearest', 'grouped', 'point' is available.\n *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *       @param {Array<Object>} [props.options.plot.lines] - Plot lines information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.\n *       @param {Array<Object>} [props.options.plot.bands] - Plot bands information. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Plot guide} on github.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|ColumnLine Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme. Each theme to be applied to the two charts should be written separately.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class ColumnLineChart extends Chart {\n    constructor({ el, options, data: { series, categories } }) {\n        super({\n            el,\n            options,\n            series: series,\n            categories,\n            modules: [stackSeriesData, dataRange, scale, axes, plot],\n        });\n        /**\n         * Add data.\n         * @param {Array} data - Array of data to be added.\n         * @param {string} category - Category to be added.\n         * @param {string} chartType - Which type of chart to add.\n         * @api\n         * @example\n         * chart.addData([10, 20], '6', 'line');\n         */\n        this.addData = (data, category, chartType) => {\n            this.animationControlFlag.updating = true;\n            this.resetSeries();\n            this.store.dispatch('addData', { data, category, chartType });\n        };\n        /**\n         * Hide series data label.\n         * @api\n         * @example\n         * chart.hideSeriesDataLabel();\n         */\n        this.hideSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: false } } },\n            });\n        };\n        /**\n         * Show series data label.\n         * @api\n         * @example\n         * chart.showSeriesDataLabel();\n         */\n        this.showSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: true } } },\n            });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   xAxis: {\n         *     title: 'Month',\n         *     date: { format: 'yy/MM' },\n         *   },\n         *   yAxis: {\n         *     title: 'Energy (kWh)',\n         *   },\n         *   series: {\n         *     line: {\n         *       showDot: true,\n         *     },\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   series: {\n         *     line: {\n         *       showDot: true,\n         *     },\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n         *      @param {number} seriesInfo.seriesIndex - Index of series.\n         *      @param {number} seriesInfo.index - Index of data within series.\n         *      @param {string} seriesInfo.chartType - Specify which chart to select.\n         * @api\n         * @example\n         * chart.showTooltip({index: 1, seriesIndex: 2, chartType: 'column'});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(Plot);\n        this.componentManager.add(Legend);\n        this.componentManager.add(BoxStackSeries, { name: 'column' });\n        this.componentManager.add(BoxSeries, { name: 'column' });\n        this.componentManager.add(LineSeries);\n        this.componentManager.add(ZeroAxis);\n        this.componentManager.add(Axis, { name: 'xAxis' });\n        this.componentManager.add(Axis, { name: 'yAxis' });\n        this.componentManager.add(Axis, { name: 'secondaryYAxis' });\n        this.componentManager.add(AxisTitle, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'yAxis' });\n        this.componentManager.add(AxisTitle, { name: 'secondaryYAxis' });\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(DataLabels);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            axisBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            dataLabelBrush,\n            lineSeriesBrush,\n        ]);\n    }\n    handleEventForAllResponders(event, responderModels, delegationMethod, mousePosition) {\n        if (hasColumnLineUsingPointEventType(responderModels)) {\n            const columnSeries = responderModels.find(({ component }) => component.name === 'column');\n            columnSeries.component[delegationMethod]({ mousePosition, responders: [] }, event);\n        }\n    }\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     * @param {string} data.name - Series name.\n     * @param {Array<number>} data.data - Array of data to be added.\n     * @param {Object} dataInfo - Which type of chart to add.\n     * @param {Object} dataInfo.chartType - Chart type.\n     * @api\n     * @example\n     * chart.addSeries(\n     *   {\n     *     name: 'newSeries',\n     *     data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],\n     *   },\n     *   {\n     *     chartType: 'line'\n     *   });\n     */\n    addSeries(data, dataInfo) {\n        this.resetSeries();\n        this.store.dispatch('addSeries', Object.assign({ data }, dataInfo));\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set\n     * @api\n     * @example\n     * chart.setData({\n     *   categories: ['1', '2', '3'],\n     *   series: {\n     *     column: [\n     *       {\n     *         name: 'A',\n     *         data: [1, 2, 3],\n     *       }\n     *     ],\n     *     line: [\n     *       {\n     *         name: 'B',\n     *         data: [4, 5, 6],\n     *       }\n     *     ]\n     *   }\n     * });\n     */\n    setData(data) {\n        this.resetSeries();\n        this.store.dispatch('setData', data);\n    }\n    /**\n     * Add plot line.\n     * @param {Object} data - Plot info.\n     *   @param {string|number} data.value - The value where the plot line will be drawn.\n     *   @param {string} data.color - Plot line color.\n     *   @param {string} [data.id] - Plot id. The value on which the removePlotLine is based.\n     * @api\n     * @example\n     * chart.addPlotLine({\n     *   value: 2,\n     *   color: '#00ff22',\n     *   id: 'plot-1',\n     * });\n     */\n    addPlotLine(data) {\n        this.store.dispatch('addPlotLine', { data });\n    }\n    /**\n     * Remove plot line with id.\n     * @param {string} id - Id of the plot line to be removed\n     * @api\n     * @example\n     * chart.removePlotLine('plot-1');\n     */\n    removePlotLine(id) {\n        this.store.dispatch('removePlotLine', { id });\n    }\n    /**\n     * Add plot band.\n     * @param {Object} data - plot info\n     *   @param {Array<string|number>} data.range - The range to be drawn\n     *   @param {string} data.color - Plot band color\n     *   @param {string} [data.id] - Plot id. The value on which the removePlotBand is based\n     * @api\n     * @example\n     * chart.addPlotBand({\n     *   value: [2, 4],\n     *   color: '#00ff22',\n     *   id: 'plot-1',\n     * });\n     */\n    addPlotBand(data) {\n        this.store.dispatch('addPlotBand', { data });\n    }\n    /**\n     * Remove plot band with id.\n     * @param {string} id - id of the plot band to be removed\n     * @api\n     * @example\n     * chart.removePlotBand('plot-1');\n     */\n    removePlotBand(id) {\n        this.store.dispatch('removePlotBand', { id });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}