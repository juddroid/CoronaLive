{"ast":null,"code":"function findRootName(rawSeries, seriesIndex, parentName) {\n  var _a, _b;\n\n  const item = (_a = rawSeries.pie) === null || _a === void 0 ? void 0 : _a[seriesIndex].data.find(({\n    name\n  }) => name === parentName);\n  return ((_b = item) === null || _b === void 0 ? void 0 : _b.parentName) ? findRootName(rawSeries, seriesIndex - 1, item.parentName) : parentName;\n}\n\nconst nestedPieSeriesData = {\n  name: 'seriesData',\n  state: () => ({\n    nestedPieSeries: {}\n  }),\n  action: {\n    setNestedPieSeriesData({\n      state,\n      initStoreState\n    }) {\n      const {\n        theme,\n        disabledSeries\n      } = state;\n      const rawSeries = initStoreState.series;\n      const newSeriesData = {};\n      const colorMap = {};\n      rawSeries.pie.forEach(({\n        name: alias,\n        data\n      }, seriesIndex) => {\n        const {\n          colors\n        } = theme.series.pie[alias];\n        const colorList = [];\n        const originSeriesData = data.map((m, index) => {\n          var _a;\n\n          const {\n            parentName,\n            name: dataName\n          } = m;\n          const color = parentName && seriesIndex ? colorMap[parentName] : (_a = colors) === null || _a === void 0 ? void 0 : _a[index];\n          colorList.push(color);\n          colorMap[dataName] = color;\n          const rootParentName = parentName && seriesIndex ? findRootName(rawSeries, seriesIndex - 1, parentName) : dataName;\n          return Object.assign(Object.assign({}, m), {\n            data: m.data,\n            rootParentName,\n            color\n          });\n        });\n        newSeriesData[alias] = {\n          data: originSeriesData.filter(({\n            rootParentName\n          }) => {\n            return !disabledSeries.includes(rootParentName);\n          }),\n          colors: colorList\n        };\n      });\n      state.nestedPieSeries = newSeriesData;\n      this.dispatch('updateNestedPieChartLegend');\n    }\n\n  },\n  observe: {\n    updateNestedPieSeriesData() {\n      this.dispatch('setNestedPieSeriesData');\n    }\n\n  }\n};\nexport default nestedPieSeriesData;","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/store/nestedPieSeriesData.js"],"names":["findRootName","rawSeries","seriesIndex","parentName","_a","_b","item","pie","data","find","name","nestedPieSeriesData","state","nestedPieSeries","action","setNestedPieSeriesData","initStoreState","theme","disabledSeries","series","newSeriesData","colorMap","forEach","alias","colors","colorList","originSeriesData","map","m","index","dataName","color","push","rootParentName","Object","assign","filter","includes","dispatch","observe","updateNestedPieSeriesData"],"mappings":"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","sourcesContent":["function findRootName(rawSeries, seriesIndex, parentName) {\n    var _a, _b;\n    const item = (_a = rawSeries.pie) === null || _a === void 0 ? void 0 : _a[seriesIndex].data.find(({ name }) => name === parentName);\n    return ((_b = item) === null || _b === void 0 ? void 0 : _b.parentName) ? findRootName(rawSeries, seriesIndex - 1, item.parentName) : parentName;\n}\nconst nestedPieSeriesData = {\n    name: 'seriesData',\n    state: () => ({\n        nestedPieSeries: {},\n    }),\n    action: {\n        setNestedPieSeriesData({ state, initStoreState }) {\n            const { theme, disabledSeries } = state;\n            const rawSeries = initStoreState.series;\n            const newSeriesData = {};\n            const colorMap = {};\n            rawSeries.pie.forEach(({ name: alias, data }, seriesIndex) => {\n                const { colors } = theme.series.pie[alias];\n                const colorList = [];\n                const originSeriesData = data.map((m, index) => {\n                    var _a;\n                    const { parentName, name: dataName } = m;\n                    const color = parentName && seriesIndex ? colorMap[parentName] : (_a = colors) === null || _a === void 0 ? void 0 : _a[index];\n                    colorList.push(color);\n                    colorMap[dataName] = color;\n                    const rootParentName = parentName && seriesIndex\n                        ? findRootName(rawSeries, seriesIndex - 1, parentName)\n                        : dataName;\n                    return Object.assign(Object.assign({}, m), { data: m.data, rootParentName,\n                        color });\n                });\n                newSeriesData[alias] = {\n                    data: originSeriesData.filter(({ rootParentName }) => {\n                        return !disabledSeries.includes(rootParentName);\n                    }),\n                    colors: colorList,\n                };\n            });\n            state.nestedPieSeries = newSeriesData;\n            this.dispatch('updateNestedPieChartLegend');\n        },\n    },\n    observe: {\n        updateNestedPieSeriesData() {\n            this.dispatch('setNestedPieSeriesData');\n        },\n    },\n};\nexport default nestedPieSeriesData;\n"]},"metadata":{},"sourceType":"module"}