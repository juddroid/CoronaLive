{"ast":null,"code":"import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport stackSeriesData from \"../store/stackSeriesData\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport plot from \"../store/plot\";\nimport Axis from \"../component/axis\";\nimport BoxSeries from \"../component/boxSeries\";\nimport BoxStackSeries from \"../component/boxStackSeries\";\nimport Plot from \"../component/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Legend from \"../component/legend\";\nimport DataLabels from \"../component/dataLabels\";\nimport AxisTitle from \"../component/axisTitle\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport ZeroAxis from \"../component/zeroAxis\";\nimport AxisUsingCenterY from \"../component/axisUsingCenterY\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\n/**\n * @class\n * @classdesc Bar Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Bar Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {Array<number|Array<number>>} props.data.series.data - Series data.\n *   @param {Object} [props.options] - Options for making Bar Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {number} [props.options.series.barWidth] - Bar width.\n *       @param {boolean} [props.options.series.diverging] - Whether to use diverging chart or not.\n *       @param {boolean} [props.options.series.colorByPoint] - Whether to use color feature or not.\n *       @param {Object} [props.options.series.stack] - Option to use the stack chart or, if so, what type of stack to use.\n *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'grouped', 'point' is available.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bar Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\nexport default class BarChart extends Chart {\n  constructor({\n    el,\n    options,\n    data\n  }) {\n    super({\n      el,\n      options,\n      series: {\n        bar: data.series\n      },\n      categories: data.categories,\n      modules: [stackSeriesData, dataRange, scale, axes, plot]\n    });\n    /**\n     * Add data.\n     * @param {Array} data - Array of data to be added.\n     * @param {string} category - Category to be added.\n     * @api\n     * @example\n     * chart.addData([10, 20], '6');\n     */\n\n    this.addData = (data, category) => {\n      this.animationControlFlag.updating = true;\n      this.resetSeries();\n      this.store.dispatch('addData', {\n        data,\n        category\n      });\n    };\n    /**\n     * Hide series data label.\n     * @api\n     * @example\n     * chart.hideSeriesDataLabel();\n     */\n\n\n    this.hideSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: false\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Show series data label.\n     * @api\n     * @example\n     * chart.showSeriesDataLabel();\n     */\n\n\n    this.showSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: true\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options.\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   xAxis: {\n     *     title: 'Month',\n     *     date: { format: 'yy/MM' },\n     *   },\n     *   yAxis: {\n     *     title: 'Energy (kWh)',\n     *   },\n     *   series: {\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options.\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed. If eventType is 'grouped', only seriesIndex is needed.\n     *      @param {number} seriesInfo.index - Index of data within series.If eventType is 'grouped', only seriesIndex is needed.\n     *      @param {number} [seriesInfo.seriesIndex] - Index of series\n     * @api\n     * @example\n     * chart.showTooltip({index: 1, seriesIndex: 2});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    var _a;\n\n    super.initialize();\n    const stackChart = !!((_a = this.store.initStoreState.options.series) === null || _a === void 0 ? void 0 : _a.stack);\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(Plot);\n    this.componentManager.add(Legend);\n    this.componentManager.add(BoxSeries, {\n      name: 'bar',\n      stackChart\n    });\n    this.componentManager.add(BoxStackSeries, {\n      name: 'bar',\n      stackChart\n    });\n    this.componentManager.add(ZeroAxis);\n    this.componentManager.add(Axis, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'secondaryYAxis'\n    });\n    this.componentManager.add(AxisUsingCenterY, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(AxisUsingCenterY, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'secondaryYAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(DataLabels);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, axisBrush, legendBrush, labelBrush, exportMenuBrush, dataLabelBrush]);\n  }\n  /**\n   * Add series.\n   * @param {Object} data - Data to be added.\n   *   @param {string} data.name - Series name.\n   *   @param {Array<number|Array<number>>} data.data - Array of data to be added.\n   * @api\n   * @example\n   * chart.addSeries({\n   *   name: 'newSeries',\n   *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],\n   * });\n   */\n\n\n  addSeries(data) {\n    this.resetSeries();\n    this.store.dispatch('addSeries', {\n      data\n    });\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set.\n   * @api\n   * @example\n   * chart.setData({\n   *   categories: ['1', '2', '3'],\n   *   series: [\n   *     {\n   *       name: 'new series',\n   *       data: [1, 2, 3],\n   *     },\n   *     {\n   *       name: 'new series2',\n   *       data: [4, 5, 6],\n   *     }\n   *   ]\n   * });\n   */\n\n\n  setData(data) {\n    const {\n      categories,\n      series\n    } = data;\n    this.resetSeries();\n    this.store.dispatch('setData', {\n      series: {\n        bar: series\n      },\n      categories\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/barChart.js"],"names":["Chart","dataRange","stackSeriesData","scale","axes","plot","Axis","BoxSeries","BoxStackSeries","Plot","Tooltip","Legend","DataLabels","AxisTitle","Title","ExportMenu","ZeroAxis","AxisUsingCenterY","HoveredSeries","SelectedSeries","Background","NoDataText","basicBrush","axisBrush","legendBrush","labelBrush","dataLabelBrush","exportMenuBrush","BarChart","constructor","el","options","data","series","bar","categories","modules","addData","category","animationControlFlag","updating","resetSeries","store","dispatch","hideSeriesDataLabel","dataLabels","visible","showSeriesDataLabel","setOptions","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","Object","assign","hideTooltip","initialize","_a","stackChart","initStoreState","stack","componentManager","add","name","chartEl","painter","addGroups","addSeries","setData"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,OAAO,KAAKC,SAAZ,MAA2B,iBAA3B;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAO,KAAKC,UAAZ,MAA4B,kBAA5B;AACA,OAAO,KAAKC,cAAZ,MAAgC,sBAAhC;AACA,OAAO,KAAKC,eAAZ,MAAiC,uBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,MAAMC,QAAN,SAAuB5B,KAAvB,CAA6B;AACxC6B,EAAAA,WAAW,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,OAAN;AAAeC,IAAAA;AAAf,GAAD,EAAwB;AAC/B,UAAM;AACFF,MAAAA,EADE;AAEFC,MAAAA,OAFE;AAGFE,MAAAA,MAAM,EAAE;AACJC,QAAAA,GAAG,EAAEF,IAAI,CAACC;AADN,OAHN;AAMFE,MAAAA,UAAU,EAAEH,IAAI,CAACG,UANf;AAOFC,MAAAA,OAAO,EAAE,CAAClC,eAAD,EAAkBD,SAAlB,EAA6BE,KAA7B,EAAoCC,IAApC,EAA0CC,IAA1C;AAPP,KAAN;AASA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,SAAKgC,OAAL,GAAe,CAACL,IAAD,EAAOM,QAAP,KAAoB;AAC/B,WAAKC,oBAAL,CAA0BC,QAA1B,GAAqC,IAArC;AACA,WAAKC,WAAL;AACA,WAAKC,KAAL,CAAWC,QAAX,CAAoB,SAApB,EAA+B;AAAEX,QAAAA,IAAF;AAAQM,QAAAA;AAAR,OAA/B;AACH,KAJD;AAKA;AACR;AACA;AACA;AACA;AACA;;;AACQ,SAAKM,mBAAL,GAA2B,MAAM;AAC7B,WAAKF,KAAL,CAAWC,QAAX,CAAoB,eAApB,EAAqC;AACjCZ,QAAAA,OAAO,EAAE;AAAEE,UAAAA,MAAM,EAAE;AAAEY,YAAAA,UAAU,EAAE;AAAEC,cAAAA,OAAO,EAAE;AAAX;AAAd;AAAV;AADwB,OAArC;AAGH,KAJD;AAKA;AACR;AACA;AACA;AACA;AACA;;;AACQ,SAAKC,mBAAL,GAA2B,MAAM;AAC7B,WAAKL,KAAL,CAAWC,QAAX,CAAoB,eAApB,EAAqC;AACjCZ,QAAAA,OAAO,EAAE;AAAEE,UAAAA,MAAM,EAAE;AAAEY,YAAAA,UAAU,EAAE;AAAEC,cAAAA,OAAO,EAAE;AAAX;AAAd;AAAV;AADwB,OAArC;AAGH,KAJD;AAKA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQ,SAAKE,UAAL,GAAmBjB,OAAD,IAAa;AAC3B,WAAKU,WAAL;AACA,WAAKQ,oBAAL,CAA0B,aAA1B,EAAyClB,OAAzC;AACH,KAHD;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQ,SAAKmB,aAAL,GAAsBnB,OAAD,IAAa;AAC9B,WAAKU,WAAL;AACA,WAAKQ,oBAAL,CAA0B,eAA1B,EAA2ClB,OAA3C;AACH,KAHD;AAIA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACQ,SAAKoB,WAAL,GAAoBC,UAAD,IAAgB;AAC/B,WAAKC,QAAL,CAAcC,IAAd,CAAmB,aAAnB,EAAkCC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,UAAlB,CAAlC;AACH,KAFD;AAGA;AACR;AACA;AACA;AACA;AACA;;;AACQ,SAAKK,WAAL,GAAmB,MAAM;AACrB,WAAKJ,QAAL,CAAcC,IAAd,CAAmB,aAAnB;AACH,KAFD;AAGH;;AACDI,EAAAA,UAAU,GAAG;AACT,QAAIC,EAAJ;;AACA,UAAMD,UAAN;AACA,UAAME,UAAU,GAAG,CAAC,EAAE,CAACD,EAAE,GAAG,KAAKjB,KAAL,CAAWmB,cAAX,CAA0B9B,OAA1B,CAAkCE,MAAxC,MAAoD,IAApD,IAA4D0B,EAAE,KAAK,KAAK,CAAxE,GAA4E,KAAK,CAAjF,GAAqFA,EAAE,CAACG,KAA1F,CAApB;AACA,SAAKC,gBAAL,CAAsBC,GAAtB,CAA0B5C,UAA1B;AACA,SAAK2C,gBAAL,CAAsBC,GAAtB,CAA0BlD,KAA1B;AACA,SAAKiD,gBAAL,CAAsBC,GAAtB,CAA0BvD,IAA1B;AACA,SAAKsD,gBAAL,CAAsBC,GAAtB,CAA0BrD,MAA1B;AACA,SAAKoD,gBAAL,CAAsBC,GAAtB,CAA0BzD,SAA1B,EAAqC;AAAE0D,MAAAA,IAAI,EAAE,KAAR;AAAeL,MAAAA;AAAf,KAArC;AACA,SAAKG,gBAAL,CAAsBC,GAAtB,CAA0BxD,cAA1B,EAA0C;AAAEyD,MAAAA,IAAI,EAAE,KAAR;AAAeL,MAAAA;AAAf,KAA1C;AACA,SAAKG,gBAAL,CAAsBC,GAAtB,CAA0BhD,QAA1B;AACA,SAAK+C,gBAAL,CAAsBC,GAAtB,CAA0B1D,IAA1B,EAAgC;AAAE2D,MAAAA,IAAI,EAAE;AAAR,KAAhC;AACA,SAAKF,gBAAL,CAAsBC,GAAtB,CAA0B1D,IAA1B,EAAgC;AAAE2D,MAAAA,IAAI,EAAE;AAAR,KAAhC;AACA,SAAKF,gBAAL,CAAsBC,GAAtB,CAA0B1D,IAA1B,EAAgC;AAAE2D,MAAAA,IAAI,EAAE;AAAR,KAAhC;AACA,SAAKF,gBAAL,CAAsBC,GAAtB,CAA0B/C,gBAA1B,EAA4C;AAAEgD,MAAAA,IAAI,EAAE;AAAR,KAA5C;AACA,SAAKF,gBAAL,CAAsBC,GAAtB,CAA0B/C,gBAA1B,EAA4C;AAAEgD,MAAAA,IAAI,EAAE;AAAR,KAA5C;AACA,SAAKF,gBAAL,CAAsBC,GAAtB,CAA0BnD,SAA1B,EAAqC;AAAEoD,MAAAA,IAAI,EAAE;AAAR,KAArC;AACA,SAAKF,gBAAL,CAAsBC,GAAtB,CAA0BnD,SAA1B,EAAqC;AAAEoD,MAAAA,IAAI,EAAE;AAAR,KAArC;AACA,SAAKF,gBAAL,CAAsBC,GAAtB,CAA0BnD,SAA1B,EAAqC;AAAEoD,MAAAA,IAAI,EAAE;AAAR,KAArC;AACA,SAAKF,gBAAL,CAAsBC,GAAtB,CAA0BjD,UAA1B,EAAsC;AAAEmD,MAAAA,OAAO,EAAE,KAAKpC;AAAhB,KAAtC;AACA,SAAKiC,gBAAL,CAAsBC,GAAtB,CAA0B9C,aAA1B;AACA,SAAK6C,gBAAL,CAAsBC,GAAtB,CAA0B7C,cAA1B;AACA,SAAK4C,gBAAL,CAAsBC,GAAtB,CAA0BpD,UAA1B;AACA,SAAKmD,gBAAL,CAAsBC,GAAtB,CAA0BtD,OAA1B,EAAmC;AAAEwD,MAAAA,OAAO,EAAE,KAAKpC;AAAhB,KAAnC;AACA,SAAKiC,gBAAL,CAAsBC,GAAtB,CAA0B3C,UAA1B;AACA,SAAK8C,OAAL,CAAaC,SAAb,CAAuB,CACnB9C,UADmB,EAEnBC,SAFmB,EAGnBC,WAHmB,EAInBC,UAJmB,EAKnBE,eALmB,EAMnBD,cANmB,CAAvB;AAQH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI2C,EAAAA,SAAS,CAACrC,IAAD,EAAO;AACZ,SAAKS,WAAL;AACA,SAAKC,KAAL,CAAWC,QAAX,CAAoB,WAApB,EAAiC;AAAEX,MAAAA;AAAF,KAAjC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIsC,EAAAA,OAAO,CAACtC,IAAD,EAAO;AACV,UAAM;AAAEG,MAAAA,UAAF;AAAcF,MAAAA;AAAd,QAAyBD,IAA/B;AACA,SAAKS,WAAL;AACA,SAAKC,KAAL,CAAWC,QAAX,CAAoB,SAApB,EAA+B;AAAEV,MAAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAED;AAAP,OAAV;AAA2BE,MAAAA;AAA3B,KAA/B;AACH;;AA9LuC","sourcesContent":["import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport stackSeriesData from \"../store/stackSeriesData\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport plot from \"../store/plot\";\nimport Axis from \"../component/axis\";\nimport BoxSeries from \"../component/boxSeries\";\nimport BoxStackSeries from \"../component/boxStackSeries\";\nimport Plot from \"../component/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Legend from \"../component/legend\";\nimport DataLabels from \"../component/dataLabels\";\nimport AxisTitle from \"../component/axisTitle\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport ZeroAxis from \"../component/zeroAxis\";\nimport AxisUsingCenterY from \"../component/axisUsingCenterY\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\n/**\n * @class\n * @classdesc Bar Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Bar Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {Array<number|Array<number>>} props.data.series.data - Series data.\n *   @param {Object} [props.options] - Options for making Bar Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {number} [props.options.series.barWidth] - Bar width.\n *       @param {boolean} [props.options.series.diverging] - Whether to use diverging chart or not.\n *       @param {boolean} [props.options.series.colorByPoint] - Whether to use color feature or not.\n *       @param {Object} [props.options.series.stack] - Option to use the stack chart or, if so, what type of stack to use.\n *       @param {string} [props.options.series.eventDetectType] - Event detect type. 'grouped', 'point' is available.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bar Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class BarChart extends Chart {\n    constructor({ el, options, data }) {\n        super({\n            el,\n            options,\n            series: {\n                bar: data.series,\n            },\n            categories: data.categories,\n            modules: [stackSeriesData, dataRange, scale, axes, plot],\n        });\n        /**\n         * Add data.\n         * @param {Array} data - Array of data to be added.\n         * @param {string} category - Category to be added.\n         * @api\n         * @example\n         * chart.addData([10, 20], '6');\n         */\n        this.addData = (data, category) => {\n            this.animationControlFlag.updating = true;\n            this.resetSeries();\n            this.store.dispatch('addData', { data, category });\n        };\n        /**\n         * Hide series data label.\n         * @api\n         * @example\n         * chart.hideSeriesDataLabel();\n         */\n        this.hideSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: false } } },\n            });\n        };\n        /**\n         * Show series data label.\n         * @api\n         * @example\n         * chart.showSeriesDataLabel();\n         */\n        this.showSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: true } } },\n            });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options.\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   xAxis: {\n         *     title: 'Month',\n         *     date: { format: 'yy/MM' },\n         *   },\n         *   yAxis: {\n         *     title: 'Energy (kWh)',\n         *   },\n         *   series: {\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options.\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed. If eventType is 'grouped', only seriesIndex is needed.\n         *      @param {number} seriesInfo.index - Index of data within series.If eventType is 'grouped', only seriesIndex is needed.\n         *      @param {number} [seriesInfo.seriesIndex] - Index of series\n         * @api\n         * @example\n         * chart.showTooltip({index: 1, seriesIndex: 2});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        var _a;\n        super.initialize();\n        const stackChart = !!((_a = this.store.initStoreState.options.series) === null || _a === void 0 ? void 0 : _a.stack);\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(Plot);\n        this.componentManager.add(Legend);\n        this.componentManager.add(BoxSeries, { name: 'bar', stackChart });\n        this.componentManager.add(BoxStackSeries, { name: 'bar', stackChart });\n        this.componentManager.add(ZeroAxis);\n        this.componentManager.add(Axis, { name: 'yAxis' });\n        this.componentManager.add(Axis, { name: 'xAxis' });\n        this.componentManager.add(Axis, { name: 'secondaryYAxis' });\n        this.componentManager.add(AxisUsingCenterY, { name: 'yAxis' });\n        this.componentManager.add(AxisUsingCenterY, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'secondaryYAxis' });\n        this.componentManager.add(AxisTitle, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'yAxis' });\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(DataLabels);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            axisBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            dataLabelBrush,\n        ]);\n    }\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     *   @param {string} data.name - Series name.\n     *   @param {Array<number|Array<number>>} data.data - Array of data to be added.\n     * @api\n     * @example\n     * chart.addSeries({\n     *   name: 'newSeries',\n     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],\n     * });\n     */\n    addSeries(data) {\n        this.resetSeries();\n        this.store.dispatch('addSeries', { data });\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set.\n     * @api\n     * @example\n     * chart.setData({\n     *   categories: ['1', '2', '3'],\n     *   series: [\n     *     {\n     *       name: 'new series',\n     *       data: [1, 2, 3],\n     *     },\n     *     {\n     *       name: 'new series2',\n     *       data: [4, 5, 6],\n     *     }\n     *   ]\n     * });\n     */\n    setData(data) {\n        const { categories, series } = data;\n        this.resetSeries();\n        this.store.dispatch('setData', { series: { bar: series }, categories });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}