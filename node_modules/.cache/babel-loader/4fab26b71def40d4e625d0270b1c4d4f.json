{"ast":null,"code":"import Component from \"./component\";\nimport { crispPixel, makeTickPixelPositions, getXPosition } from \"../helpers/calculator\";\nimport { pick } from \"../helpers/utils\";\n\nfunction getValidIndex(index, startIndex = 0) {\n  return ~~index ? index - startIndex : index;\n}\n\nfunction validXPosition({\n  axisData,\n  offsetSize,\n  value,\n  xAxisLimit,\n  startIndex = 0\n}) {\n  const dataIndex = getValidIndex(value, startIndex);\n  const x = getXPosition(axisData, offsetSize, value, dataIndex, xAxisLimit);\n  return x > 0 ? Math.min(offsetSize, x) : 0;\n}\n\nfunction getPlotAxisData(vertical, axes) {\n  return vertical ? axes.xAxis : axes.yAxis;\n}\n\nexport default class Plot extends Component {\n  constructor() {\n    super(...arguments);\n    this.models = {\n      plot: [],\n      line: [],\n      band: []\n    };\n    this.startIndex = 0;\n  }\n\n  initialize() {\n    this.type = 'plot';\n  }\n\n  getPlotAxisSize(vertical) {\n    return {\n      offsetSize: vertical ? this.rect.width : this.rect.height,\n      anchorSize: vertical ? this.rect.height : this.rect.width\n    };\n  }\n\n  renderLines(axes, categories, lines = [], xAxisLimit) {\n    return lines.map(({\n      value,\n      color\n    }) => {\n      const {\n        offsetSize\n      } = this.getPlotAxisSize(true);\n      const position = validXPosition({\n        axisData: getPlotAxisData(true, axes),\n        offsetSize,\n        value,\n        xAxisLimit,\n        categories,\n        startIndex: this.startIndex\n      });\n      return this.makeLineModel(true, position, {\n        color\n      });\n    });\n  }\n\n  renderBands(axes, categories, bands = [], xAxisLimit) {\n    const {\n      offsetSize,\n      anchorSize\n    } = this.getPlotAxisSize(true);\n    return bands.map(({\n      range,\n      color\n    }) => {\n      const [start, end] = range.map(value => validXPosition({\n        axisData: getPlotAxisData(true, axes),\n        offsetSize,\n        value,\n        xAxisLimit,\n        categories,\n        startIndex: this.startIndex\n      }));\n      return {\n        type: 'rect',\n        x: crispPixel(start),\n        y: crispPixel(0),\n        width: end - start,\n        height: anchorSize,\n        color\n      };\n    });\n  }\n\n  renderPlotLineModels(relativePositions, vertical, options = {}) {\n    var _a, _b, _c;\n\n    const {\n      size,\n      startPosition,\n      axes\n    } = options;\n    const {\n      lineColor: color,\n      lineWidth,\n      dashSegments\n    } = this.theme[vertical ? 'vertical' : 'horizontal'];\n    const tickInterval = ((_c = vertical ? (_a = axes) === null || _a === void 0 ? void 0 : _a.xAxis : (_b = axes) === null || _b === void 0 ? void 0 : _b.yAxis) === null || _c === void 0 ? void 0 : _c.tickInterval) || 1;\n    return relativePositions.filter((_, idx) => !(idx % tickInterval)).map(position => this.makeLineModel(vertical, position, {\n      color,\n      lineWidth,\n      dashSegments\n    }, size !== null && size !== void 0 ? size : this.rect.width, startPosition !== null && startPosition !== void 0 ? startPosition : 0));\n  }\n\n  renderPlotsForCenterYAxis(axes) {\n    const {\n      xAxisHalfSize,\n      secondStartX,\n      yAxisHeight\n    } = axes.centerYAxis; // vertical\n\n    const xAxisTickCount = axes.xAxis.tickCount;\n    const verticalLines = [...this.renderPlotLineModels(makeTickPixelPositions(xAxisHalfSize, xAxisTickCount), true), ...this.renderPlotLineModels(makeTickPixelPositions(xAxisHalfSize, xAxisTickCount, secondStartX), true)]; // horizontal\n\n    const yAxisTickCount = axes.yAxis.tickCount;\n    const yAxisTickPixelPositions = makeTickPixelPositions(yAxisHeight, yAxisTickCount);\n    const horizontalLines = [...this.renderPlotLineModels(yAxisTickPixelPositions, false, {\n      size: xAxisHalfSize\n    }), ...this.renderPlotLineModels(yAxisTickPixelPositions, false, {\n      size: xAxisHalfSize,\n      startPosition: secondStartX\n    })];\n    return [...verticalLines, ...horizontalLines];\n  }\n\n  renderPlots(axes) {\n    const vertical = true;\n    return axes.centerYAxis ? this.renderPlotsForCenterYAxis(axes) : [...this.renderPlotLineModels(this.getTickPixelPositions(!vertical, axes), !vertical, {\n      axes\n    }), ...this.renderPlotLineModels(this.getTickPixelPositions(vertical, axes), vertical, {\n      axes\n    })];\n  }\n\n  getTickPixelPositions(vertical, axes) {\n    const {\n      offsetSize\n    } = this.getPlotAxisSize(vertical);\n    const axisData = getPlotAxisData(vertical, axes);\n    return makeTickPixelPositions(offsetSize, axisData.tickCount);\n  }\n\n  renderPlotBackgroundRect() {\n    return Object.assign(Object.assign({\n      type: 'rect',\n      x: 0,\n      y: 0\n    }, pick(this.rect, 'width', 'height')), {\n      color: this.theme.backgroundColor\n    });\n  }\n\n  render(state) {\n    var _a, _b, _c;\n\n    const {\n      layout,\n      axes,\n      plot,\n      scale,\n      zoomRange,\n      theme\n    } = state;\n\n    if (!plot) {\n      return;\n    }\n\n    this.rect = layout.plot;\n    this.startIndex = zoomRange ? zoomRange[0] : 0;\n    this.theme = theme.plot;\n    const categories = (_a = state.categories, _a !== null && _a !== void 0 ? _a : []);\n    const {\n      lines,\n      bands,\n      visible\n    } = plot;\n    const xAxisLimit = (_c = (_b = scale) === null || _b === void 0 ? void 0 : _b.xAxis) === null || _c === void 0 ? void 0 : _c.limit;\n    this.models.line = this.renderLines(axes, categories, lines, xAxisLimit);\n    this.models.band = this.renderBands(axes, categories, bands, xAxisLimit);\n\n    if (visible) {\n      this.models.plot = [this.renderPlotBackgroundRect(), ...this.renderPlots(axes)];\n    }\n  }\n\n  makeLineModel(vertical, position, {\n    color,\n    dashSegments = [],\n    lineWidth = 1\n  }, sizeWidth, xPos = 0) {\n    const x = vertical ? crispPixel(position) : crispPixel(xPos);\n    const y = vertical ? crispPixel(0) : crispPixel(position);\n    const width = vertical ? 0 : sizeWidth !== null && sizeWidth !== void 0 ? sizeWidth : this.rect.width;\n    const height = vertical ? this.rect.height : 0;\n    return {\n      type: 'line',\n      x,\n      y,\n      x2: x + width,\n      y2: y + height,\n      strokeStyle: color,\n      lineWidth,\n      dashSegments\n    };\n  }\n\n  beforeDraw(painter) {\n    painter.ctx.strokeStyle = 'rgba(0, 0, 0, 0.05)';\n    painter.ctx.lineWidth = 1;\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/component/plot.js"],"names":["Component","crispPixel","makeTickPixelPositions","getXPosition","pick","getValidIndex","index","startIndex","validXPosition","axisData","offsetSize","value","xAxisLimit","dataIndex","x","Math","min","getPlotAxisData","vertical","axes","xAxis","yAxis","Plot","constructor","arguments","models","plot","line","band","initialize","type","getPlotAxisSize","rect","width","height","anchorSize","renderLines","categories","lines","map","color","position","makeLineModel","renderBands","bands","range","start","end","y","renderPlotLineModels","relativePositions","options","_a","_b","_c","size","startPosition","lineColor","lineWidth","dashSegments","theme","tickInterval","filter","_","idx","renderPlotsForCenterYAxis","xAxisHalfSize","secondStartX","yAxisHeight","centerYAxis","xAxisTickCount","tickCount","verticalLines","yAxisTickCount","yAxisTickPixelPositions","horizontalLines","renderPlots","getTickPixelPositions","renderPlotBackgroundRect","Object","assign","backgroundColor","render","state","layout","scale","zoomRange","visible","limit","sizeWidth","xPos","x2","y2","strokeStyle","beforeDraw","painter","ctx"],"mappings":"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","sourcesContent":["import Component from \"./component\";\nimport { crispPixel, makeTickPixelPositions, getXPosition } from \"../helpers/calculator\";\nimport { pick } from \"../helpers/utils\";\nfunction getValidIndex(index, startIndex = 0) {\n    return ~~index ? index - startIndex : index;\n}\nfunction validXPosition({ axisData, offsetSize, value, xAxisLimit, startIndex = 0, }) {\n    const dataIndex = getValidIndex(value, startIndex);\n    const x = getXPosition(axisData, offsetSize, value, dataIndex, xAxisLimit);\n    return x > 0 ? Math.min(offsetSize, x) : 0;\n}\nfunction getPlotAxisData(vertical, axes) {\n    return vertical ? axes.xAxis : axes.yAxis;\n}\nexport default class Plot extends Component {\n    constructor() {\n        super(...arguments);\n        this.models = { plot: [], line: [], band: [] };\n        this.startIndex = 0;\n    }\n    initialize() {\n        this.type = 'plot';\n    }\n    getPlotAxisSize(vertical) {\n        return {\n            offsetSize: vertical ? this.rect.width : this.rect.height,\n            anchorSize: vertical ? this.rect.height : this.rect.width,\n        };\n    }\n    renderLines(axes, categories, lines = [], xAxisLimit) {\n        return lines.map(({ value, color }) => {\n            const { offsetSize } = this.getPlotAxisSize(true);\n            const position = validXPosition({\n                axisData: getPlotAxisData(true, axes),\n                offsetSize,\n                value,\n                xAxisLimit,\n                categories,\n                startIndex: this.startIndex,\n            });\n            return this.makeLineModel(true, position, { color });\n        });\n    }\n    renderBands(axes, categories, bands = [], xAxisLimit) {\n        const { offsetSize, anchorSize } = this.getPlotAxisSize(true);\n        return bands.map(({ range, color }) => {\n            const [start, end] = range.map((value) => validXPosition({\n                axisData: getPlotAxisData(true, axes),\n                offsetSize,\n                value,\n                xAxisLimit,\n                categories,\n                startIndex: this.startIndex,\n            }));\n            return {\n                type: 'rect',\n                x: crispPixel(start),\n                y: crispPixel(0),\n                width: end - start,\n                height: anchorSize,\n                color,\n            };\n        });\n    }\n    renderPlotLineModels(relativePositions, vertical, options = {}) {\n        var _a, _b, _c;\n        const { size, startPosition, axes } = options;\n        const { lineColor: color, lineWidth, dashSegments } = this.theme[vertical ? 'vertical' : 'horizontal'];\n        const tickInterval = ((_c = (vertical ? (_a = axes) === null || _a === void 0 ? void 0 : _a.xAxis : (_b = axes) === null || _b === void 0 ? void 0 : _b.yAxis)) === null || _c === void 0 ? void 0 : _c.tickInterval) || 1;\n        return relativePositions\n            .filter((_, idx) => !(idx % tickInterval))\n            .map((position) => this.makeLineModel(vertical, position, { color, lineWidth, dashSegments }, (size !== null && size !== void 0 ? size : this.rect.width), (startPosition !== null && startPosition !== void 0 ? startPosition : 0)));\n    }\n    renderPlotsForCenterYAxis(axes) {\n        const { xAxisHalfSize, secondStartX, yAxisHeight } = axes.centerYAxis;\n        // vertical\n        const xAxisTickCount = axes.xAxis.tickCount;\n        const verticalLines = [\n            ...this.renderPlotLineModels(makeTickPixelPositions(xAxisHalfSize, xAxisTickCount), true),\n            ...this.renderPlotLineModels(makeTickPixelPositions(xAxisHalfSize, xAxisTickCount, secondStartX), true),\n        ];\n        // horizontal\n        const yAxisTickCount = axes.yAxis.tickCount;\n        const yAxisTickPixelPositions = makeTickPixelPositions(yAxisHeight, yAxisTickCount);\n        const horizontalLines = [\n            ...this.renderPlotLineModels(yAxisTickPixelPositions, false, { size: xAxisHalfSize }),\n            ...this.renderPlotLineModels(yAxisTickPixelPositions, false, {\n                size: xAxisHalfSize,\n                startPosition: secondStartX,\n            }),\n        ];\n        return [...verticalLines, ...horizontalLines];\n    }\n    renderPlots(axes) {\n        const vertical = true;\n        return axes.centerYAxis\n            ? this.renderPlotsForCenterYAxis(axes)\n            : [\n                ...this.renderPlotLineModels(this.getTickPixelPositions(!vertical, axes), !vertical, {\n                    axes,\n                }),\n                ...this.renderPlotLineModels(this.getTickPixelPositions(vertical, axes), vertical, {\n                    axes,\n                }),\n            ];\n    }\n    getTickPixelPositions(vertical, axes) {\n        const { offsetSize } = this.getPlotAxisSize(vertical);\n        const axisData = getPlotAxisData(vertical, axes);\n        return makeTickPixelPositions(offsetSize, axisData.tickCount);\n    }\n    renderPlotBackgroundRect() {\n        return Object.assign(Object.assign({ type: 'rect', x: 0, y: 0 }, pick(this.rect, 'width', 'height')), { color: this.theme.backgroundColor });\n    }\n    render(state) {\n        var _a, _b, _c;\n        const { layout, axes, plot, scale, zoomRange, theme } = state;\n        if (!plot) {\n            return;\n        }\n        this.rect = layout.plot;\n        this.startIndex = zoomRange ? zoomRange[0] : 0;\n        this.theme = theme.plot;\n        const categories = (_a = state.categories, (_a !== null && _a !== void 0 ? _a : []));\n        const { lines, bands, visible } = plot;\n        const xAxisLimit = (_c = (_b = scale) === null || _b === void 0 ? void 0 : _b.xAxis) === null || _c === void 0 ? void 0 : _c.limit;\n        this.models.line = this.renderLines(axes, categories, lines, xAxisLimit);\n        this.models.band = this.renderBands(axes, categories, bands, xAxisLimit);\n        if (visible) {\n            this.models.plot = [this.renderPlotBackgroundRect(), ...this.renderPlots(axes)];\n        }\n    }\n    makeLineModel(vertical, position, { color, dashSegments = [], lineWidth = 1, }, sizeWidth, xPos = 0) {\n        const x = vertical ? crispPixel(position) : crispPixel(xPos);\n        const y = vertical ? crispPixel(0) : crispPixel(position);\n        const width = vertical ? 0 : (sizeWidth !== null && sizeWidth !== void 0 ? sizeWidth : this.rect.width);\n        const height = vertical ? this.rect.height : 0;\n        return {\n            type: 'line',\n            x,\n            y,\n            x2: x + width,\n            y2: y + height,\n            strokeStyle: color,\n            lineWidth,\n            dashSegments,\n        };\n    }\n    beforeDraw(painter) {\n        painter.ctx.strokeStyle = 'rgba(0, 0, 0, 0.05)';\n        painter.ctx.lineWidth = 1;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}