{"ast":null,"code":"import Component from \"./component\";\nimport { includes } from \"../helpers/utils\";\nimport { isSameSeriesResponder } from \"../helpers/responders\";\nimport { makeObservableObjectToNormal } from \"../store/reactive\";\nexport default class SelectedSeries extends Component {\n  constructor() {\n    super(...arguments);\n    this.models = {};\n    this.seriesModels = {};\n    this.activeSeriesNames = {};\n    this.isShow = false;\n\n    this.renderSelectedSeries = selectedSeriesEventModel => {\n      const {\n        name,\n        alias\n      } = selectedSeriesEventModel;\n      const models = this.getSelectedSeriesModelsForRendering(selectedSeriesEventModel);\n      this.models[alias || name] = isSameSeriesResponder(Object.assign(Object.assign({}, selectedSeriesEventModel), {\n        models,\n        comparisonModel: this.models[alias || name]\n      })) ? [] : models;\n      this.seriesModels[alias || name] = this.getSelectedSeriesModels(selectedSeriesEventModel);\n      this.isShow = !!Object.values(this.models).flatMap(value => value).length;\n      this.eventBus.emit(this.isShow ? 'selectSeries' : 'unselectSeries', makeObservableObjectToNormal(this.seriesModels));\n      this.activeSeriesNames[name] = this.getSeriesNames(selectedSeriesEventModel.models, name);\n      this.setActiveState();\n    };\n\n    this.resetSelectedSeries = () => {\n      this.models = {};\n      this.store.dispatch('setAllLegendActiveState', true);\n    };\n  }\n\n  getSeriesNames(selectedSeries, name) {\n    const names = [];\n\n    if (includes(['line', 'area', 'radar', 'bubble', 'scatter', 'bullet', 'boxPlot'], name)) {\n      selectedSeries.forEach(model => {\n        const label = model.name;\n\n        if (label) {\n          names.push(label);\n        }\n      });\n    } else if (includes(['bar', 'column', 'radialBar'], name)) {\n      selectedSeries.forEach(model => {\n        var _a;\n\n        const label = (_a = model.data) === null || _a === void 0 ? void 0 : _a.label;\n\n        if (label) {\n          names.push(label);\n        }\n      });\n    } else if (name === 'pie') {\n      Object.keys(this.models).flatMap(key => this.models[key]).forEach(model => {\n        var _a, _b;\n\n        const label = ((_a = model.data) === null || _a === void 0 ? void 0 : _a.rootParentName) || ((_b = model.data) === null || _b === void 0 ? void 0 : _b.label);\n\n        if (label) {\n          names.push(label);\n        }\n      });\n    }\n\n    return names;\n  }\n\n  getSelectedSeriesModelsForRendering(selectedSeriesEventModel) {\n    const {\n      models,\n      eventDetectType,\n      name\n    } = selectedSeriesEventModel;\n    let renderingModels = models;\n\n    if ((name === 'column' || name === 'bar' || name === 'bullet') && eventDetectType === 'grouped') {\n      renderingModels = models.filter(model => !model.data);\n    } else if (name === 'radialBar' && eventDetectType === 'grouped') {\n      renderingModels = models.filter(model => !model.data);\n    }\n\n    return renderingModels;\n  }\n\n  getSelectedSeriesModels(selectedSeriesEventModel) {\n    const {\n      models,\n      eventDetectType,\n      name\n    } = selectedSeriesEventModel;\n    let selectedSeriesModels = models;\n\n    if ((name === 'column' || name === 'bar' || name === 'bullet') && eventDetectType === 'grouped') {\n      selectedSeriesModels = models.filter(model => model.data);\n    } else if (name === 'radialBar' && eventDetectType === 'grouped') {\n      selectedSeriesModels = models.filter(model => model.data);\n    }\n\n    return selectedSeriesModels;\n  }\n\n  setActiveState() {\n    if (this.isShow) {\n      this.store.dispatch('setAllLegendActiveState', false);\n      Object.values(this.activeSeriesNames).forEach(names => {\n        names.forEach(name => {\n          this.store.dispatch('setLegendActiveState', {\n            name,\n            active: true\n          });\n        });\n      });\n    } else {\n      this.store.dispatch('setAllLegendActiveState', true);\n    }\n\n    this.eventBus.emit('needDraw');\n  }\n\n  initialize() {\n    this.type = 'selectedSeries';\n    this.name = 'selectedSeries';\n    this.eventBus.on('renderSelectedSeries', this.renderSelectedSeries);\n    this.eventBus.on('resetSelectedSeries', this.resetSelectedSeries);\n  }\n\n  render({\n    layout\n  }) {\n    this.rect = layout.plot;\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/component/selectedSeries.js"],"names":["Component","includes","isSameSeriesResponder","makeObservableObjectToNormal","SelectedSeries","constructor","arguments","models","seriesModels","activeSeriesNames","isShow","renderSelectedSeries","selectedSeriesEventModel","name","alias","getSelectedSeriesModelsForRendering","Object","assign","comparisonModel","getSelectedSeriesModels","values","flatMap","value","length","eventBus","emit","getSeriesNames","setActiveState","resetSelectedSeries","store","dispatch","selectedSeries","names","forEach","model","label","push","_a","data","keys","key","_b","rootParentName","eventDetectType","renderingModels","filter","selectedSeriesModels","active","initialize","type","on","render","layout","rect","plot"],"mappings":"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","sourcesContent":["import Component from \"./component\";\nimport { includes } from \"../helpers/utils\";\nimport { isSameSeriesResponder } from \"../helpers/responders\";\nimport { makeObservableObjectToNormal } from \"../store/reactive\";\nexport default class SelectedSeries extends Component {\n    constructor() {\n        super(...arguments);\n        this.models = {};\n        this.seriesModels = {};\n        this.activeSeriesNames = {};\n        this.isShow = false;\n        this.renderSelectedSeries = (selectedSeriesEventModel) => {\n            const { name, alias } = selectedSeriesEventModel;\n            const models = this.getSelectedSeriesModelsForRendering(selectedSeriesEventModel);\n            this.models[alias || name] = isSameSeriesResponder(Object.assign(Object.assign({}, selectedSeriesEventModel), { models, comparisonModel: this.models[alias || name] }))\n                ? []\n                : models;\n            this.seriesModels[alias || name] = this.getSelectedSeriesModels(selectedSeriesEventModel);\n            this.isShow = !!Object.values(this.models).flatMap((value) => value).length;\n            this.eventBus.emit(this.isShow ? 'selectSeries' : 'unselectSeries', makeObservableObjectToNormal(this.seriesModels));\n            this.activeSeriesNames[name] = this.getSeriesNames(selectedSeriesEventModel.models, name);\n            this.setActiveState();\n        };\n        this.resetSelectedSeries = () => {\n            this.models = {};\n            this.store.dispatch('setAllLegendActiveState', true);\n        };\n    }\n    getSeriesNames(selectedSeries, name) {\n        const names = [];\n        if (includes(['line', 'area', 'radar', 'bubble', 'scatter', 'bullet', 'boxPlot'], name)) {\n            selectedSeries.forEach((model) => {\n                const label = model\n                    .name;\n                if (label) {\n                    names.push(label);\n                }\n            });\n        }\n        else if (includes(['bar', 'column', 'radialBar'], name)) {\n            selectedSeries.forEach((model) => {\n                var _a;\n                const label = (_a = model.data) === null || _a === void 0 ? void 0 : _a.label;\n                if (label) {\n                    names.push(label);\n                }\n            });\n        }\n        else if (name === 'pie') {\n            Object.keys(this.models)\n                .flatMap((key) => this.models[key])\n                .forEach((model) => {\n                var _a, _b;\n                const label = ((_a = model.data) === null || _a === void 0 ? void 0 : _a.rootParentName) || ((_b = model.data) === null || _b === void 0 ? void 0 : _b.label);\n                if (label) {\n                    names.push(label);\n                }\n            });\n        }\n        return names;\n    }\n    getSelectedSeriesModelsForRendering(selectedSeriesEventModel) {\n        const { models, eventDetectType, name } = selectedSeriesEventModel;\n        let renderingModels = models;\n        if ((name === 'column' || name === 'bar' || name === 'bullet') &&\n            eventDetectType === 'grouped') {\n            renderingModels = models.filter((model) => !model.data);\n        }\n        else if (name === 'radialBar' && eventDetectType === 'grouped') {\n            renderingModels = models.filter((model) => !model.data);\n        }\n        return renderingModels;\n    }\n    getSelectedSeriesModels(selectedSeriesEventModel) {\n        const { models, eventDetectType, name } = selectedSeriesEventModel;\n        let selectedSeriesModels = models;\n        if ((name === 'column' || name === 'bar' || name === 'bullet') &&\n            eventDetectType === 'grouped') {\n            selectedSeriesModels = models.filter((model) => model.data);\n        }\n        else if (name === 'radialBar' && eventDetectType === 'grouped') {\n            selectedSeriesModels = models.filter((model) => model.data);\n        }\n        return selectedSeriesModels;\n    }\n    setActiveState() {\n        if (this.isShow) {\n            this.store.dispatch('setAllLegendActiveState', false);\n            Object.values(this.activeSeriesNames).forEach((names) => {\n                names.forEach((name) => {\n                    this.store.dispatch('setLegendActiveState', { name, active: true });\n                });\n            });\n        }\n        else {\n            this.store.dispatch('setAllLegendActiveState', true);\n        }\n        this.eventBus.emit('needDraw');\n    }\n    initialize() {\n        this.type = 'selectedSeries';\n        this.name = 'selectedSeries';\n        this.eventBus.on('renderSelectedSeries', this.renderSelectedSeries);\n        this.eventBus.on('resetSelectedSeries', this.resetSelectedSeries);\n    }\n    render({ layout }) {\n        this.rect = layout.plot;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}