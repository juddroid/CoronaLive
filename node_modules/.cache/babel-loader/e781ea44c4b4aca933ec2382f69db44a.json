{"ast":null,"code":"const RAD = Math.PI / 180;\nconst ANGLE_90 = 90;\nexport const ANGLE_CANDIDATES = [0, 25, 45, 65, 85, 90];\n/**\n * Calculate adjacent.\n *\n *   H : Hypotenuse\n *   A : Adjacent\n *   O : Opposite\n *   D : Degree\n *\n *        /|\n *       / |\n *    H /  | O\n *     /   |\n *    /\\ D |\n *    -----\n *       A\n */\n\nfunction calculateAdjacent(degree, hypotenuse) {\n  return Math.cos(degree * RAD) * hypotenuse;\n}\n\nfunction calculateOpposite(degree, hypotenuse) {\n  return Math.sin(degree * RAD) * hypotenuse;\n}\n\nexport function calculateRotatedWidth(degree, width, height) {\n  const centerHalf = calculateAdjacent(degree, width / 2);\n  const sideHalf = calculateAdjacent(ANGLE_90 - degree, height / 2);\n  return (centerHalf + sideHalf) * 2;\n}\nexport function calculateRotatedHeight(degree, width, height) {\n  const centerHalf = calculateOpposite(degree, width / 2);\n  const sideHalf = calculateOpposite(ANGLE_90 - degree, height / 2);\n  return (centerHalf + sideHalf) * 2;\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/helpers/geometric.js"],"names":["RAD","Math","PI","ANGLE_90","ANGLE_CANDIDATES","calculateAdjacent","degree","hypotenuse","cos","calculateOpposite","sin","calculateRotatedWidth","width","height","centerHalf","sideHalf","calculateRotatedHeight"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,IAAI,CAACC,EAAL,GAAU,GAAtB;AACA,MAAMC,QAAQ,GAAG,EAAjB;AACA,OAAO,MAAMC,gBAAgB,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,CAAzB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,UAAnC,EAA+C;AAC3C,SAAON,IAAI,CAACO,GAAL,CAASF,MAAM,GAAGN,GAAlB,IAAyBO,UAAhC;AACH;;AACD,SAASE,iBAAT,CAA2BH,MAA3B,EAAmCC,UAAnC,EAA+C;AAC3C,SAAON,IAAI,CAACS,GAAL,CAASJ,MAAM,GAAGN,GAAlB,IAAyBO,UAAhC;AACH;;AACD,OAAO,SAASI,qBAAT,CAA+BL,MAA/B,EAAuCM,KAAvC,EAA8CC,MAA9C,EAAsD;AACzD,QAAMC,UAAU,GAAGT,iBAAiB,CAACC,MAAD,EAASM,KAAK,GAAG,CAAjB,CAApC;AACA,QAAMG,QAAQ,GAAGV,iBAAiB,CAACF,QAAQ,GAAGG,MAAZ,EAAoBO,MAAM,GAAG,CAA7B,CAAlC;AACA,SAAO,CAACC,UAAU,GAAGC,QAAd,IAA0B,CAAjC;AACH;AACD,OAAO,SAASC,sBAAT,CAAgCV,MAAhC,EAAwCM,KAAxC,EAA+CC,MAA/C,EAAuD;AAC1D,QAAMC,UAAU,GAAGL,iBAAiB,CAACH,MAAD,EAASM,KAAK,GAAG,CAAjB,CAApC;AACA,QAAMG,QAAQ,GAAGN,iBAAiB,CAACN,QAAQ,GAAGG,MAAZ,EAAoBO,MAAM,GAAG,CAA7B,CAAlC;AACA,SAAO,CAACC,UAAU,GAAGC,QAAd,IAA0B,CAAjC;AACH","sourcesContent":["const RAD = Math.PI / 180;\nconst ANGLE_90 = 90;\nexport const ANGLE_CANDIDATES = [0, 25, 45, 65, 85, 90];\n/**\n * Calculate adjacent.\n *\n *   H : Hypotenuse\n *   A : Adjacent\n *   O : Opposite\n *   D : Degree\n *\n *        /|\n *       / |\n *    H /  | O\n *     /   |\n *    /\\ D |\n *    -----\n *       A\n */\nfunction calculateAdjacent(degree, hypotenuse) {\n    return Math.cos(degree * RAD) * hypotenuse;\n}\nfunction calculateOpposite(degree, hypotenuse) {\n    return Math.sin(degree * RAD) * hypotenuse;\n}\nexport function calculateRotatedWidth(degree, width, height) {\n    const centerHalf = calculateAdjacent(degree, width / 2);\n    const sideHalf = calculateAdjacent(ANGLE_90 - degree, height / 2);\n    return (centerHalf + sideHalf) * 2;\n}\nexport function calculateRotatedHeight(degree, width, height) {\n    const centerHalf = calculateOpposite(degree, width / 2);\n    const sideHalf = calculateOpposite(ANGLE_90 - degree, height / 2);\n    return (centerHalf + sideHalf) * 2;\n}\n"]},"metadata":{},"sourceType":"module"}