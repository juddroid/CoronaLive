{"ast":null,"code":"import Component from \"./component\";\nimport { hexToRGB } from \"../helpers/color\";\nimport { getDataLabelsOptions } from \"../helpers/dataLabels\";\nimport { getColorRatio, getSpectrumColor, makeDistances } from \"../helpers/colorSpectrum\";\nimport { deepMergedCopy, isNull, isNumber } from \"../helpers/utils\";\nimport { boxDefault } from \"../helpers/theme\";\nimport { message } from \"../message\";\nexport default class HeatmapSeries extends Component {\n  constructor() {\n    super(...arguments);\n    this.activatedResponders = [];\n\n    this.onMouseoutComponent = () => {\n      this.emitMouseEvent([]);\n    };\n\n    this.selectSeries = ({\n      index,\n      seriesIndex,\n      state\n    }) => {\n      var _a;\n\n      if (!isNumber(index) || !isNumber(seriesIndex)) {\n        return;\n      }\n\n      const dataSize = (_a = state.series.heatmap) === null || _a === void 0 ? void 0 : _a[0].data.length;\n      const responderIndex = seriesIndex * dataSize + index;\n      const model = this.responders[responderIndex];\n\n      if (!model) {\n        throw new Error(message.SELECT_SERIES_API_INDEX_ERROR);\n      }\n\n      this.eventBus.emit('renderHoveredSeries', {\n        models: this.getRespondersWithTheme([model], 'select'),\n        name: this.name\n      });\n      this.eventBus.emit('needDraw');\n    };\n\n    this.showTooltip = ({\n      index,\n      seriesIndex,\n      state\n    }) => {\n      var _a;\n\n      if (!isNumber(index) || !isNumber(seriesIndex)) {\n        return;\n      }\n\n      const dataSize = (_a = state.series.heatmap) === null || _a === void 0 ? void 0 : _a[0].data.length;\n      const responderIndex = seriesIndex * dataSize + index;\n      const model = this.responders[responderIndex];\n\n      if (model) {\n        this.emitMouseEvent([model]);\n      }\n    };\n  }\n\n  initialize() {\n    this.type = 'series';\n    this.name = 'heatmap';\n    this.eventBus.on('selectSeries', this.selectSeries);\n    this.eventBus.on('showTooltip', this.showTooltip);\n    this.eventBus.on('hideTooltip', this.onMouseoutComponent);\n  }\n\n  render(chartState) {\n    const {\n      layout,\n      heatmapSeries,\n      axes,\n      theme,\n      colorValueScale,\n      options\n    } = chartState;\n\n    if (!heatmapSeries) {\n      throw new Error(message.noDataError(this.name));\n    }\n\n    this.theme = theme.series.heatmap;\n    this.selectable = this.getSelectableOption(options);\n    this.rect = layout.plot;\n    const cellSize = {\n      height: axes.yAxis.tickDistance,\n      width: axes.xAxis.tickDistance\n    };\n    this.models = {\n      series: this.renderHeatmapSeries(heatmapSeries, cellSize, colorValueScale)\n    };\n\n    if (getDataLabelsOptions(options, this.name).visible) {\n      this.renderDataLabels(this.makeDataLabels());\n    }\n\n    this.responders = this.makeHeatmapSeriesResponder();\n  }\n\n  makeDataLabels() {\n    const dataLabelTheme = this.theme.dataLabels;\n    return this.models.series.reduce((acc, m) => {\n      return isNull(m.colorValue) ? acc : [...acc, Object.assign(Object.assign({}, m), {\n        type: 'treemapSeriesName',\n        value: m.colorValue,\n        direction: 'left',\n        plot: {\n          x: 0,\n          y: 0,\n          size: 0\n        },\n        theme: Object.assign(Object.assign({}, dataLabelTheme), {\n          color: dataLabelTheme.useSeriesColor ? m.color : dataLabelTheme.color\n        })\n      })];\n    }, []);\n  }\n\n  makeHeatmapSeriesResponder() {\n    return this.models.series.reduce((acc, model) => {\n      return isNull(model.colorValue) ? acc : [...acc, Object.assign(Object.assign({}, model), {\n        data: Object.assign(Object.assign({}, model), {\n          label: model.name,\n          value: model.colorValue,\n          templateType: 'heatmap'\n        }),\n        thickness: boxDefault.HOVER_THICKNESS,\n        style: ['shadow']\n      })];\n    }, []);\n  }\n\n  renderHeatmapSeries(seriesData, cellSize, colorValueScale) {\n    const {\n      startColor,\n      endColor,\n      borderColor,\n      borderWidth\n    } = this.theme;\n    const startRGB = hexToRGB(startColor);\n    const distances = makeDistances(startRGB, hexToRGB(endColor));\n    const {\n      height,\n      width\n    } = cellSize;\n    return seriesData.flatMap(data => {\n      return data.flatMap(datum => {\n        const {\n          indexes,\n          colorValue,\n          category\n        } = datum;\n        const name = `${category.x}, ${category.y}`;\n        const [xIndex, yIndex] = indexes;\n        const colorRatio = getColorRatio(colorValueScale.limit, colorValue);\n        const color = isNull(colorValue) ? 'rgba(0, 0, 0, 0)' : getSpectrumColor(colorRatio, distances, startRGB);\n        const thickness = borderWidth;\n        return {\n          type: 'rect',\n          name,\n          width: width - thickness * 2,\n          height: height - thickness * 2,\n          x: width * xIndex + thickness,\n          y: height * yIndex + thickness,\n          colorValue,\n          colorRatio,\n          color,\n          thickness,\n          borderColor\n        };\n      });\n    });\n  }\n\n  getRespondersWithTheme(responders, type) {\n    return responders.map(responder => deepMergedCopy(responder, Object.assign(Object.assign({}, this.theme[type]), {\n      style: ['shadow']\n    })));\n  }\n\n  onClick({\n    responders\n  }) {\n    if (this.selectable) {\n      this.eventBus.emit('renderSelectedSeries', {\n        models: this.getRespondersWithTheme(responders, 'select'),\n        name: this.name\n      });\n      this.eventBus.emit('needDraw');\n    }\n  }\n\n  onMousemove({\n    responders\n  }) {\n    this.activatedResponders = responders;\n    this.emitMouseEvent(responders);\n  }\n\n  emitMouseEvent(responders) {\n    this.eventBus.emit('renderHoveredSeries', {\n      models: this.getRespondersWithTheme(responders, 'hover'),\n      name: this.name\n    });\n    this.eventBus.emit('seriesPointHovered', {\n      models: responders,\n      name: this.name\n    });\n    this.eventBus.emit('renderSpectrumTooltip', responders);\n    this.eventBus.emit('needDraw');\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/component/heatmapSeries.js"],"names":["Component","hexToRGB","getDataLabelsOptions","getColorRatio","getSpectrumColor","makeDistances","deepMergedCopy","isNull","isNumber","boxDefault","message","HeatmapSeries","constructor","arguments","activatedResponders","onMouseoutComponent","emitMouseEvent","selectSeries","index","seriesIndex","state","_a","dataSize","series","heatmap","data","length","responderIndex","model","responders","Error","SELECT_SERIES_API_INDEX_ERROR","eventBus","emit","models","getRespondersWithTheme","name","showTooltip","initialize","type","on","render","chartState","layout","heatmapSeries","axes","theme","colorValueScale","options","noDataError","selectable","getSelectableOption","rect","plot","cellSize","height","yAxis","tickDistance","width","xAxis","renderHeatmapSeries","visible","renderDataLabels","makeDataLabels","makeHeatmapSeriesResponder","dataLabelTheme","dataLabels","reduce","acc","m","colorValue","Object","assign","value","direction","x","y","size","color","useSeriesColor","label","templateType","thickness","HOVER_THICKNESS","style","seriesData","startColor","endColor","borderColor","borderWidth","startRGB","distances","flatMap","datum","indexes","category","xIndex","yIndex","colorRatio","limit","map","responder","onClick","onMousemove"],"mappings":"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","sourcesContent":["import Component from \"./component\";\nimport { hexToRGB } from \"../helpers/color\";\nimport { getDataLabelsOptions } from \"../helpers/dataLabels\";\nimport { getColorRatio, getSpectrumColor, makeDistances } from \"../helpers/colorSpectrum\";\nimport { deepMergedCopy, isNull, isNumber } from \"../helpers/utils\";\nimport { boxDefault } from \"../helpers/theme\";\nimport { message } from \"../message\";\nexport default class HeatmapSeries extends Component {\n    constructor() {\n        super(...arguments);\n        this.activatedResponders = [];\n        this.onMouseoutComponent = () => {\n            this.emitMouseEvent([]);\n        };\n        this.selectSeries = ({ index, seriesIndex, state, }) => {\n            var _a;\n            if (!isNumber(index) || !isNumber(seriesIndex)) {\n                return;\n            }\n            const dataSize = (_a = state.series.heatmap) === null || _a === void 0 ? void 0 : _a[0].data.length;\n            const responderIndex = seriesIndex * dataSize + index;\n            const model = this.responders[responderIndex];\n            if (!model) {\n                throw new Error(message.SELECT_SERIES_API_INDEX_ERROR);\n            }\n            this.eventBus.emit('renderHoveredSeries', {\n                models: this.getRespondersWithTheme([model], 'select'),\n                name: this.name,\n            });\n            this.eventBus.emit('needDraw');\n        };\n        this.showTooltip = ({ index, seriesIndex, state }) => {\n            var _a;\n            if (!isNumber(index) || !isNumber(seriesIndex)) {\n                return;\n            }\n            const dataSize = (_a = state.series.heatmap) === null || _a === void 0 ? void 0 : _a[0].data.length;\n            const responderIndex = seriesIndex * dataSize + index;\n            const model = this.responders[responderIndex];\n            if (model) {\n                this.emitMouseEvent([model]);\n            }\n        };\n    }\n    initialize() {\n        this.type = 'series';\n        this.name = 'heatmap';\n        this.eventBus.on('selectSeries', this.selectSeries);\n        this.eventBus.on('showTooltip', this.showTooltip);\n        this.eventBus.on('hideTooltip', this.onMouseoutComponent);\n    }\n    render(chartState) {\n        const { layout, heatmapSeries, axes, theme, colorValueScale, options } = chartState;\n        if (!heatmapSeries) {\n            throw new Error(message.noDataError(this.name));\n        }\n        this.theme = theme.series.heatmap;\n        this.selectable = this.getSelectableOption(options);\n        this.rect = layout.plot;\n        const cellSize = {\n            height: axes.yAxis.tickDistance,\n            width: axes.xAxis.tickDistance,\n        };\n        this.models = {\n            series: this.renderHeatmapSeries(heatmapSeries, cellSize, colorValueScale),\n        };\n        if (getDataLabelsOptions(options, this.name).visible) {\n            this.renderDataLabels(this.makeDataLabels());\n        }\n        this.responders = this.makeHeatmapSeriesResponder();\n    }\n    makeDataLabels() {\n        const dataLabelTheme = this.theme.dataLabels;\n        return this.models.series.reduce((acc, m) => {\n            return isNull(m.colorValue)\n                ? acc\n                : [\n                    ...acc,\n                    Object.assign(Object.assign({}, m), { type: 'treemapSeriesName', value: m.colorValue, direction: 'left', plot: { x: 0, y: 0, size: 0 }, theme: Object.assign(Object.assign({}, dataLabelTheme), { color: dataLabelTheme.useSeriesColor ? m.color : dataLabelTheme.color }) }),\n                ];\n        }, []);\n    }\n    makeHeatmapSeriesResponder() {\n        return this.models.series.reduce((acc, model) => {\n            return isNull(model.colorValue)\n                ? acc\n                : [\n                    ...acc,\n                    Object.assign(Object.assign({}, model), { data: Object.assign(Object.assign({}, model), { label: model.name, value: model.colorValue, templateType: 'heatmap' }), thickness: boxDefault.HOVER_THICKNESS, style: ['shadow'] }),\n                ];\n        }, []);\n    }\n    renderHeatmapSeries(seriesData, cellSize, colorValueScale) {\n        const { startColor, endColor, borderColor, borderWidth } = this.theme;\n        const startRGB = hexToRGB(startColor);\n        const distances = makeDistances(startRGB, hexToRGB(endColor));\n        const { height, width } = cellSize;\n        return seriesData.flatMap((data) => {\n            return data.flatMap((datum) => {\n                const { indexes, colorValue, category } = datum;\n                const name = `${category.x}, ${category.y}`;\n                const [xIndex, yIndex] = indexes;\n                const colorRatio = getColorRatio(colorValueScale.limit, colorValue);\n                const color = isNull(colorValue)\n                    ? 'rgba(0, 0, 0, 0)'\n                    : getSpectrumColor(colorRatio, distances, startRGB);\n                const thickness = borderWidth;\n                return {\n                    type: 'rect',\n                    name,\n                    width: width - thickness * 2,\n                    height: height - thickness * 2,\n                    x: width * xIndex + thickness,\n                    y: height * yIndex + thickness,\n                    colorValue,\n                    colorRatio,\n                    color,\n                    thickness,\n                    borderColor,\n                };\n            });\n        });\n    }\n    getRespondersWithTheme(responders, type) {\n        return responders.map((responder) => deepMergedCopy(responder, Object.assign(Object.assign({}, this.theme[type]), { style: ['shadow'] })));\n    }\n    onClick({ responders }) {\n        if (this.selectable) {\n            this.eventBus.emit('renderSelectedSeries', {\n                models: this.getRespondersWithTheme(responders, 'select'),\n                name: this.name,\n            });\n            this.eventBus.emit('needDraw');\n        }\n    }\n    onMousemove({ responders }) {\n        this.activatedResponders = responders;\n        this.emitMouseEvent(responders);\n    }\n    emitMouseEvent(responders) {\n        this.eventBus.emit('renderHoveredSeries', {\n            models: this.getRespondersWithTheme(responders, 'hover'),\n            name: this.name,\n        });\n        this.eventBus.emit('seriesPointHovered', {\n            models: responders,\n            name: this.name,\n        });\n        this.eventBus.emit('renderSpectrumTooltip', responders);\n        this.eventBus.emit('needDraw');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}