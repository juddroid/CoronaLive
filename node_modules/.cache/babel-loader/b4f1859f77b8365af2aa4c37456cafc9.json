{"ast":null,"code":"import Component from \"./component\";\nimport { isLabelAxisOnYAxis } from \"../helpers/axes\";\nimport { crispPixel } from \"../helpers/calculator\";\nimport { isNumber } from \"../helpers/utils\";\nexport default class ZeroAxis extends Component {\n  constructor() {\n    super(...arguments);\n    this.models = [];\n  }\n\n  initialize() {\n    this.type = 'zeroAxis';\n    this.name = 'zeroAxis';\n  }\n\n  render({\n    layout,\n    axes,\n    series,\n    options\n  }) {\n    this.rect = layout.plot;\n    const labelAxisOnYAxis = isLabelAxisOnYAxis(series, options);\n    const valueAxisName = labelAxisOnYAxis ? 'xAxis' : 'yAxis';\n    const {\n      zeroPosition\n    } = axes[valueAxisName];\n\n    if (isNumber(zeroPosition)) {\n      this.models = this.renderZeroModel(zeroPosition, labelAxisOnYAxis);\n    }\n  }\n\n  renderZeroModel(zeroPosition, vertical) {\n    const zeroPixel = crispPixel(0);\n    const position = crispPixel(zeroPosition);\n    let model;\n\n    if (vertical) {\n      model = {\n        type: 'line',\n        x: position,\n        y: zeroPixel,\n        x2: position,\n        y2: crispPixel(this.rect.height),\n        strokeStyle: 'rgba(0, 0, 0, 0.5)'\n      };\n    } else {\n      model = {\n        type: 'line',\n        x: zeroPixel,\n        y: position,\n        x2: crispPixel(this.rect.width),\n        y2: position,\n        strokeStyle: 'rgba(0, 0, 0, 0.5)'\n      };\n    }\n\n    return [model];\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/component/zeroAxis.js"],"names":["Component","isLabelAxisOnYAxis","crispPixel","isNumber","ZeroAxis","constructor","arguments","models","initialize","type","name","render","layout","axes","series","options","rect","plot","labelAxisOnYAxis","valueAxisName","zeroPosition","renderZeroModel","vertical","zeroPixel","position","model","x","y","x2","y2","height","strokeStyle","width"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,eAAe,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC5CK,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,MAAL,GAAc,EAAd;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,SAAKC,IAAL,GAAY,UAAZ;AACA,SAAKC,IAAL,GAAY,UAAZ;AACH;;AACDC,EAAAA,MAAM,CAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA;AAAxB,GAAD,EAAoC;AACtC,SAAKC,IAAL,GAAYJ,MAAM,CAACK,IAAnB;AACA,UAAMC,gBAAgB,GAAGjB,kBAAkB,CAACa,MAAD,EAASC,OAAT,CAA3C;AACA,UAAMI,aAAa,GAAGD,gBAAgB,GAAG,OAAH,GAAa,OAAnD;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAmBP,IAAI,CAACM,aAAD,CAA7B;;AACA,QAAIhB,QAAQ,CAACiB,YAAD,CAAZ,EAA4B;AACxB,WAAKb,MAAL,GAAc,KAAKc,eAAL,CAAqBD,YAArB,EAAmCF,gBAAnC,CAAd;AACH;AACJ;;AACDG,EAAAA,eAAe,CAACD,YAAD,EAAeE,QAAf,EAAyB;AACpC,UAAMC,SAAS,GAAGrB,UAAU,CAAC,CAAD,CAA5B;AACA,UAAMsB,QAAQ,GAAGtB,UAAU,CAACkB,YAAD,CAA3B;AACA,QAAIK,KAAJ;;AACA,QAAIH,QAAJ,EAAc;AACVG,MAAAA,KAAK,GAAG;AACJhB,QAAAA,IAAI,EAAE,MADF;AAEJiB,QAAAA,CAAC,EAAEF,QAFC;AAGJG,QAAAA,CAAC,EAAEJ,SAHC;AAIJK,QAAAA,EAAE,EAAEJ,QAJA;AAKJK,QAAAA,EAAE,EAAE3B,UAAU,CAAC,KAAKc,IAAL,CAAUc,MAAX,CALV;AAMJC,QAAAA,WAAW,EAAE;AANT,OAAR;AAQH,KATD,MAUK;AACDN,MAAAA,KAAK,GAAG;AACJhB,QAAAA,IAAI,EAAE,MADF;AAEJiB,QAAAA,CAAC,EAAEH,SAFC;AAGJI,QAAAA,CAAC,EAAEH,QAHC;AAIJI,QAAAA,EAAE,EAAE1B,UAAU,CAAC,KAAKc,IAAL,CAAUgB,KAAX,CAJV;AAKJH,QAAAA,EAAE,EAAEL,QALA;AAMJO,QAAAA,WAAW,EAAE;AANT,OAAR;AAQH;;AACD,WAAO,CAACN,KAAD,CAAP;AACH;;AA3C2C","sourcesContent":["import Component from \"./component\";\nimport { isLabelAxisOnYAxis } from \"../helpers/axes\";\nimport { crispPixel } from \"../helpers/calculator\";\nimport { isNumber } from \"../helpers/utils\";\nexport default class ZeroAxis extends Component {\n    constructor() {\n        super(...arguments);\n        this.models = [];\n    }\n    initialize() {\n        this.type = 'zeroAxis';\n        this.name = 'zeroAxis';\n    }\n    render({ layout, axes, series, options }) {\n        this.rect = layout.plot;\n        const labelAxisOnYAxis = isLabelAxisOnYAxis(series, options);\n        const valueAxisName = labelAxisOnYAxis ? 'xAxis' : 'yAxis';\n        const { zeroPosition } = axes[valueAxisName];\n        if (isNumber(zeroPosition)) {\n            this.models = this.renderZeroModel(zeroPosition, labelAxisOnYAxis);\n        }\n    }\n    renderZeroModel(zeroPosition, vertical) {\n        const zeroPixel = crispPixel(0);\n        const position = crispPixel(zeroPosition);\n        let model;\n        if (vertical) {\n            model = {\n                type: 'line',\n                x: position,\n                y: zeroPixel,\n                x2: position,\n                y2: crispPixel(this.rect.height),\n                strokeStyle: 'rgba(0, 0, 0, 0.5)',\n            };\n        }\n        else {\n            model = {\n                type: 'line',\n                x: zeroPixel,\n                y: position,\n                x2: crispPixel(this.rect.width),\n                y2: position,\n                strokeStyle: 'rgba(0, 0, 0, 0.5)',\n            };\n        }\n        return [model];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}