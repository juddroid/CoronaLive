{"ast":null,"code":"import Component from \"./component\";\nimport { squarify } from \"../helpers/squarifier\";\nimport { getRGBA, hexToRGB } from \"../helpers/color\";\nimport { getDeepestNode } from \"../helpers/responders\";\nimport { getDataLabelsOptions } from \"../helpers/dataLabels\";\nimport { deepMergedCopy, first, isNumber, last } from \"../helpers/utils\";\nimport { getColorRatio, getSpectrumColor, makeDistances } from \"../helpers/colorSpectrum\";\nimport { boxDefault } from \"../helpers/theme\";\nimport { message } from \"../message\";\nexport default class TreemapSeries extends Component {\n  constructor() {\n    super(...arguments);\n    this.models = {\n      series: [],\n      layer: []\n    };\n    this.activatedResponders = [];\n\n    this.onMouseoutComponent = () => {\n      this.emitMouseEvent([]);\n    };\n\n    this.selectSeries = ({\n      seriesIndex\n    }) => {\n      if (!isNumber(seriesIndex)) {\n        return;\n      }\n\n      const model = this.responders.find(({\n        indexes\n      }) => last(indexes) === seriesIndex);\n\n      if (!model) {\n        throw new Error(message.SELECT_SERIES_API_INDEX_ERROR);\n      }\n\n      this.eventBus.emit('renderSelectedSeries', {\n        models: [model],\n        name: this.name\n      });\n      this.eventBus.emit('needDraw');\n    };\n\n    this.showTooltip = ({\n      seriesIndex\n    }) => {\n      if (!isNumber(seriesIndex)) {\n        return;\n      }\n\n      const model = this.responders.find(({\n        indexes\n      }) => last(indexes) === seriesIndex);\n\n      if (model) {\n        this.emitMouseEvent([model]);\n      }\n    };\n  }\n\n  initialize() {\n    this.type = 'series';\n    this.name = 'treemap';\n    this.eventBus.on('selectSeries', this.selectSeries);\n    this.eventBus.on('showTooltip', this.showTooltip);\n    this.eventBus.on('hideTooltip', this.onMouseoutComponent);\n  }\n\n  getAllChildSeries(series, parentId) {\n    const allChildSeries = [];\n    series.forEach(data => {\n      if (data.parentId === parentId) {\n        allChildSeries.push(data);\n\n        if (data.hasChild) {\n          const res = this.getAllChildSeries(series, data.id);\n          allChildSeries.push(...res);\n        }\n      }\n    });\n    return allChildSeries;\n  }\n\n  render(chartState) {\n    var _a, _b, _c, _d, _e;\n\n    const {\n      layout,\n      treemapSeries,\n      colorValueScale,\n      options,\n      theme,\n      treemapZoomId\n    } = chartState;\n\n    if (!treemapSeries) {\n      throw new Error(message.noDataError(this.name));\n    }\n\n    const currentTreemapZoomId = treemapZoomId.cur;\n    const series = this.getAllChildSeries(treemapSeries, currentTreemapZoomId);\n    this.theme = theme.series.treemap;\n    this.rect = layout.plot;\n    this.selectable = this.getSelectableOption(options);\n    this.models = this.renderTreemapSeries(series, options, colorValueScale, currentTreemapZoomId);\n    this.zoomable = (_b = (_a = options.series) === null || _a === void 0 ? void 0 : _a.zoomable, _b !== null && _b !== void 0 ? _b : false);\n\n    if (getDataLabelsOptions(options, this.name).visible) {\n      const useTreemapLeaf = (_e = (_d = (_c = options.series) === null || _c === void 0 ? void 0 : _c.dataLabels) === null || _d === void 0 ? void 0 : _d.useTreemapLeaf, _e !== null && _e !== void 0 ? _e : false);\n      const dataLabelModel = this.makeDataLabel(useTreemapLeaf, currentTreemapZoomId);\n      this.renderDataLabels(dataLabelModel);\n    }\n\n    this.responders = this.makeTreemapSeriesResponder(currentTreemapZoomId);\n  }\n\n  makeTreemapSeriesResponder(treemapCurrentDepthParentId) {\n    const tooltipData = this.makeTooltipData();\n    let {\n      series\n    } = this.models;\n\n    if (this.zoomable) {\n      series = series.filter(({\n        parentId\n      }) => parentId === treemapCurrentDepthParentId);\n    }\n\n    return series.map((m, idx) => Object.assign(Object.assign({}, m), {\n      data: tooltipData[idx],\n      thickness: boxDefault.HOVER_THICKNESS,\n      style: ['shadow']\n    }));\n  }\n\n  makeTooltipData() {\n    return this.models.series.map(({\n      label,\n      data,\n      color\n    }) => ({\n      label: label,\n      color,\n      value: data\n    }));\n  }\n\n  makeBoundMap(series, parentId, layout, boundMap = {}) {\n    const seriesItems = series.filter(item => item.parentId === parentId);\n    boundMap = Object.assign(Object.assign({}, boundMap), squarify(Object.assign({}, layout), seriesItems));\n    seriesItems.forEach(seriesItem => {\n      boundMap = this.makeBoundMap(series, seriesItem.id, boundMap[seriesItem.id], boundMap);\n    });\n    return boundMap;\n  }\n\n  makeDataLabel(useTreemapLeaf, treemapCurrentDepthParentId) {\n    const series = useTreemapLeaf ? this.models.series.filter(({\n      hasChild\n    }) => !hasChild) : this.models.series.filter(({\n      parentId\n    }) => parentId === treemapCurrentDepthParentId);\n    const dataLabelTheme = this.theme.dataLabels;\n    return series.map(m => Object.assign(Object.assign({}, m), {\n      type: 'treemapSeriesName',\n      value: m.label,\n      direction: 'left',\n      plot: {\n        x: 0,\n        y: 0,\n        size: 0\n      },\n      theme: Object.assign(Object.assign({}, dataLabelTheme), {\n        color: dataLabelTheme.useSeriesColor ? m.color : dataLabelTheme.color\n      })\n    }));\n  }\n\n  getColor(treemapSeries, colors) {\n    const {\n      indexes\n    } = treemapSeries;\n    const colorIdx = first(indexes);\n    return colors[colorIdx];\n  }\n\n  getOpacity(treemapSeries) {\n    const {\n      indexes,\n      depth\n    } = treemapSeries;\n    const idx = last(indexes);\n    return indexes.length === 1 ? 0 : Number((0.1 * depth + 0.05 * idx).toFixed(2));\n  }\n\n  renderTreemapSeries(seriesData, options, colorValueScale, treemapCurrentDepthParentId) {\n    var _a, _b, _c;\n\n    let layer = [];\n    const boundMap = this.makeBoundMap(seriesData, treemapCurrentDepthParentId, Object.assign(Object.assign({}, this.rect), {\n      x: 0,\n      y: 0\n    }));\n    const {\n      colors,\n      startColor,\n      endColor,\n      borderWidth,\n      borderColor\n    } = this.theme;\n    let startRGB, distances;\n    const useColorValue = (_b = (_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue, _b !== null && _b !== void 0 ? _b : false);\n\n    if (useColorValue && startColor && endColor) {\n      startRGB = hexToRGB(startColor);\n      distances = makeDistances(startRGB, hexToRGB(endColor));\n    }\n\n    const series = Object.keys(boundMap).map(id => {\n      const treemapSeries = seriesData.find(item => item.id === id);\n      let colorRatio;\n\n      if (useColorValue) {\n        colorRatio = getColorRatio(colorValueScale.limit, treemapSeries.colorValue);\n      }\n\n      return Object.assign(Object.assign(Object.assign({}, treemapSeries), boundMap[id]), {\n        type: 'rect',\n        colorRatio,\n        color: useColorValue ? getSpectrumColor(colorRatio, distances, startRGB) : this.getColor(treemapSeries, colors),\n        opacity: useColorValue ? 0 : this.getOpacity(treemapSeries),\n        thickness: borderWidth,\n        borderColor: borderColor\n      });\n    });\n\n    if (!((_c = options.series) === null || _c === void 0 ? void 0 : _c.useColorValue)) {\n      layer = series.map(m => Object.assign(Object.assign({}, m), {\n        color: getRGBA('#000000', m.opacity)\n      }));\n    }\n\n    return {\n      series,\n      layer\n    };\n  }\n\n  getRespondersWithTheme(responders, type) {\n    return responders.map(responder => deepMergedCopy(responder, Object.assign(Object.assign({}, this.theme[type]), {\n      style: ['shadow']\n    })));\n  }\n\n  onClick({\n    responders\n  }) {\n    if (responders.length) {\n      if (this.zoomable) {\n        const {\n          id,\n          hasChild\n        } = responders[0];\n\n        if (hasChild) {\n          this.emitMouseEvent([]);\n          this.store.dispatch('setTreemapZoomId', id);\n          this.eventBus.emit('resetSelectedSeries');\n        } else if (this.selectable) {\n          this.eventBus.emit('renderSelectedSeries', {\n            models: this.getRespondersWithTheme(responders, 'select'),\n            name: this.name\n          });\n        }\n      } else if (this.selectable) {\n        const deepestNode = getDeepestNode(responders);\n        this.eventBus.emit('renderSelectedSeries', {\n          models: this.getRespondersWithTheme(deepestNode, 'select'),\n          name: this.name\n        });\n      }\n    }\n  }\n\n  onMousemove({\n    responders\n  }) {\n    const deepestNode = getDeepestNode(responders);\n    this.activatedResponders = deepestNode;\n    this.emitMouseEvent(deepestNode);\n  }\n\n  emitMouseEvent(responders) {\n    this.eventBus.emit('renderHoveredSeries', {\n      models: this.getRespondersWithTheme(responders, 'hover'),\n      name: this.name\n    });\n    this.eventBus.emit('seriesPointHovered', {\n      models: responders,\n      name: this.name\n    });\n    this.eventBus.emit('renderSpectrumTooltip', responders);\n    this.eventBus.emit('needDraw');\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/component/treemapSeries.js"],"names":["Component","squarify","getRGBA","hexToRGB","getDeepestNode","getDataLabelsOptions","deepMergedCopy","first","isNumber","last","getColorRatio","getSpectrumColor","makeDistances","boxDefault","message","TreemapSeries","constructor","arguments","models","series","layer","activatedResponders","onMouseoutComponent","emitMouseEvent","selectSeries","seriesIndex","model","responders","find","indexes","Error","SELECT_SERIES_API_INDEX_ERROR","eventBus","emit","name","showTooltip","initialize","type","on","getAllChildSeries","parentId","allChildSeries","forEach","data","push","hasChild","res","id","render","chartState","_a","_b","_c","_d","_e","layout","treemapSeries","colorValueScale","options","theme","treemapZoomId","noDataError","currentTreemapZoomId","cur","treemap","rect","plot","selectable","getSelectableOption","renderTreemapSeries","zoomable","visible","useTreemapLeaf","dataLabels","dataLabelModel","makeDataLabel","renderDataLabels","makeTreemapSeriesResponder","treemapCurrentDepthParentId","tooltipData","makeTooltipData","filter","map","m","idx","Object","assign","thickness","HOVER_THICKNESS","style","label","color","value","makeBoundMap","boundMap","seriesItems","item","seriesItem","dataLabelTheme","direction","x","y","size","useSeriesColor","getColor","colors","colorIdx","getOpacity","depth","length","Number","toFixed","seriesData","startColor","endColor","borderWidth","borderColor","startRGB","distances","useColorValue","keys","colorRatio","limit","colorValue","opacity","getRespondersWithTheme","responder","onClick","store","dispatch","deepestNode","onMousemove"],"mappings":"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","sourcesContent":["import Component from \"./component\";\nimport { squarify } from \"../helpers/squarifier\";\nimport { getRGBA, hexToRGB } from \"../helpers/color\";\nimport { getDeepestNode } from \"../helpers/responders\";\nimport { getDataLabelsOptions } from \"../helpers/dataLabels\";\nimport { deepMergedCopy, first, isNumber, last } from \"../helpers/utils\";\nimport { getColorRatio, getSpectrumColor, makeDistances } from \"../helpers/colorSpectrum\";\nimport { boxDefault } from \"../helpers/theme\";\nimport { message } from \"../message\";\nexport default class TreemapSeries extends Component {\n    constructor() {\n        super(...arguments);\n        this.models = { series: [], layer: [] };\n        this.activatedResponders = [];\n        this.onMouseoutComponent = () => {\n            this.emitMouseEvent([]);\n        };\n        this.selectSeries = ({ seriesIndex }) => {\n            if (!isNumber(seriesIndex)) {\n                return;\n            }\n            const model = this.responders.find(({ indexes }) => last(indexes) === seriesIndex);\n            if (!model) {\n                throw new Error(message.SELECT_SERIES_API_INDEX_ERROR);\n            }\n            this.eventBus.emit('renderSelectedSeries', {\n                models: [model],\n                name: this.name,\n            });\n            this.eventBus.emit('needDraw');\n        };\n        this.showTooltip = ({ seriesIndex }) => {\n            if (!isNumber(seriesIndex)) {\n                return;\n            }\n            const model = this.responders.find(({ indexes }) => last(indexes) === seriesIndex);\n            if (model) {\n                this.emitMouseEvent([model]);\n            }\n        };\n    }\n    initialize() {\n        this.type = 'series';\n        this.name = 'treemap';\n        this.eventBus.on('selectSeries', this.selectSeries);\n        this.eventBus.on('showTooltip', this.showTooltip);\n        this.eventBus.on('hideTooltip', this.onMouseoutComponent);\n    }\n    getAllChildSeries(series, parentId) {\n        const allChildSeries = [];\n        series.forEach((data) => {\n            if (data.parentId === parentId) {\n                allChildSeries.push(data);\n                if (data.hasChild) {\n                    const res = this.getAllChildSeries(series, data.id);\n                    allChildSeries.push(...res);\n                }\n            }\n        });\n        return allChildSeries;\n    }\n    render(chartState) {\n        var _a, _b, _c, _d, _e;\n        const { layout, treemapSeries, colorValueScale, options, theme, treemapZoomId } = chartState;\n        if (!treemapSeries) {\n            throw new Error(message.noDataError(this.name));\n        }\n        const currentTreemapZoomId = treemapZoomId.cur;\n        const series = this.getAllChildSeries(treemapSeries, currentTreemapZoomId);\n        this.theme = theme.series.treemap;\n        this.rect = layout.plot;\n        this.selectable = this.getSelectableOption(options);\n        this.models = this.renderTreemapSeries(series, options, colorValueScale, currentTreemapZoomId);\n        this.zoomable = (_b = (_a = options.series) === null || _a === void 0 ? void 0 : _a.zoomable, (_b !== null && _b !== void 0 ? _b : false));\n        if (getDataLabelsOptions(options, this.name).visible) {\n            const useTreemapLeaf = (_e = (_d = (_c = options.series) === null || _c === void 0 ? void 0 : _c.dataLabels) === null || _d === void 0 ? void 0 : _d.useTreemapLeaf, (_e !== null && _e !== void 0 ? _e : false));\n            const dataLabelModel = this.makeDataLabel(useTreemapLeaf, currentTreemapZoomId);\n            this.renderDataLabels(dataLabelModel);\n        }\n        this.responders = this.makeTreemapSeriesResponder(currentTreemapZoomId);\n    }\n    makeTreemapSeriesResponder(treemapCurrentDepthParentId) {\n        const tooltipData = this.makeTooltipData();\n        let { series } = this.models;\n        if (this.zoomable) {\n            series = series.filter(({ parentId }) => parentId === treemapCurrentDepthParentId);\n        }\n        return series.map((m, idx) => (Object.assign(Object.assign({}, m), { data: tooltipData[idx], thickness: boxDefault.HOVER_THICKNESS, style: ['shadow'] })));\n    }\n    makeTooltipData() {\n        return this.models.series.map(({ label, data, color }) => ({\n            label: label,\n            color,\n            value: data,\n        }));\n    }\n    makeBoundMap(series, parentId, layout, boundMap = {}) {\n        const seriesItems = series.filter((item) => item.parentId === parentId);\n        boundMap = Object.assign(Object.assign({}, boundMap), squarify(Object.assign({}, layout), seriesItems));\n        seriesItems.forEach((seriesItem) => {\n            boundMap = this.makeBoundMap(series, seriesItem.id, boundMap[seriesItem.id], boundMap);\n        });\n        return boundMap;\n    }\n    makeDataLabel(useTreemapLeaf, treemapCurrentDepthParentId) {\n        const series = useTreemapLeaf\n            ? this.models.series.filter(({ hasChild }) => !hasChild)\n            : this.models.series.filter(({ parentId }) => parentId === treemapCurrentDepthParentId);\n        const dataLabelTheme = this.theme.dataLabels;\n        return series.map((m) => (Object.assign(Object.assign({}, m), { type: 'treemapSeriesName', value: m.label, direction: 'left', plot: { x: 0, y: 0, size: 0 }, theme: Object.assign(Object.assign({}, dataLabelTheme), { color: dataLabelTheme.useSeriesColor ? m.color : dataLabelTheme.color }) })));\n    }\n    getColor(treemapSeries, colors) {\n        const { indexes } = treemapSeries;\n        const colorIdx = first(indexes);\n        return colors[colorIdx];\n    }\n    getOpacity(treemapSeries) {\n        const { indexes, depth } = treemapSeries;\n        const idx = last(indexes);\n        return indexes.length === 1 ? 0 : Number((0.1 * depth + 0.05 * idx).toFixed(2));\n    }\n    renderTreemapSeries(seriesData, options, colorValueScale, treemapCurrentDepthParentId) {\n        var _a, _b, _c;\n        let layer = [];\n        const boundMap = this.makeBoundMap(seriesData, treemapCurrentDepthParentId, Object.assign(Object.assign({}, this.rect), { x: 0, y: 0 }));\n        const { colors, startColor, endColor, borderWidth, borderColor } = this.theme;\n        let startRGB, distances;\n        const useColorValue = (_b = (_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue, (_b !== null && _b !== void 0 ? _b : false));\n        if (useColorValue && startColor && endColor) {\n            startRGB = hexToRGB(startColor);\n            distances = makeDistances(startRGB, hexToRGB(endColor));\n        }\n        const series = Object.keys(boundMap).map((id) => {\n            const treemapSeries = seriesData.find((item) => item.id === id);\n            let colorRatio;\n            if (useColorValue) {\n                colorRatio = getColorRatio(colorValueScale.limit, treemapSeries.colorValue);\n            }\n            return Object.assign(Object.assign(Object.assign({}, treemapSeries), boundMap[id]), { type: 'rect', colorRatio, color: useColorValue\n                    ? getSpectrumColor(colorRatio, distances, startRGB)\n                    : this.getColor(treemapSeries, colors), opacity: useColorValue ? 0 : this.getOpacity(treemapSeries), thickness: borderWidth, borderColor: borderColor });\n        });\n        if (!((_c = options.series) === null || _c === void 0 ? void 0 : _c.useColorValue)) {\n            layer = series.map((m) => (Object.assign(Object.assign({}, m), { color: getRGBA('#000000', m.opacity) })));\n        }\n        return { series, layer };\n    }\n    getRespondersWithTheme(responders, type) {\n        return responders.map((responder) => deepMergedCopy(responder, Object.assign(Object.assign({}, this.theme[type]), { style: ['shadow'] })));\n    }\n    onClick({ responders }) {\n        if (responders.length) {\n            if (this.zoomable) {\n                const { id, hasChild } = responders[0];\n                if (hasChild) {\n                    this.emitMouseEvent([]);\n                    this.store.dispatch('setTreemapZoomId', id);\n                    this.eventBus.emit('resetSelectedSeries');\n                }\n                else if (this.selectable) {\n                    this.eventBus.emit('renderSelectedSeries', {\n                        models: this.getRespondersWithTheme(responders, 'select'),\n                        name: this.name,\n                    });\n                }\n            }\n            else if (this.selectable) {\n                const deepestNode = getDeepestNode(responders);\n                this.eventBus.emit('renderSelectedSeries', {\n                    models: this.getRespondersWithTheme(deepestNode, 'select'),\n                    name: this.name,\n                });\n            }\n        }\n    }\n    onMousemove({ responders }) {\n        const deepestNode = getDeepestNode(responders);\n        this.activatedResponders = deepestNode;\n        this.emitMouseEvent(deepestNode);\n    }\n    emitMouseEvent(responders) {\n        this.eventBus.emit('renderHoveredSeries', {\n            models: this.getRespondersWithTheme(responders, 'hover'),\n            name: this.name,\n        });\n        this.eventBus.emit('seriesPointHovered', {\n            models: responders,\n            name: this.name,\n        });\n        this.eventBus.emit('renderSpectrumTooltip', responders);\n        this.eventBus.emit('needDraw');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}