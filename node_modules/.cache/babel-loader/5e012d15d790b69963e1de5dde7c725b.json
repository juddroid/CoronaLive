{"ast":null,"code":"import Component from \"./component\";\nimport { includes } from \"../helpers/utils\";\nimport { getTitleFontString } from \"../helpers/style\";\nimport { getAxisTheme } from \"../helpers/axes\";\nimport { AxisType } from \"./axis\";\nexport default class AxisTitle extends Component {\n  initialize({\n    name\n  }) {\n    this.type = 'axisTitle';\n    this.name = name;\n    this.isYAxis = includes([AxisType.Y, AxisType.SECONDARY_Y], name);\n  }\n\n  renderAxisTitle(option, textAlign) {\n    const {\n      text,\n      offsetX,\n      offsetY\n    } = option;\n    const [x, y] = this.isYAxis ? [this.name === AxisType.Y ? offsetX : this.rect.width + offsetX, offsetY] : [this.rect.width + offsetX, offsetY];\n    const font = getTitleFontString(this.theme);\n    const fillStyle = this.theme.color;\n    return [{\n      type: 'label',\n      text,\n      x,\n      y,\n      style: ['axisTitle', {\n        textAlign,\n        fillStyle,\n        font\n      }]\n    }];\n  }\n\n  getTextAlign(hasCenterYAxis = false) {\n    let result = 'right';\n\n    if (this.name === AxisType.Y) {\n      result = hasCenterYAxis ? 'center' : 'left';\n    }\n\n    return result;\n  }\n\n  render({\n    axes,\n    layout,\n    theme\n  }) {\n    var _a;\n\n    const titleOption = (_a = axes[this.name]) === null || _a === void 0 ? void 0 : _a.title;\n    this.isShow = !!titleOption;\n\n    if (!this.isShow) {\n      return;\n    }\n\n    this.rect = layout[`${this.name}Title`];\n    this.theme = getAxisTheme(theme, this.name).title;\n    this.models = this.renderAxisTitle(titleOption, this.getTextAlign(!!axes.centerYAxis));\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/component/axisTitle.js"],"names":["Component","includes","getTitleFontString","getAxisTheme","AxisType","AxisTitle","initialize","name","type","isYAxis","Y","SECONDARY_Y","renderAxisTitle","option","textAlign","text","offsetX","offsetY","x","y","rect","width","font","theme","fillStyle","color","style","getTextAlign","hasCenterYAxis","result","render","axes","layout","_a","titleOption","title","isShow","models","centerYAxis"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,eAAe,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAC7CM,EAAAA,UAAU,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAW;AACjB,SAAKC,IAAL,GAAY,WAAZ;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKE,OAAL,GAAeR,QAAQ,CAAC,CAACG,QAAQ,CAACM,CAAV,EAAaN,QAAQ,CAACO,WAAtB,CAAD,EAAqCJ,IAArC,CAAvB;AACH;;AACDK,EAAAA,eAAe,CAACC,MAAD,EAASC,SAAT,EAAoB;AAC/B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA6BJ,MAAnC;AACA,UAAM,CAACK,CAAD,EAAIC,CAAJ,IAAS,KAAKV,OAAL,GACT,CAAC,KAAKF,IAAL,KAAcH,QAAQ,CAACM,CAAvB,GAA2BM,OAA3B,GAAqC,KAAKI,IAAL,CAAUC,KAAV,GAAkBL,OAAxD,EAAiEC,OAAjE,CADS,GAET,CAAC,KAAKG,IAAL,CAAUC,KAAV,GAAkBL,OAAnB,EAA4BC,OAA5B,CAFN;AAGA,UAAMK,IAAI,GAAGpB,kBAAkB,CAAC,KAAKqB,KAAN,CAA/B;AACA,UAAMC,SAAS,GAAG,KAAKD,KAAL,CAAWE,KAA7B;AACA,WAAO,CACH;AACIjB,MAAAA,IAAI,EAAE,OADV;AAEIO,MAAAA,IAFJ;AAGIG,MAAAA,CAHJ;AAIIC,MAAAA,CAJJ;AAKIO,MAAAA,KAAK,EAAE,CAAC,WAAD,EAAc;AAAEZ,QAAAA,SAAF;AAAaU,QAAAA,SAAb;AAAwBF,QAAAA;AAAxB,OAAd;AALX,KADG,CAAP;AASH;;AACDK,EAAAA,YAAY,CAACC,cAAc,GAAG,KAAlB,EAAyB;AACjC,QAAIC,MAAM,GAAG,OAAb;;AACA,QAAI,KAAKtB,IAAL,KAAcH,QAAQ,CAACM,CAA3B,EAA8B;AAC1BmB,MAAAA,MAAM,GAAGD,cAAc,GAAG,QAAH,GAAc,MAArC;AACH;;AACD,WAAOC,MAAP;AACH;;AACDC,EAAAA,MAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBT,IAAAA;AAAhB,GAAD,EAA0B;AAC5B,QAAIU,EAAJ;;AACA,UAAMC,WAAW,GAAG,CAACD,EAAE,GAAGF,IAAI,CAAC,KAAKxB,IAAN,CAAV,MAA2B,IAA3B,IAAmC0B,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACE,KAAnF;AACA,SAAKC,MAAL,GAAc,CAAC,CAACF,WAAhB;;AACA,QAAI,CAAC,KAAKE,MAAV,EAAkB;AACd;AACH;;AACD,SAAKhB,IAAL,GAAYY,MAAM,CAAE,GAAE,KAAKzB,IAAK,OAAd,CAAlB;AACA,SAAKgB,KAAL,GAAapB,YAAY,CAACoB,KAAD,EAAQ,KAAKhB,IAAb,CAAZ,CAA+B4B,KAA5C;AACA,SAAKE,MAAL,GAAc,KAAKzB,eAAL,CAAqBsB,WAArB,EAAkC,KAAKP,YAAL,CAAkB,CAAC,CAACI,IAAI,CAACO,WAAzB,CAAlC,CAAd;AACH;;AAxC4C","sourcesContent":["import Component from \"./component\";\nimport { includes } from \"../helpers/utils\";\nimport { getTitleFontString } from \"../helpers/style\";\nimport { getAxisTheme } from \"../helpers/axes\";\nimport { AxisType } from \"./axis\";\nexport default class AxisTitle extends Component {\n    initialize({ name }) {\n        this.type = 'axisTitle';\n        this.name = name;\n        this.isYAxis = includes([AxisType.Y, AxisType.SECONDARY_Y], name);\n    }\n    renderAxisTitle(option, textAlign) {\n        const { text, offsetX, offsetY } = option;\n        const [x, y] = this.isYAxis\n            ? [this.name === AxisType.Y ? offsetX : this.rect.width + offsetX, offsetY]\n            : [this.rect.width + offsetX, offsetY];\n        const font = getTitleFontString(this.theme);\n        const fillStyle = this.theme.color;\n        return [\n            {\n                type: 'label',\n                text,\n                x,\n                y,\n                style: ['axisTitle', { textAlign, fillStyle, font }],\n            },\n        ];\n    }\n    getTextAlign(hasCenterYAxis = false) {\n        let result = 'right';\n        if (this.name === AxisType.Y) {\n            result = hasCenterYAxis ? 'center' : 'left';\n        }\n        return result;\n    }\n    render({ axes, layout, theme }) {\n        var _a;\n        const titleOption = (_a = axes[this.name]) === null || _a === void 0 ? void 0 : _a.title;\n        this.isShow = !!titleOption;\n        if (!this.isShow) {\n            return;\n        }\n        this.rect = layout[`${this.name}Title`];\n        this.theme = getAxisTheme(theme, this.name).title;\n        this.models = this.renderAxisTitle(titleOption, this.getTextAlign(!!axes.centerYAxis));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}