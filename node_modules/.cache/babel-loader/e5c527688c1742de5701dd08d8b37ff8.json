{"ast":null,"code":"import { message } from \"./message\";\nexport default class Painter {\n  constructor(chart) {\n    this.width = 0;\n    this.height = 0;\n    this.brushes = {};\n    this.chart = chart;\n  }\n\n  showUnsupportedCanvasFeatureError() {\n    if (!this.ctx.setLineDash) {\n      console.warn(message.DASH_SEGMENTS_UNAVAILABLE_ERROR);\n    }\n  }\n\n  setup() {\n    const {\n      height,\n      width\n    } = this.chart.store.state.chart;\n\n    if (!this.canvas) {\n      const canvas = document.createElement('canvas');\n      this.canvas = canvas;\n      canvas.style.backgroundColor = '#fff';\n      this.chart.el.appendChild(canvas);\n      canvas.addEventListener('click', this.chart);\n      canvas.addEventListener('mousemove', this.chart);\n      canvas.addEventListener('mousedown', this.chart);\n      canvas.addEventListener('mouseup', this.chart);\n      const ctx = canvas.getContext('2d');\n\n      if (ctx) {\n        this.ctx = ctx;\n      }\n    }\n\n    this.setSize(width, height);\n    this.showUnsupportedCanvasFeatureError();\n  }\n\n  setSize(width, height) {\n    this.canvas.style.width = `${width}px`;\n    this.canvas.style.height = `${height}px`;\n    let ratio = 1;\n\n    if ('deviceXDPI' in window.screen) {\n      // IE mobile or IE\n      ratio = window.screen.deviceXDPI / window.screen.logicalXDPI;\n    } else if (window.hasOwnProperty('devicePixelRatio')) {\n      ratio = window.devicePixelRatio;\n    }\n\n    this.width = width * ratio || 0;\n    this.height = height * ratio || 0;\n    this.scaleCanvasRatio(ratio);\n  }\n\n  scaleCanvasRatio(ratio) {\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.ctx.scale(ratio, ratio);\n  }\n\n  add(name, brush) {\n    this.brushes[name] = brush;\n  }\n\n  addGroups(groups) {\n    groups.forEach(group => {\n      Object.keys(group).forEach(key => {\n        this.add(key, group[key]);\n      });\n    });\n  }\n\n  paint(name, brushModel) {\n    if (this.brushes[name]) {\n      this.brushes[name](this.ctx, brushModel);\n    } else {\n      throw new Error(message.noBrushError(name));\n    }\n  }\n\n  paintForEach(brushModels) {\n    brushModels.forEach(m => this.paint(m.type, m));\n  }\n\n  beforeFrame() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    this.ctx.fillStyle = '#fff';\n    this.ctx.fillRect(0, 0, this.width, this.height);\n  }\n\n  beforeDraw(transX, transY) {\n    this.ctx.save();\n    this.ctx.translate(transX, transY);\n  }\n\n  afterDraw() {\n    this.ctx.restore();\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/painter.js"],"names":["message","Painter","constructor","chart","width","height","brushes","showUnsupportedCanvasFeatureError","ctx","setLineDash","console","warn","DASH_SEGMENTS_UNAVAILABLE_ERROR","setup","store","state","canvas","document","createElement","style","backgroundColor","el","appendChild","addEventListener","getContext","setSize","ratio","window","screen","deviceXDPI","logicalXDPI","hasOwnProperty","devicePixelRatio","scaleCanvasRatio","scale","add","name","brush","addGroups","groups","forEach","group","Object","keys","key","paint","brushModel","Error","noBrushError","paintForEach","brushModels","m","type","beforeFrame","clearRect","fillStyle","fillRect","beforeDraw","transX","transY","save","translate","afterDraw","restore"],"mappings":"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","sourcesContent":["import { message } from \"./message\";\nexport default class Painter {\n    constructor(chart) {\n        this.width = 0;\n        this.height = 0;\n        this.brushes = {};\n        this.chart = chart;\n    }\n    showUnsupportedCanvasFeatureError() {\n        if (!this.ctx.setLineDash) {\n            console.warn(message.DASH_SEGMENTS_UNAVAILABLE_ERROR);\n        }\n    }\n    setup() {\n        const { height, width } = this.chart.store.state.chart;\n        if (!this.canvas) {\n            const canvas = document.createElement('canvas');\n            this.canvas = canvas;\n            canvas.style.backgroundColor = '#fff';\n            this.chart.el.appendChild(canvas);\n            canvas.addEventListener('click', this.chart);\n            canvas.addEventListener('mousemove', this.chart);\n            canvas.addEventListener('mousedown', this.chart);\n            canvas.addEventListener('mouseup', this.chart);\n            const ctx = canvas.getContext('2d');\n            if (ctx) {\n                this.ctx = ctx;\n            }\n        }\n        this.setSize(width, height);\n        this.showUnsupportedCanvasFeatureError();\n    }\n    setSize(width, height) {\n        this.canvas.style.width = `${width}px`;\n        this.canvas.style.height = `${height}px`;\n        let ratio = 1;\n        if ('deviceXDPI' in window.screen) {\n            // IE mobile or IE\n            ratio =\n                window.screen.deviceXDPI /\n                    window.screen.logicalXDPI;\n        }\n        else if (window.hasOwnProperty('devicePixelRatio')) {\n            ratio = window.devicePixelRatio;\n        }\n        this.width = width * ratio || 0;\n        this.height = height * ratio || 0;\n        this.scaleCanvasRatio(ratio);\n    }\n    scaleCanvasRatio(ratio) {\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.ctx.scale(ratio, ratio);\n    }\n    add(name, brush) {\n        this.brushes[name] = brush;\n    }\n    addGroups(groups) {\n        groups.forEach((group) => {\n            Object.keys(group).forEach((key) => {\n                this.add(key, group[key]);\n            });\n        });\n    }\n    paint(name, brushModel) {\n        if (this.brushes[name]) {\n            this.brushes[name](this.ctx, brushModel);\n        }\n        else {\n            throw new Error(message.noBrushError(name));\n        }\n    }\n    paintForEach(brushModels) {\n        brushModels.forEach((m) => this.paint(m.type, m));\n    }\n    beforeFrame() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        this.ctx.fillStyle = '#fff';\n        this.ctx.fillRect(0, 0, this.width, this.height);\n    }\n    beforeDraw(transX, transY) {\n        this.ctx.save();\n        this.ctx.translate(transX, transY);\n    }\n    afterDraw() {\n        this.ctx.restore();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}