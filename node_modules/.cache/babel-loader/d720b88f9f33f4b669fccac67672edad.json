{"ast":null,"code":"import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport plot from \"../store/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Plot from \"../component/plot\";\nimport ScatterSeries from \"../component/scatterSeries\";\nimport Axis from \"../component/axis\";\nimport Legend from \"../component/legend\";\nimport Title from \"../component/title\";\nimport AxisTitle from \"../component/axisTitle\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as scatterSeriesBrush from \"../brushes/scatterSeries\";\nimport { isNull } from \"../helpers/utils\";\nimport { getCoordinateXValue, getCoordinateYValue } from \"../helpers/coordinate\";\n\nfunction clearUnnecessaryData(scatterSeries) {\n  return scatterSeries.map(series => {\n    const exist = {};\n    return Object.assign(Object.assign({}, series), {\n      data: series.data.filter(datum => !isNull(datum)).reduce((acc, cur) => {\n        const x = getCoordinateXValue(cur);\n        const y = getCoordinateYValue(cur);\n        const key = `${x}-${y}`;\n\n        if (!exist[key]) {\n          exist[key] = true;\n          return [...acc, cur];\n        }\n\n        return acc;\n      }, [])\n    });\n  });\n}\n/**\n * @class\n * @classdesc Scatter Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Scatter Chart.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {Array<Object|Array<number>>} props.data.series.data - Series data.\n *   @param {Object} [props.options] - Options for making Scatter Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object} [props.options.yAxis]\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Scattter Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\n\nexport default class ScatterChart extends Chart {\n  constructor(props) {\n    var _a;\n\n    super({\n      el: props.el,\n      options: props.options,\n      series: {\n        scatter: clearUnnecessaryData(props.data.series)\n      },\n      categories: (_a = props.data) === null || _a === void 0 ? void 0 : _a.categories,\n      modules: [dataRange, scale, axes, plot]\n    });\n    /**\n     * Add data.\n     * @param {Array<Object>} data - Array of data to be added.\n     * @api\n     * @example\n     * chart.addData([\n     *   {x: 10, y: 20},\n     *   {x: 30, y: 40},\n     * ]);\n     */\n\n    this.addData = data => {\n      this.animationControlFlag.updating = true;\n      this.resetSeries();\n      this.store.dispatch('addData', {\n        data\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   xAxis: {\n     *     title: 'Month',\n     *   },\n     *   yAxis: {\n     *     title: 'Energy (kWh)',\n     *   },\n     *   series: {\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n     *      @param {number} seriesInfo.seriesIndex - Index of series.\n     *      @param {number} seriesInfo.index - Index of data within series.\n     * @api\n     * @example\n     * chart.showTooltip({index: 1, seriesIndex: 2});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), {\n        state: this.store.state\n      }));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(Plot);\n    this.componentManager.add(Legend);\n    this.componentManager.add(ScatterSeries);\n    this.componentManager.add(Axis, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, axisBrush, legendBrush, labelBrush, exportMenuBrush, scatterSeriesBrush]);\n  }\n  /**\n   * Add series.\n   * @param {Object} data - Data to be added.\n   *   @param {string} data.name - Series name.\n   *   @param {Array} data.data - Array of data to be added.\n   * @api\n   * @example\n   * chart.addSeries({\n   *   name: 'newSeries',\n   *   data: [\n   *     {x: 10, y: 20},\n   *     {x: 30, y: 40},\n   *   ],\n   * });\n   */\n\n\n  addSeries(data) {\n    this.resetSeries();\n    this.store.dispatch('addSeries', {\n      data\n    });\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set.\n   * @api\n   * @example\n   * chart.setData({\n   *   series: [\n   *     {\n   *       name: 'name'\n   *       data: [\n   *         {x: 10, y: 20},\n   *         {x: 30, y: 40},\n   *       ]\n   *     }\n   *   ]\n   * });\n   */\n\n\n  setData(data) {\n    const {\n      categories,\n      series\n    } = data;\n    this.resetSeries();\n    this.store.dispatch('setData', {\n      series: {\n        scatter: series\n      },\n      categories\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/scatterChart.js"],"names":["Chart","dataRange","scale","axes","plot","Tooltip","Plot","ScatterSeries","Axis","Legend","Title","AxisTitle","ExportMenu","HoveredSeries","SelectedSeries","Background","NoDataText","basicBrush","axisBrush","legendBrush","labelBrush","exportMenuBrush","scatterSeriesBrush","isNull","getCoordinateXValue","getCoordinateYValue","clearUnnecessaryData","scatterSeries","map","series","exist","Object","assign","data","filter","datum","reduce","acc","cur","x","y","key","ScatterChart","constructor","props","_a","el","options","scatter","categories","modules","addData","animationControlFlag","updating","resetSeries","store","dispatch","setOptions","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","state","hideTooltip","initialize","componentManager","add","name","chartEl","painter","addGroups","addSeries","setData"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport plot from \"../store/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Plot from \"../component/plot\";\nimport ScatterSeries from \"../component/scatterSeries\";\nimport Axis from \"../component/axis\";\nimport Legend from \"../component/legend\";\nimport Title from \"../component/title\";\nimport AxisTitle from \"../component/axisTitle\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as scatterSeriesBrush from \"../brushes/scatterSeries\";\nimport { isNull } from \"../helpers/utils\";\nimport { getCoordinateXValue, getCoordinateYValue } from \"../helpers/coordinate\";\nfunction clearUnnecessaryData(scatterSeries) {\n    return scatterSeries.map((series) => {\n        const exist = {};\n        return Object.assign(Object.assign({}, series), { data: series.data\n                .filter((datum) => !isNull(datum))\n                .reduce((acc, cur) => {\n                const x = getCoordinateXValue(cur);\n                const y = getCoordinateYValue(cur);\n                const key = `${x}-${y}`;\n                if (!exist[key]) {\n                    exist[key] = true;\n                    return [...acc, cur];\n                }\n                return acc;\n            }, []) });\n    });\n}\n/**\n * @class\n * @classdesc Scatter Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Scatter Chart.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {Array<Object|Array<number>>} props.data.series.data - Series data.\n *   @param {Object} [props.options] - Options for making Scatter Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object} [props.options.yAxis]\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Scattter Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class ScatterChart extends Chart {\n    constructor(props) {\n        var _a;\n        super({\n            el: props.el,\n            options: props.options,\n            series: {\n                scatter: clearUnnecessaryData(props.data.series),\n            },\n            categories: (_a = props.data) === null || _a === void 0 ? void 0 : _a.categories,\n            modules: [dataRange, scale, axes, plot],\n        });\n        /**\n         * Add data.\n         * @param {Array<Object>} data - Array of data to be added.\n         * @api\n         * @example\n         * chart.addData([\n         *   {x: 10, y: 20},\n         *   {x: 30, y: 40},\n         * ]);\n         */\n        this.addData = (data) => {\n            this.animationControlFlag.updating = true;\n            this.resetSeries();\n            this.store.dispatch('addData', { data });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   xAxis: {\n         *     title: 'Month',\n         *   },\n         *   yAxis: {\n         *     title: 'Energy (kWh)',\n         *   },\n         *   series: {\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n         *      @param {number} seriesInfo.seriesIndex - Index of series.\n         *      @param {number} seriesInfo.index - Index of data within series.\n         * @api\n         * @example\n         * chart.showTooltip({index: 1, seriesIndex: 2});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(Plot);\n        this.componentManager.add(Legend);\n        this.componentManager.add(ScatterSeries);\n        this.componentManager.add(Axis, { name: 'xAxis' });\n        this.componentManager.add(Axis, { name: 'yAxis' });\n        this.componentManager.add(AxisTitle, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'yAxis' });\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            axisBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            scatterSeriesBrush,\n        ]);\n    }\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     *   @param {string} data.name - Series name.\n     *   @param {Array} data.data - Array of data to be added.\n     * @api\n     * @example\n     * chart.addSeries({\n     *   name: 'newSeries',\n     *   data: [\n     *     {x: 10, y: 20},\n     *     {x: 30, y: 40},\n     *   ],\n     * });\n     */\n    addSeries(data) {\n        this.resetSeries();\n        this.store.dispatch('addSeries', { data });\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set.\n     * @api\n     * @example\n     * chart.setData({\n     *   series: [\n     *     {\n     *       name: 'name'\n     *       data: [\n     *         {x: 10, y: 20},\n     *         {x: 30, y: 40},\n     *       ]\n     *     }\n     *   ]\n     * });\n     */\n    setData(data) {\n        const { categories, series } = data;\n        this.resetSeries();\n        this.store.dispatch('setData', { series: { scatter: series }, categories });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}