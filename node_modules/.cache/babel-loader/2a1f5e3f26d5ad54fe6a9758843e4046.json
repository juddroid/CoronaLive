{"ast":null,"code":"import { getDataInRange } from \"../helpers/range\";\n\nfunction makeHeatmapSeries(series, categories, viewRange) {\n  if (!series.heatmap) {\n    return [];\n  }\n\n  return series.heatmap.data.map((rowSeries, y) => {\n    const {\n      yCategory,\n      data\n    } = rowSeries;\n    return getDataInRange(data, viewRange).map((colorValue, x) => ({\n      colorValue,\n      category: {\n        x: categories.x[x],\n        y: yCategory\n      },\n      indexes: [x, y]\n    }));\n  });\n}\n\nconst heatmapSeriesData = {\n  name: 'heatmapSeriesData',\n  state: () => ({\n    heatmapSeries: []\n  }),\n  action: {\n    setHeatmapSeriesData({\n      state,\n      computed\n    }) {\n      state.heatmapSeries = makeHeatmapSeries(state.series, state.categories, computed.viewRange);\n    }\n\n  },\n  observe: {\n    updateTreemapSeriesData() {\n      this.dispatch('setHeatmapSeriesData');\n    }\n\n  }\n};\nexport default heatmapSeriesData;","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/store/heatmapSeriesData.js"],"names":["getDataInRange","makeHeatmapSeries","series","categories","viewRange","heatmap","data","map","rowSeries","y","yCategory","colorValue","x","category","indexes","heatmapSeriesData","name","state","heatmapSeries","action","setHeatmapSeriesData","computed","observe","updateTreemapSeriesData","dispatch"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;;AACA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,UAAnC,EAA+CC,SAA/C,EAA0D;AACtD,MAAI,CAACF,MAAM,CAACG,OAAZ,EAAqB;AACjB,WAAO,EAAP;AACH;;AACD,SAAOH,MAAM,CAACG,OAAP,CAAeC,IAAf,CAAoBC,GAApB,CAAwB,CAACC,SAAD,EAAYC,CAAZ,KAAkB;AAC7C,UAAM;AAAEC,MAAAA,SAAF;AAAaJ,MAAAA;AAAb,QAAsBE,SAA5B;AACA,WAAOR,cAAc,CAACM,IAAD,EAAOF,SAAP,CAAd,CAAgCG,GAAhC,CAAoC,CAACI,UAAD,EAAaC,CAAb,MAAoB;AAC3DD,MAAAA,UAD2D;AAE3DE,MAAAA,QAAQ,EAAE;AACND,QAAAA,CAAC,EAAET,UAAU,CAACS,CAAX,CAAaA,CAAb,CADG;AAENH,QAAAA,CAAC,EAAEC;AAFG,OAFiD;AAM3DI,MAAAA,OAAO,EAAE,CAACF,CAAD,EAAIH,CAAJ;AANkD,KAApB,CAApC,CAAP;AAQH,GAVM,CAAP;AAWH;;AACD,MAAMM,iBAAiB,GAAG;AACtBC,EAAAA,IAAI,EAAE,mBADgB;AAEtBC,EAAAA,KAAK,EAAE,OAAO;AACVC,IAAAA,aAAa,EAAE;AADL,GAAP,CAFe;AAKtBC,EAAAA,MAAM,EAAE;AACJC,IAAAA,oBAAoB,CAAC;AAAEH,MAAAA,KAAF;AAASI,MAAAA;AAAT,KAAD,EAAsB;AACtCJ,MAAAA,KAAK,CAACC,aAAN,GAAsBjB,iBAAiB,CAACgB,KAAK,CAACf,MAAP,EAAee,KAAK,CAACd,UAArB,EAAiCkB,QAAQ,CAACjB,SAA1C,CAAvC;AACH;;AAHG,GALc;AAUtBkB,EAAAA,OAAO,EAAE;AACLC,IAAAA,uBAAuB,GAAG;AACtB,WAAKC,QAAL,CAAc,sBAAd;AACH;;AAHI;AAVa,CAA1B;AAgBA,eAAeT,iBAAf","sourcesContent":["import { getDataInRange } from \"../helpers/range\";\nfunction makeHeatmapSeries(series, categories, viewRange) {\n    if (!series.heatmap) {\n        return [];\n    }\n    return series.heatmap.data.map((rowSeries, y) => {\n        const { yCategory, data } = rowSeries;\n        return getDataInRange(data, viewRange).map((colorValue, x) => ({\n            colorValue,\n            category: {\n                x: categories.x[x],\n                y: yCategory,\n            },\n            indexes: [x, y],\n        }));\n    });\n}\nconst heatmapSeriesData = {\n    name: 'heatmapSeriesData',\n    state: () => ({\n        heatmapSeries: [],\n    }),\n    action: {\n        setHeatmapSeriesData({ state, computed }) {\n            state.heatmapSeries = makeHeatmapSeries(state.series, state.categories, computed.viewRange);\n        },\n    },\n    observe: {\n        updateTreemapSeriesData() {\n            this.dispatch('setHeatmapSeriesData');\n        },\n    },\n};\nexport default heatmapSeriesData;\n"]},"metadata":{},"sourceType":"module"}