{"ast":null,"code":"export function max(arr, condition, context) {\n  let result;\n\n  if (!condition) {\n    result = Math.max(...arr);\n  } else {\n    [result] = arr;\n    const rest = arr.slice(1);\n    let maxValue = condition.call(context, result, 0);\n    rest.forEach((item, index) => {\n      const compareValue = condition.call(context, item, index + 1);\n\n      if (compareValue > maxValue) {\n        maxValue = compareValue;\n        result = item;\n      }\n    });\n  }\n\n  return result;\n}\n/**\n * Array pivot.\n * @memberOf module:arrayUtil\n * @param {Array.<Array>} arr2d target 2d array\n * @returns {Array.<Array>} pivoted 2d array\n */\n\nexport function pivot(arr2d) {\n  const result = [];\n  const len = max(arr2d.map(arr => arr.length));\n  arr2d.forEach(arr => {\n    for (let index = 0; index < len; index += 1) {\n      if (!result[index]) {\n        result[index] = [];\n      }\n\n      result[index].push(arr[index]);\n    }\n  });\n  return result;\n}\nexport function isSameArray(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < arr1.length; i += 1) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function pluck(arr, property) {\n  return arr.reduce((acc, cur) => {\n    return [...acc, cur[property]];\n  }, []);\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/helpers/arrayUtil.js"],"names":["max","arr","condition","context","result","Math","rest","slice","maxValue","call","forEach","item","index","compareValue","pivot","arr2d","len","map","length","push","isSameArray","arr1","arr2","i","pluck","property","reduce","acc","cur"],"mappings":"AAAA,OAAO,SAASA,GAAT,CAAaC,GAAb,EAAkBC,SAAlB,EAA6BC,OAA7B,EAAsC;AACzC,MAAIC,MAAJ;;AACA,MAAI,CAACF,SAAL,EAAgB;AACZE,IAAAA,MAAM,GAAGC,IAAI,CAACL,GAAL,CAAS,GAAGC,GAAZ,CAAT;AACH,GAFD,MAGK;AACD,KAACG,MAAD,IAAWH,GAAX;AACA,UAAMK,IAAI,GAAGL,GAAG,CAACM,KAAJ,CAAU,CAAV,CAAb;AACA,QAAIC,QAAQ,GAAGN,SAAS,CAACO,IAAV,CAAeN,OAAf,EAAwBC,MAAxB,EAAgC,CAAhC,CAAf;AACAE,IAAAA,IAAI,CAACI,OAAL,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1B,YAAMC,YAAY,GAAGX,SAAS,CAACO,IAAV,CAAeN,OAAf,EAAwBQ,IAAxB,EAA8BC,KAAK,GAAG,CAAtC,CAArB;;AACA,UAAIC,YAAY,GAAGL,QAAnB,EAA6B;AACzBA,QAAAA,QAAQ,GAAGK,YAAX;AACAT,QAAAA,MAAM,GAAGO,IAAT;AACH;AACJ,KAND;AAOH;;AACD,SAAOP,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,KAAT,CAAeC,KAAf,EAAsB;AACzB,QAAMX,MAAM,GAAG,EAAf;AACA,QAAMY,GAAG,GAAGhB,GAAG,CAACe,KAAK,CAACE,GAAN,CAAWhB,GAAD,IAASA,GAAG,CAACiB,MAAvB,CAAD,CAAf;AACAH,EAAAA,KAAK,CAACL,OAAN,CAAeT,GAAD,IAAS;AACnB,SAAK,IAAIW,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGI,GAA5B,EAAiCJ,KAAK,IAAI,CAA1C,EAA6C;AACzC,UAAI,CAACR,MAAM,CAACQ,KAAD,CAAX,EAAoB;AAChBR,QAAAA,MAAM,CAACQ,KAAD,CAAN,GAAgB,EAAhB;AACH;;AACDR,MAAAA,MAAM,CAACQ,KAAD,CAAN,CAAcO,IAAd,CAAmBlB,GAAG,CAACW,KAAD,CAAtB;AACH;AACJ,GAPD;AAQA,SAAOR,MAAP;AACH;AACD,OAAO,SAASgB,WAAT,CAAqBC,IAArB,EAA2BC,IAA3B,EAAiC;AACpC,MAAID,IAAI,CAACH,MAAL,KAAgBI,IAAI,CAACJ,MAAzB,EAAiC;AAC7B,WAAO,KAAP;AACH;;AACD,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACH,MAAzB,EAAiCK,CAAC,IAAI,CAAtC,EAAyC;AACrC,QAAIF,IAAI,CAACE,CAAD,CAAJ,KAAYD,IAAI,CAACC,CAAD,CAApB,EAAyB;AACrB,aAAO,KAAP;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AACD,OAAO,SAASC,KAAT,CAAevB,GAAf,EAAoBwB,QAApB,EAA8B;AACjC,SAAOxB,GAAG,CAACyB,MAAJ,CAAW,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5B,WAAO,CAAC,GAAGD,GAAJ,EAASC,GAAG,CAACH,QAAD,CAAZ,CAAP;AACH,GAFM,EAEJ,EAFI,CAAP;AAGH","sourcesContent":["export function max(arr, condition, context) {\n    let result;\n    if (!condition) {\n        result = Math.max(...arr);\n    }\n    else {\n        [result] = arr;\n        const rest = arr.slice(1);\n        let maxValue = condition.call(context, result, 0);\n        rest.forEach((item, index) => {\n            const compareValue = condition.call(context, item, index + 1);\n            if (compareValue > maxValue) {\n                maxValue = compareValue;\n                result = item;\n            }\n        });\n    }\n    return result;\n}\n/**\n * Array pivot.\n * @memberOf module:arrayUtil\n * @param {Array.<Array>} arr2d target 2d array\n * @returns {Array.<Array>} pivoted 2d array\n */\nexport function pivot(arr2d) {\n    const result = [];\n    const len = max(arr2d.map((arr) => arr.length));\n    arr2d.forEach((arr) => {\n        for (let index = 0; index < len; index += 1) {\n            if (!result[index]) {\n                result[index] = [];\n            }\n            result[index].push(arr[index]);\n        }\n    });\n    return result;\n}\nexport function isSameArray(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i += 1) {\n        if (arr1[i] !== arr2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function pluck(arr, property) {\n    return arr.reduce((acc, cur) => {\n        return [...acc, cur[property]];\n    }, []);\n}\n"]},"metadata":{},"sourceType":"module"}