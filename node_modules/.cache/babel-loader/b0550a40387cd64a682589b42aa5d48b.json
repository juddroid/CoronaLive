{"ast":null,"code":"import { extend } from \"./store\";\nimport { rgba } from \"../helpers/color\";\nimport { isRangeValue } from \"../helpers/range\";\nimport { isString, isUndefined } from \"../helpers/utils\";\n\nfunction getOverlappingRange(range) {\n  return range.reduce((acc, rangeData) => {\n    const [accStart, accEnd] = acc;\n    const [start, end] = rangeData;\n    return [Math.min(accStart, start), Math.max(accEnd, end)];\n  }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n}\n\nfunction getCategoryIndex(value, categories) {\n  return categories.findIndex(category => category === String(value));\n}\n\nfunction getValidValue(value, categories, isDateType = false) {\n  if (isDateType) {\n    return Number(new Date(value));\n  }\n\n  if (isString(value)) {\n    return getCategoryIndex(value, categories);\n  }\n\n  return value;\n}\n\nfunction makePlotLines(categories, isDateType, plotLines = []) {\n  return plotLines.map(({\n    value,\n    color,\n    opacity\n  }) => ({\n    value: getValidValue(value, categories, isDateType),\n    color: rgba(color, opacity)\n  }));\n}\n\nfunction makePlotBands(categories, isDateType, plotBands = []) {\n  return plotBands.flatMap(({\n    range,\n    mergeOverlappingRanges = false,\n    color: bgColor,\n    opacity\n  }) => {\n    const color = rgba(bgColor, opacity);\n\n    if (isRangeValue(range[0])) {\n      const ranges = range.map(rangeData => rangeData.map(value => getValidValue(value, categories, isDateType)));\n\n      if (mergeOverlappingRanges) {\n        return {\n          color,\n          range: getOverlappingRange(ranges)\n        };\n      }\n\n      return ranges.map(rangeData => ({\n        range: rangeData,\n        color\n      }));\n    }\n\n    return {\n      color,\n      range\n    };\n  });\n}\n\nfunction isExistPlotId(plots, data) {\n  return plots.some(({\n    id: bandId\n  }) => !isUndefined(bandId) && !isUndefined(data.id) && bandId === data.id);\n}\n\nconst plot = {\n  name: 'plot',\n  state: ({\n    options\n  }) => {\n    var _a, _b, _c;\n\n    return {\n      plot: {\n        visible: (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.visible, _c !== null && _c !== void 0 ? _c : true),\n        lines: [],\n        bands: []\n      }\n    };\n  },\n  action: {\n    setPlot({\n      state\n    }) {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n\n      const {\n        series,\n        options\n      } = state;\n\n      if (!(series.area || series.line)) {\n        return;\n      }\n\n      const rawCategories = state.rawCategories;\n      const lineAreaOptions = options;\n      const lines = makePlotLines(rawCategories, !!((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.xAxis) === null || _b === void 0 ? void 0 : _b.date), (_d = (_c = lineAreaOptions) === null || _c === void 0 ? void 0 : _c.plot) === null || _d === void 0 ? void 0 : _d.lines);\n      const bands = makePlotBands(rawCategories, !!((_f = (_e = options) === null || _e === void 0 ? void 0 : _e.xAxis) === null || _f === void 0 ? void 0 : _f.date), (_h = (_g = lineAreaOptions) === null || _g === void 0 ? void 0 : _g.plot) === null || _h === void 0 ? void 0 : _h.bands);\n      extend(state.plot, {\n        lines,\n        bands\n      });\n    },\n\n    addPlotLine({\n      state\n    }, {\n      data\n    }) {\n      var _a, _b, _c;\n\n      const lines = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.lines, _c !== null && _c !== void 0 ? _c : []);\n\n      if (!isExistPlotId(lines, data)) {\n        this.dispatch('updateOptions', {\n          options: {\n            plot: {\n              lines: [...lines, data]\n            }\n          }\n        });\n      }\n    },\n\n    addPlotBand({\n      state\n    }, {\n      data\n    }) {\n      var _a, _b, _c;\n\n      const bands = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.bands, _c !== null && _c !== void 0 ? _c : []);\n\n      if (!isExistPlotId(bands, data)) {\n        this.dispatch('updateOptions', {\n          options: {\n            plot: {\n              bands: [...bands, data]\n            }\n          }\n        });\n      }\n    },\n\n    removePlotLine({\n      state\n    }, {\n      id\n    }) {\n      var _a, _b, _c;\n\n      const lines = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.lines, _c !== null && _c !== void 0 ? _c : []).filter(({\n        id: lineId\n      }) => lineId !== id);\n      this.dispatch('updateOptions', {\n        options: {\n          plot: {\n            lines\n          }\n        }\n      });\n    },\n\n    removePlotBand({\n      state\n    }, {\n      id\n    }) {\n      var _a, _b, _c;\n\n      const bands = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.bands, _c !== null && _c !== void 0 ? _c : []).filter(({\n        id: bandId\n      }) => bandId !== id);\n      this.dispatch('updateOptions', {\n        options: {\n          plot: {\n            bands\n          }\n        }\n      });\n    }\n\n  },\n  observe: {\n    updatePlot() {\n      this.dispatch('setPlot');\n    }\n\n  }\n};\nexport default plot;","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/store/plot.js"],"names":["extend","rgba","isRangeValue","isString","isUndefined","getOverlappingRange","range","reduce","acc","rangeData","accStart","accEnd","start","end","Math","min","max","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getCategoryIndex","value","categories","findIndex","category","String","getValidValue","isDateType","Date","makePlotLines","plotLines","map","color","opacity","makePlotBands","plotBands","flatMap","mergeOverlappingRanges","bgColor","ranges","isExistPlotId","plots","data","some","id","bandId","plot","name","state","options","_a","_b","_c","visible","lines","bands","action","setPlot","_d","_e","_f","_g","_h","series","area","line","rawCategories","lineAreaOptions","xAxis","date","addPlotLine","dispatch","addPlotBand","removePlotLine","filter","lineId","removePlotBand","observe","updatePlot"],"mappings":"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","sourcesContent":["import { extend } from \"./store\";\nimport { rgba } from \"../helpers/color\";\nimport { isRangeValue } from \"../helpers/range\";\nimport { isString, isUndefined } from \"../helpers/utils\";\nfunction getOverlappingRange(range) {\n    return range.reduce((acc, rangeData) => {\n        const [accStart, accEnd] = acc;\n        const [start, end] = rangeData;\n        return [Math.min(accStart, start), Math.max(accEnd, end)];\n    }, [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]);\n}\nfunction getCategoryIndex(value, categories) {\n    return categories.findIndex((category) => category === String(value));\n}\nfunction getValidValue(value, categories, isDateType = false) {\n    if (isDateType) {\n        return Number(new Date(value));\n    }\n    if (isString(value)) {\n        return getCategoryIndex(value, categories);\n    }\n    return value;\n}\nfunction makePlotLines(categories, isDateType, plotLines = []) {\n    return plotLines.map(({ value, color, opacity }) => ({\n        value: getValidValue(value, categories, isDateType),\n        color: rgba(color, opacity),\n    }));\n}\nfunction makePlotBands(categories, isDateType, plotBands = []) {\n    return plotBands.flatMap(({ range, mergeOverlappingRanges = false, color: bgColor, opacity }) => {\n        const color = rgba(bgColor, opacity);\n        if (isRangeValue(range[0])) {\n            const ranges = range.map((rangeData) => rangeData.map((value) => getValidValue(value, categories, isDateType)));\n            if (mergeOverlappingRanges) {\n                return {\n                    color,\n                    range: getOverlappingRange(ranges),\n                };\n            }\n            return ranges.map((rangeData) => ({\n                range: rangeData,\n                color,\n            }));\n        }\n        return {\n            color,\n            range,\n        };\n    });\n}\nfunction isExistPlotId(plots, data) {\n    return plots.some(({ id: bandId }) => !isUndefined(bandId) && !isUndefined(data.id) && bandId === data.id);\n}\nconst plot = {\n    name: 'plot',\n    state: ({ options }) => {\n        var _a, _b, _c;\n        return ({\n            plot: {\n                visible: (_c = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.visible, (_c !== null && _c !== void 0 ? _c : true)),\n                lines: [],\n                bands: [],\n            },\n        });\n    },\n    action: {\n        setPlot({ state }) {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            const { series, options } = state;\n            if (!(series.area || series.line)) {\n                return;\n            }\n            const rawCategories = state.rawCategories;\n            const lineAreaOptions = options;\n            const lines = makePlotLines(rawCategories, !!((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.xAxis) === null || _b === void 0 ? void 0 : _b.date), (_d = (_c = lineAreaOptions) === null || _c === void 0 ? void 0 : _c.plot) === null || _d === void 0 ? void 0 : _d.lines);\n            const bands = makePlotBands(rawCategories, !!((_f = (_e = options) === null || _e === void 0 ? void 0 : _e.xAxis) === null || _f === void 0 ? void 0 : _f.date), (_h = (_g = lineAreaOptions) === null || _g === void 0 ? void 0 : _g.plot) === null || _h === void 0 ? void 0 : _h.bands);\n            extend(state.plot, { lines, bands });\n        },\n        addPlotLine({ state }, { data }) {\n            var _a, _b, _c;\n            const lines = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.lines, (_c !== null && _c !== void 0 ? _c : []));\n            if (!isExistPlotId(lines, data)) {\n                this.dispatch('updateOptions', { options: { plot: { lines: [...lines, data] } } });\n            }\n        },\n        addPlotBand({ state }, { data }) {\n            var _a, _b, _c;\n            const bands = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.bands, (_c !== null && _c !== void 0 ? _c : []));\n            if (!isExistPlotId(bands, data)) {\n                this.dispatch('updateOptions', { options: { plot: { bands: [...bands, data] } } });\n            }\n        },\n        removePlotLine({ state }, { id }) {\n            var _a, _b, _c;\n            const lines = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.lines, (_c !== null && _c !== void 0 ? _c : [])).filter(({ id: lineId }) => lineId !== id);\n            this.dispatch('updateOptions', { options: { plot: { lines } } });\n        },\n        removePlotBand({ state }, { id }) {\n            var _a, _b, _c;\n            const bands = (_c = (_b = (_a = state.options) === null || _a === void 0 ? void 0 : _a.plot) === null || _b === void 0 ? void 0 : _b.bands, (_c !== null && _c !== void 0 ? _c : [])).filter(({ id: bandId }) => bandId !== id);\n            this.dispatch('updateOptions', { options: { plot: { bands } } });\n        },\n    },\n    observe: {\n        updatePlot() {\n            this.dispatch('setPlot');\n        },\n    },\n};\nexport default plot;\n"]},"metadata":{},"sourceType":"module"}