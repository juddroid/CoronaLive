{"ast":null,"code":"import { makeStyleObj, fillStyle } from \"../helpers/style\";\nimport { calculateDegreeToRadian, getRadialPosition, DEGREE_360 } from \"../helpers/sector\";\nexport function sector(ctx, sectorModel) {\n  const {\n    degree: {\n      start,\n      end\n    },\n    color,\n    style,\n    lineWidth\n  } = sectorModel;\n\n  if (start === end) {\n    return;\n  }\n\n  const isCircle = Math.abs(start - end) === DEGREE_360;\n  ctx.beginPath();\n\n  if (style) {\n    const styleObj = makeStyleObj(style, {});\n    Object.keys(styleObj).forEach(key => {\n      ctx[key] = styleObj[key];\n    });\n  }\n\n  if (isCircle) {\n    drawCircle(ctx, sectorModel);\n  } else {\n    drawSector(ctx, sectorModel);\n  }\n\n  ctx.closePath();\n  fillStyle(ctx, color);\n\n  if (lineWidth) {\n    ctx.lineWidth = lineWidth;\n    ctx.stroke();\n  }\n}\n\nfunction drawSector(ctx, sectorModel) {\n  const {\n    x,\n    y,\n    radius: {\n      inner,\n      outer\n    },\n    degree: {\n      start,\n      end\n    },\n    clockwise,\n    drawingStartAngle\n  } = sectorModel;\n\n  if (inner < 0 || outer < 0) {\n    return;\n  }\n\n  const startRadian = calculateDegreeToRadian(start, drawingStartAngle);\n  const endRadian = calculateDegreeToRadian(end, drawingStartAngle);\n\n  if (!inner) {\n    ctx.moveTo(x, y);\n  }\n\n  ctx.arc(x, y, outer, startRadian, endRadian, !clockwise);\n\n  if (inner) {\n    ctx.arc(x, y, inner, endRadian, startRadian, clockwise);\n  }\n}\n\nfunction drawCircle(ctx, sectorModel) {\n  const {\n    x,\n    y,\n    radius: {\n      inner,\n      outer\n    },\n    clockwise\n  } = sectorModel;\n  ctx.arc(x, y, outer, 0, 2 * Math.PI, !clockwise);\n\n  if (inner) {\n    const {\n      x: innerStartPosX,\n      y: innerStartPosY\n    } = getRadialPosition(x, y, inner, 0);\n    const startX = inner ? innerStartPosX : x;\n    const startY = inner ? innerStartPosY : y;\n    ctx.moveTo(startX, startY);\n    ctx.arc(x, y, inner, 0, 2 * Math.PI, clockwise);\n  }\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/brushes/sector.js"],"names":["makeStyleObj","fillStyle","calculateDegreeToRadian","getRadialPosition","DEGREE_360","sector","ctx","sectorModel","degree","start","end","color","style","lineWidth","isCircle","Math","abs","beginPath","styleObj","Object","keys","forEach","key","drawCircle","drawSector","closePath","stroke","x","y","radius","inner","outer","clockwise","drawingStartAngle","startRadian","endRadian","moveTo","arc","PI","innerStartPosX","innerStartPosY","startX","startY"],"mappings":"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","sourcesContent":["import { makeStyleObj, fillStyle } from \"../helpers/style\";\nimport { calculateDegreeToRadian, getRadialPosition, DEGREE_360 } from \"../helpers/sector\";\nexport function sector(ctx, sectorModel) {\n    const { degree: { start, end }, color, style, lineWidth, } = sectorModel;\n    if (start === end) {\n        return;\n    }\n    const isCircle = Math.abs(start - end) === DEGREE_360;\n    ctx.beginPath();\n    if (style) {\n        const styleObj = makeStyleObj(style, {});\n        Object.keys(styleObj).forEach((key) => {\n            ctx[key] = styleObj[key];\n        });\n    }\n    if (isCircle) {\n        drawCircle(ctx, sectorModel);\n    }\n    else {\n        drawSector(ctx, sectorModel);\n    }\n    ctx.closePath();\n    fillStyle(ctx, color);\n    if (lineWidth) {\n        ctx.lineWidth = lineWidth;\n        ctx.stroke();\n    }\n}\nfunction drawSector(ctx, sectorModel) {\n    const { x, y, radius: { inner, outer }, degree: { start, end }, clockwise, drawingStartAngle, } = sectorModel;\n    if (inner < 0 || outer < 0) {\n        return;\n    }\n    const startRadian = calculateDegreeToRadian(start, drawingStartAngle);\n    const endRadian = calculateDegreeToRadian(end, drawingStartAngle);\n    if (!inner) {\n        ctx.moveTo(x, y);\n    }\n    ctx.arc(x, y, outer, startRadian, endRadian, !clockwise);\n    if (inner) {\n        ctx.arc(x, y, inner, endRadian, startRadian, clockwise);\n    }\n}\nfunction drawCircle(ctx, sectorModel) {\n    const { x, y, radius: { inner, outer }, clockwise, } = sectorModel;\n    ctx.arc(x, y, outer, 0, 2 * Math.PI, !clockwise);\n    if (inner) {\n        const { x: innerStartPosX, y: innerStartPosY } = getRadialPosition(x, y, inner, 0);\n        const startX = inner ? innerStartPosX : x;\n        const startY = inner ? innerStartPosY : y;\n        ctx.moveTo(startX, startY);\n        ctx.arc(x, y, inner, 0, 2 * Math.PI, clockwise);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}