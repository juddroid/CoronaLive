{"ast":null,"code":"import { line, circle, rect } from \"./basic\";\nimport { label } from \"./label\";\nimport { getRGBA } from \"../helpers/color\";\nimport { scatterSeries } from \"./scatterSeries\";\nimport { getTitleFontString } from \"../helpers/style\";\nimport { getTextHeight } from \"../helpers/calculator\";\nimport { padding } from \"../store/layout\";\nexport const LEGEND_ITEM_MARGIN_X = 40;\nexport const LEGEND_MARGIN_X = 5;\nexport const LEGEND_CHECKBOX_SIZE = 12;\nexport const LEGEND_ICON_SIZE = 12;\nconst ICON_BORDER_WIDTH = 1.5;\nconst INACTIVE_OPACITY = 0.3;\nconst RECT_SIZE = 10;\nconst LINE_ICON_PADDING = 2;\nconst CIRCLE_ICON_RADIUS = 6;\nexport function getLegendItemHeight(fontSize) {\n  return fontSize + padding.Y;\n}\n\nfunction drawLineIcon(ctx, x, y, color) {\n  const xCurveOffset = [2, 2, 6, 6, 10, 10];\n  const yCurveOffset = [8, 0, 0, 8, 8, 0];\n  xCurveOffset.forEach((xOffset, idx) => {\n    if (idx === 5) {\n      return;\n    }\n\n    line(ctx, {\n      type: 'line',\n      x: x + xOffset,\n      y: y + yCurveOffset[idx],\n      x2: x + xCurveOffset[idx + 1],\n      y2: y + yCurveOffset[idx + 1],\n      lineWidth: 2,\n      strokeStyle: color\n    });\n  });\n}\n\nfunction drawCheckIcon(ctx, x, y, active) {\n  const color = '#555555';\n  const strokeStyle = active ? color : getRGBA(color, INACTIVE_OPACITY);\n  line(ctx, {\n    type: 'line',\n    x: x + 2,\n    y: y + 5,\n    x2: x + 5,\n    y2: y + 8,\n    strokeStyle,\n    lineWidth: 2\n  });\n  line(ctx, {\n    type: 'line',\n    x: x + 5,\n    y: y + 9,\n    x2: x + 10,\n    y2: y + 3,\n    strokeStyle,\n    lineWidth: 2\n  });\n}\n\nfunction drawCheckbox(ctx, x, y, renderOptions) {\n  const {\n    active,\n    checked\n  } = renderOptions;\n  const borderColor = active ? '#bbb' : getRGBA('#bbbbbb', INACTIVE_OPACITY);\n  rect(ctx, {\n    type: 'rect',\n    x,\n    y,\n    width: LEGEND_CHECKBOX_SIZE,\n    height: LEGEND_CHECKBOX_SIZE,\n    color: '#fff',\n    borderColor,\n    thickness: 1\n  });\n\n  if (checked) {\n    drawCheckIcon(ctx, x, y, active);\n  }\n}\n\nfunction drawIcon(ctx, x, y, renderOptions) {\n  const {\n    iconType,\n    active,\n    color,\n    showCheckbox\n  } = renderOptions;\n  const iconX = x + (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0);\n  const iconColor = active ? color : getRGBA(color, INACTIVE_OPACITY);\n\n  if (iconType === 'rect') {\n    rect(ctx, {\n      type: 'rect',\n      x: iconX,\n      y: y + (LEGEND_CHECKBOX_SIZE - RECT_SIZE) / 2,\n      width: RECT_SIZE,\n      height: RECT_SIZE,\n      color: iconColor\n    });\n  } else if (iconType === 'line') {\n    drawLineIcon(ctx, iconX, y + LINE_ICON_PADDING, iconColor);\n  } else if (iconType === 'circle') {\n    circle(ctx, {\n      type: 'circle',\n      x: iconX + CIRCLE_ICON_RADIUS,\n      y: y + CIRCLE_ICON_RADIUS,\n      radius: CIRCLE_ICON_RADIUS,\n      color: iconColor,\n      style: ['default']\n    });\n  }\n}\n\nfunction drawScatterIcon(ctx, x, y, renderOptions) {\n  const {\n    iconType,\n    active,\n    color,\n    showCheckbox\n  } = renderOptions;\n  const iconX = x + (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0);\n  const iconColor = active ? color : getRGBA(color, INACTIVE_OPACITY);\n  scatterSeries(ctx, {\n    type: 'scatterSeries',\n    iconType: iconType,\n    x: iconX + CIRCLE_ICON_RADIUS,\n    y: y + CIRCLE_ICON_RADIUS,\n    borderColor: iconColor,\n    size: CIRCLE_ICON_RADIUS * 2,\n    fillColor: 'rgba(255, 255, 255, 0)',\n    borderWidth: ICON_BORDER_WIDTH\n  });\n}\n\nfunction drawLabel(ctx, x, y, text, renderOptions) {\n  const {\n    active,\n    showCheckbox,\n    font,\n    fontColor\n  } = renderOptions;\n  const fillStyle = active ? fontColor : getRGBA(fontColor, INACTIVE_OPACITY);\n  label(ctx, {\n    type: 'label',\n    x: x + LEGEND_ICON_SIZE + LEGEND_MARGIN_X + (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0),\n    y,\n    text,\n    style: ['default', {\n      font,\n      textBaseline: 'top',\n      fillStyle\n    }]\n  });\n}\n\nexport function legend(ctx, model) {\n  const {\n    data,\n    showCheckbox,\n    align,\n    fontSize,\n    fontFamily,\n    fontWeight\n  } = model;\n  const font = getTitleFontString({\n    fontSize,\n    fontFamily,\n    fontWeight\n  });\n  const fontColor = model.color;\n  data.forEach(datum => {\n    const {\n      x,\n      y,\n      checked,\n      active,\n      color,\n      iconType,\n      useScatterChartIcon,\n      viewLabel: legendLabel\n    } = datum;\n    const iconY = y - 1 + (getTextHeight(legendLabel, font) - 11) / 4;\n    const renderOptions = {\n      iconType,\n      checked,\n      active,\n      color,\n      showCheckbox,\n      align,\n      font,\n      fontColor\n    };\n\n    if (showCheckbox) {\n      drawCheckbox(ctx, x, iconY, renderOptions);\n    }\n\n    if (useScatterChartIcon && iconType !== 'line') {\n      drawScatterIcon(ctx, x, iconY, renderOptions);\n    } else {\n      drawIcon(ctx, x, iconY, renderOptions);\n    }\n\n    drawLabel(ctx, x, y, legendLabel, renderOptions);\n  });\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/brushes/legend.js"],"names":["line","circle","rect","label","getRGBA","scatterSeries","getTitleFontString","getTextHeight","padding","LEGEND_ITEM_MARGIN_X","LEGEND_MARGIN_X","LEGEND_CHECKBOX_SIZE","LEGEND_ICON_SIZE","ICON_BORDER_WIDTH","INACTIVE_OPACITY","RECT_SIZE","LINE_ICON_PADDING","CIRCLE_ICON_RADIUS","getLegendItemHeight","fontSize","Y","drawLineIcon","ctx","x","y","color","xCurveOffset","yCurveOffset","forEach","xOffset","idx","type","x2","y2","lineWidth","strokeStyle","drawCheckIcon","active","drawCheckbox","renderOptions","checked","borderColor","width","height","thickness","drawIcon","iconType","showCheckbox","iconX","iconColor","radius","style","drawScatterIcon","size","fillColor","borderWidth","drawLabel","text","font","fontColor","fillStyle","textBaseline","legend","model","data","align","fontFamily","fontWeight","datum","useScatterChartIcon","viewLabel","legendLabel","iconY"],"mappings":"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","sourcesContent":["import { line, circle, rect } from \"./basic\";\nimport { label } from \"./label\";\nimport { getRGBA } from \"../helpers/color\";\nimport { scatterSeries } from \"./scatterSeries\";\nimport { getTitleFontString } from \"../helpers/style\";\nimport { getTextHeight } from \"../helpers/calculator\";\nimport { padding } from \"../store/layout\";\nexport const LEGEND_ITEM_MARGIN_X = 40;\nexport const LEGEND_MARGIN_X = 5;\nexport const LEGEND_CHECKBOX_SIZE = 12;\nexport const LEGEND_ICON_SIZE = 12;\nconst ICON_BORDER_WIDTH = 1.5;\nconst INACTIVE_OPACITY = 0.3;\nconst RECT_SIZE = 10;\nconst LINE_ICON_PADDING = 2;\nconst CIRCLE_ICON_RADIUS = 6;\nexport function getLegendItemHeight(fontSize) {\n    return fontSize + padding.Y;\n}\nfunction drawLineIcon(ctx, x, y, color) {\n    const xCurveOffset = [2, 2, 6, 6, 10, 10];\n    const yCurveOffset = [8, 0, 0, 8, 8, 0];\n    xCurveOffset.forEach((xOffset, idx) => {\n        if (idx === 5) {\n            return;\n        }\n        line(ctx, {\n            type: 'line',\n            x: x + xOffset,\n            y: y + yCurveOffset[idx],\n            x2: x + xCurveOffset[idx + 1],\n            y2: y + yCurveOffset[idx + 1],\n            lineWidth: 2,\n            strokeStyle: color,\n        });\n    });\n}\nfunction drawCheckIcon(ctx, x, y, active) {\n    const color = '#555555';\n    const strokeStyle = active ? color : getRGBA(color, INACTIVE_OPACITY);\n    line(ctx, {\n        type: 'line',\n        x: x + 2,\n        y: y + 5,\n        x2: x + 5,\n        y2: y + 8,\n        strokeStyle,\n        lineWidth: 2,\n    });\n    line(ctx, {\n        type: 'line',\n        x: x + 5,\n        y: y + 9,\n        x2: x + 10,\n        y2: y + 3,\n        strokeStyle,\n        lineWidth: 2,\n    });\n}\nfunction drawCheckbox(ctx, x, y, renderOptions) {\n    const { active, checked } = renderOptions;\n    const borderColor = active ? '#bbb' : getRGBA('#bbbbbb', INACTIVE_OPACITY);\n    rect(ctx, {\n        type: 'rect',\n        x,\n        y,\n        width: LEGEND_CHECKBOX_SIZE,\n        height: LEGEND_CHECKBOX_SIZE,\n        color: '#fff',\n        borderColor,\n        thickness: 1,\n    });\n    if (checked) {\n        drawCheckIcon(ctx, x, y, active);\n    }\n}\nfunction drawIcon(ctx, x, y, renderOptions) {\n    const { iconType, active, color, showCheckbox } = renderOptions;\n    const iconX = x + (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0);\n    const iconColor = active ? color : getRGBA(color, INACTIVE_OPACITY);\n    if (iconType === 'rect') {\n        rect(ctx, {\n            type: 'rect',\n            x: iconX,\n            y: y + (LEGEND_CHECKBOX_SIZE - RECT_SIZE) / 2,\n            width: RECT_SIZE,\n            height: RECT_SIZE,\n            color: iconColor,\n        });\n    }\n    else if (iconType === 'line') {\n        drawLineIcon(ctx, iconX, y + LINE_ICON_PADDING, iconColor);\n    }\n    else if (iconType === 'circle') {\n        circle(ctx, {\n            type: 'circle',\n            x: iconX + CIRCLE_ICON_RADIUS,\n            y: y + CIRCLE_ICON_RADIUS,\n            radius: CIRCLE_ICON_RADIUS,\n            color: iconColor,\n            style: ['default'],\n        });\n    }\n}\nfunction drawScatterIcon(ctx, x, y, renderOptions) {\n    const { iconType, active, color, showCheckbox } = renderOptions;\n    const iconX = x + (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0);\n    const iconColor = active ? color : getRGBA(color, INACTIVE_OPACITY);\n    scatterSeries(ctx, {\n        type: 'scatterSeries',\n        iconType: iconType,\n        x: iconX + CIRCLE_ICON_RADIUS,\n        y: y + CIRCLE_ICON_RADIUS,\n        borderColor: iconColor,\n        size: CIRCLE_ICON_RADIUS * 2,\n        fillColor: 'rgba(255, 255, 255, 0)',\n        borderWidth: ICON_BORDER_WIDTH,\n    });\n}\nfunction drawLabel(ctx, x, y, text, renderOptions) {\n    const { active, showCheckbox, font, fontColor } = renderOptions;\n    const fillStyle = active ? fontColor : getRGBA(fontColor, INACTIVE_OPACITY);\n    label(ctx, {\n        type: 'label',\n        x: x +\n            LEGEND_ICON_SIZE +\n            LEGEND_MARGIN_X +\n            (showCheckbox ? LEGEND_CHECKBOX_SIZE + LEGEND_MARGIN_X : 0),\n        y,\n        text,\n        style: ['default', { font, textBaseline: 'top', fillStyle }],\n    });\n}\nexport function legend(ctx, model) {\n    const { data, showCheckbox, align, fontSize, fontFamily, fontWeight } = model;\n    const font = getTitleFontString({ fontSize, fontFamily, fontWeight });\n    const fontColor = model.color;\n    data.forEach((datum) => {\n        const { x, y, checked, active, color, iconType, useScatterChartIcon, viewLabel: legendLabel, } = datum;\n        const iconY = y - 1 + (getTextHeight(legendLabel, font) - 11) / 4;\n        const renderOptions = {\n            iconType,\n            checked,\n            active,\n            color,\n            showCheckbox,\n            align,\n            font,\n            fontColor,\n        };\n        if (showCheckbox) {\n            drawCheckbox(ctx, x, iconY, renderOptions);\n        }\n        if (useScatterChartIcon && iconType !== 'line') {\n            drawScatterIcon(ctx, x, iconY, renderOptions);\n        }\n        else {\n            drawIcon(ctx, x, iconY, renderOptions);\n        }\n        drawLabel(ctx, x, y, legendLabel, renderOptions);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}