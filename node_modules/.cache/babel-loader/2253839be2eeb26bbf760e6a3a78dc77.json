{"ast":null,"code":"import { getFirstValidValue, isNumber, isObject, last } from \"./utils\";\nexport function getCoordinateYValue(datum) {\n  if (isNumber(datum)) {\n    return datum;\n  }\n\n  return Array.isArray(datum) ? datum[1] : datum.y;\n}\nexport function getCoordinateXValue(datum) {\n  return Array.isArray(datum) ? datum[0] : datum.x;\n}\nexport function isValueAfterLastCategory(value, categories) {\n  const category = last(categories);\n\n  if (!category) {\n    return false;\n  }\n\n  return isNumber(value) ? value >= Number(category) : new Date(value) >= new Date(category);\n}\nexport function getCoordinateDataIndex(datum, categories, dataIndex, startIndex) {\n  if (isNumber(datum)) {\n    return dataIndex - startIndex;\n  }\n\n  const value = getCoordinateXValue(datum);\n  let index = categories.findIndex(category => category === String(value));\n\n  if (index === -1 && isValueAfterLastCategory(value, categories)) {\n    index = categories.length;\n  }\n\n  return index;\n}\n\nfunction isLineCoordinateSeries(series) {\n  var _a;\n\n  if (!series.line) {\n    return false;\n  }\n\n  const firstData = getFirstValidValue((_a = series.line[0]) === null || _a === void 0 ? void 0 : _a.data);\n  return firstData && (Array.isArray(firstData) || isObject(firstData));\n}\n\nexport function isCoordinateSeries(series) {\n  return isLineCoordinateSeries(series) || !!series.scatter || !!series.bubble;\n}\nexport function isModelExistingInRect(rect, point) {\n  const {\n    height,\n    width\n  } = rect;\n  const {\n    x,\n    y\n  } = point;\n  return x >= 0 && x <= width && y >= 0 && y <= height;\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/helpers/coordinate.js"],"names":["getFirstValidValue","isNumber","isObject","last","getCoordinateYValue","datum","Array","isArray","y","getCoordinateXValue","x","isValueAfterLastCategory","value","categories","category","Number","Date","getCoordinateDataIndex","dataIndex","startIndex","index","findIndex","String","length","isLineCoordinateSeries","series","_a","line","firstData","data","isCoordinateSeries","scatter","bubble","isModelExistingInRect","rect","point","height","width"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,QAA7B,EAAuCC,QAAvC,EAAiDC,IAAjD,QAA6D,SAA7D;AACA,OAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AACvC,MAAIJ,QAAQ,CAACI,KAAD,CAAZ,EAAqB;AACjB,WAAOA,KAAP;AACH;;AACD,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuBA,KAAK,CAAC,CAAD,CAA5B,GAAkCA,KAAK,CAACG,CAA/C;AACH;AACD,OAAO,SAASC,mBAAT,CAA6BJ,KAA7B,EAAoC;AACvC,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuBA,KAAK,CAAC,CAAD,CAA5B,GAAkCA,KAAK,CAACK,CAA/C;AACH;AACD,OAAO,SAASC,wBAAT,CAAkCC,KAAlC,EAAyCC,UAAzC,EAAqD;AACxD,QAAMC,QAAQ,GAAGX,IAAI,CAACU,UAAD,CAArB;;AACA,MAAI,CAACC,QAAL,EAAe;AACX,WAAO,KAAP;AACH;;AACD,SAAOb,QAAQ,CAACW,KAAD,CAAR,GAAkBA,KAAK,IAAIG,MAAM,CAACD,QAAD,CAAjC,GAA8C,IAAIE,IAAJ,CAASJ,KAAT,KAAmB,IAAII,IAAJ,CAASF,QAAT,CAAxE;AACH;AACD,OAAO,SAASG,sBAAT,CAAgCZ,KAAhC,EAAuCQ,UAAvC,EAAmDK,SAAnD,EAA8DC,UAA9D,EAA0E;AAC7E,MAAIlB,QAAQ,CAACI,KAAD,CAAZ,EAAqB;AACjB,WAAOa,SAAS,GAAGC,UAAnB;AACH;;AACD,QAAMP,KAAK,GAAGH,mBAAmB,CAACJ,KAAD,CAAjC;AACA,MAAIe,KAAK,GAAGP,UAAU,CAACQ,SAAX,CAAsBP,QAAD,IAAcA,QAAQ,KAAKQ,MAAM,CAACV,KAAD,CAAtD,CAAZ;;AACA,MAAIQ,KAAK,KAAK,CAAC,CAAX,IAAgBT,wBAAwB,CAACC,KAAD,EAAQC,UAAR,CAA5C,EAAiE;AAC7DO,IAAAA,KAAK,GAAGP,UAAU,CAACU,MAAnB;AACH;;AACD,SAAOH,KAAP;AACH;;AACD,SAASI,sBAAT,CAAgCC,MAAhC,EAAwC;AACpC,MAAIC,EAAJ;;AACA,MAAI,CAACD,MAAM,CAACE,IAAZ,EAAkB;AACd,WAAO,KAAP;AACH;;AACD,QAAMC,SAAS,GAAG5B,kBAAkB,CAAC,CAAC0B,EAAE,GAAGD,MAAM,CAACE,IAAP,CAAY,CAAZ,CAAN,MAA0B,IAA1B,IAAkCD,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACG,IAA/D,CAApC;AACA,SAAOD,SAAS,KAAKtB,KAAK,CAACC,OAAN,CAAcqB,SAAd,KAA4B1B,QAAQ,CAAC0B,SAAD,CAAzC,CAAhB;AACH;;AACD,OAAO,SAASE,kBAAT,CAA4BL,MAA5B,EAAoC;AACvC,SAAOD,sBAAsB,CAACC,MAAD,CAAtB,IAAkC,CAAC,CAACA,MAAM,CAACM,OAA3C,IAAsD,CAAC,CAACN,MAAM,CAACO,MAAtE;AACH;AACD,OAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqCC,KAArC,EAA4C;AAC/C,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,IAA1B;AACA,QAAM;AAAExB,IAAAA,CAAF;AAAKF,IAAAA;AAAL,MAAW2B,KAAjB;AACA,SAAOzB,CAAC,IAAI,CAAL,IAAUA,CAAC,IAAI2B,KAAf,IAAwB7B,CAAC,IAAI,CAA7B,IAAkCA,CAAC,IAAI4B,MAA9C;AACH","sourcesContent":["import { getFirstValidValue, isNumber, isObject, last } from \"./utils\";\nexport function getCoordinateYValue(datum) {\n    if (isNumber(datum)) {\n        return datum;\n    }\n    return Array.isArray(datum) ? datum[1] : datum.y;\n}\nexport function getCoordinateXValue(datum) {\n    return Array.isArray(datum) ? datum[0] : datum.x;\n}\nexport function isValueAfterLastCategory(value, categories) {\n    const category = last(categories);\n    if (!category) {\n        return false;\n    }\n    return isNumber(value) ? value >= Number(category) : new Date(value) >= new Date(category);\n}\nexport function getCoordinateDataIndex(datum, categories, dataIndex, startIndex) {\n    if (isNumber(datum)) {\n        return dataIndex - startIndex;\n    }\n    const value = getCoordinateXValue(datum);\n    let index = categories.findIndex((category) => category === String(value));\n    if (index === -1 && isValueAfterLastCategory(value, categories)) {\n        index = categories.length;\n    }\n    return index;\n}\nfunction isLineCoordinateSeries(series) {\n    var _a;\n    if (!series.line) {\n        return false;\n    }\n    const firstData = getFirstValidValue((_a = series.line[0]) === null || _a === void 0 ? void 0 : _a.data);\n    return firstData && (Array.isArray(firstData) || isObject(firstData));\n}\nexport function isCoordinateSeries(series) {\n    return isLineCoordinateSeries(series) || !!series.scatter || !!series.bubble;\n}\nexport function isModelExistingInRect(rect, point) {\n    const { height, width } = rect;\n    const { x, y } = point;\n    return x >= 0 && x <= width && y >= 0 && y <= height;\n}\n"]},"metadata":{},"sourceType":"module"}