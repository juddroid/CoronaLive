{"ast":null,"code":"import Component from \"./component\";\nimport { range } from \"../helpers/utils\";\nimport { isVerticalAlign } from \"../store/layout\";\nexport default class SpectrumLegend extends Component {\n  constructor() {\n    super(...arguments);\n    this.labels = [];\n\n    this.renderSpectrumTooltip = ([responderData]) => {\n      if (responderData) {\n        const {\n          labels,\n          align\n        } = this;\n        const {\n          colorValue,\n          color\n        } = responderData;\n        const {\n          width,\n          height\n        } = this.rect;\n        this.models.tooltip = [{\n          type: 'spectrumTooltip',\n          width,\n          height,\n          x: 0,\n          y: 0,\n          labels,\n          align,\n          colorRatio: responderData.colorRatio,\n          color,\n          text: String(colorValue),\n          verticalAlign: isVerticalAlign(align)\n        }];\n      } else {\n        this.models.tooltip = [];\n      }\n    };\n  }\n\n  initialize() {\n    this.type = 'spectrumLegend';\n    this.name = 'spectrumLegend';\n  }\n\n  makeLabels(scale) {\n    const {\n      stepCount,\n      limit,\n      stepSize\n    } = scale;\n    const minValue = limit.min;\n    return range(0, stepCount + 1).reduce((labels, value) => {\n      return [...labels, String(minValue + stepSize * value)];\n    }, []);\n  }\n\n  renderSpectrumLegendModel(startColor, endColor) {\n    const {\n      labels,\n      align\n    } = this;\n    const {\n      width,\n      height\n    } = this.rect;\n    return [{\n      type: 'spectrumLegend',\n      width,\n      height,\n      x: 0,\n      y: 0,\n      labels,\n      align,\n      startColor,\n      endColor,\n      verticalAlign: isVerticalAlign(this.align)\n    }];\n  }\n\n  render({\n    layout,\n    legend,\n    colorValueScale,\n    theme\n  }) {\n    var _a, _b;\n\n    this.rect = layout.legend;\n    this.align = legend.align;\n    this.isShow = legend.visible && !!legend.data.length;\n\n    if (!this.isShow) {\n      return;\n    }\n\n    this.labels = this.makeLabels(colorValueScale);\n    const {\n      startColor,\n      endColor\n    } = ((_a = theme.series) === null || _a === void 0 ? void 0 : _a.heatmap) || ((_b = theme.series) === null || _b === void 0 ? void 0 : _b.treemap);\n    this.models = {\n      legend: this.renderSpectrumLegendModel(startColor, endColor),\n      tooltip: []\n    };\n    this.eventBus.on('renderSpectrumTooltip', this.renderSpectrumTooltip);\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/component/spectrumLegend.js"],"names":["Component","range","isVerticalAlign","SpectrumLegend","constructor","arguments","labels","renderSpectrumTooltip","responderData","align","colorValue","color","width","height","rect","models","tooltip","type","x","y","colorRatio","text","String","verticalAlign","initialize","name","makeLabels","scale","stepCount","limit","stepSize","minValue","min","reduce","value","renderSpectrumLegendModel","startColor","endColor","render","layout","legend","colorValueScale","theme","_a","_b","isShow","visible","data","length","series","heatmap","treemap","eventBus","on"],"mappings":"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","sourcesContent":["import Component from \"./component\";\nimport { range } from \"../helpers/utils\";\nimport { isVerticalAlign } from \"../store/layout\";\nexport default class SpectrumLegend extends Component {\n    constructor() {\n        super(...arguments);\n        this.labels = [];\n        this.renderSpectrumTooltip = ([responderData]) => {\n            if (responderData) {\n                const { labels, align } = this;\n                const { colorValue, color } = responderData;\n                const { width, height } = this.rect;\n                this.models.tooltip = [\n                    {\n                        type: 'spectrumTooltip',\n                        width,\n                        height,\n                        x: 0,\n                        y: 0,\n                        labels,\n                        align,\n                        colorRatio: responderData.colorRatio,\n                        color,\n                        text: String(colorValue),\n                        verticalAlign: isVerticalAlign(align),\n                    },\n                ];\n            }\n            else {\n                this.models.tooltip = [];\n            }\n        };\n    }\n    initialize() {\n        this.type = 'spectrumLegend';\n        this.name = 'spectrumLegend';\n    }\n    makeLabels(scale) {\n        const { stepCount, limit, stepSize } = scale;\n        const minValue = limit.min;\n        return range(0, stepCount + 1).reduce((labels, value) => {\n            return [...labels, String(minValue + stepSize * value)];\n        }, []);\n    }\n    renderSpectrumLegendModel(startColor, endColor) {\n        const { labels, align } = this;\n        const { width, height } = this.rect;\n        return [\n            {\n                type: 'spectrumLegend',\n                width,\n                height,\n                x: 0,\n                y: 0,\n                labels,\n                align,\n                startColor,\n                endColor,\n                verticalAlign: isVerticalAlign(this.align),\n            },\n        ];\n    }\n    render({ layout, legend, colorValueScale, theme }) {\n        var _a, _b;\n        this.rect = layout.legend;\n        this.align = legend.align;\n        this.isShow = legend.visible && !!legend.data.length;\n        if (!this.isShow) {\n            return;\n        }\n        this.labels = this.makeLabels(colorValueScale);\n        const { startColor, endColor } = ((_a = theme.series) === null || _a === void 0 ? void 0 : _a.heatmap) || ((_b = theme.series) === null || _b === void 0 ? void 0 : _b.treemap);\n        this.models = { legend: this.renderSpectrumLegendModel(startColor, endColor), tooltip: [] };\n        this.eventBus.on('renderSpectrumTooltip', this.renderSpectrumTooltip);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}