{"ast":null,"code":"import Chart from \"./chart\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport dataRange from \"../store/dataRange\";\nimport plot from \"../store/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Plot from \"../component/plot\";\nimport BubbleSeries from \"../component/bubbleSeries\";\nimport Axis from \"../component/axis\";\nimport CircleLegend from \"../component/circleLegend\";\nimport Legend from \"../component/legend\";\nimport Title from \"../component/title\";\nimport AxisTitle from \"../component/axisTitle\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as circleLegendBrush from \"../brushes/circleLegend\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\n/**\n * @class\n * @classdesc Bubble Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Bubble Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {Array<Object>} props.data.series.data - Series data. Coordinates x, y values, radius r, and label values are required.\n *   @param {Object} [props.options] - Options for making Bubble Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object} [props.options.yAxis]\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.circleLegend]\n *       @param {boolean} [props.options.circleLegend.visible] - Whether to show circle legend.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bubble Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\nexport default class BubbleChart extends Chart {\n  constructor(props) {\n    super({\n      el: props.el,\n      options: props.options,\n      series: {\n        bubble: props.data.series\n      },\n      modules: [dataRange, scale, axes, plot]\n    });\n    /**\n     * Add data.\n     * @param {Array<Object>} data - Array of data to be added.\n     * @api\n     * @example\n     * chart.addData([\n     *   {x: 10, y: 20, r: 10, label: 'label1'},\n     *   {x: 30, y: 40, r: 10, label: 'label2'},\n     * ]);\n     */\n\n    this.addData = data => {\n      this.animationControlFlag.updating = true;\n      this.resetSeries();\n      this.store.dispatch('addData', {\n        data\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options.\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   xAxis: {\n     *     title: 'Month',\n     *     date: { format: 'yy/MM' },\n     *   },\n     *   yAxis: {\n     *     title: 'Energy (kWh)',\n     *   },\n     *   series: {\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options.\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n     *      @param {number} seriesInfo.seriesIndex - Index of series.\n     *      @param {number} seriesInfo.index - Index of data within series.\n     * @api\n     * @example\n     * chart.showTooltip({index: 1, seriesIndex: 2});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), {\n        state: this.store.state\n      }));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(Plot);\n    this.componentManager.add(Legend);\n    this.componentManager.add(BubbleSeries);\n    this.componentManager.add(Axis, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(CircleLegend);\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, axisBrush, circleLegendBrush, legendBrush, labelBrush, exportMenuBrush]);\n  }\n  /**\n   * Add series.\n   * @param {Object} data - Data to be added.\n   *   @param {string} data.name - Series name.\n   *   @param {Array<Object>} data.data - Array of data to be added.\n   * @api\n   * @example\n   * chart.addSeries({\n   *   name: 'newSeries',\n   *   data: [\n   *     {x: 10, y: 20, r: 10, label: 'label1'},\n   *     {x: 30, y: 40, r: 10, label: 'label2'},\n   *   ],\n   * });\n   */\n\n\n  addSeries(data) {\n    this.resetSeries();\n    this.store.dispatch('addSeries', {\n      data\n    });\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set.\n   * @api\n   * @example\n   * chart.setData({\n   *   series: [\n   *     {\n   *       name: 'name'\n   *       data: [\n   *         {x: 10, y: 20, r: 10, label: 'label1'},\n   *         {x: 30, y: 40, r: 10, label: 'label2'},\n   *       ]\n   *     }\n   *   ]\n   * });\n   */\n\n\n  setData(data) {\n    this.resetSeries();\n    this.store.dispatch('setData', {\n      series: {\n        bubble: data.series\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/bubbleChart.js"],"names":["Chart","scale","axes","dataRange","plot","Tooltip","Plot","BubbleSeries","Axis","CircleLegend","Legend","Title","AxisTitle","ExportMenu","HoveredSeries","SelectedSeries","Background","NoDataText","basicBrush","axisBrush","circleLegendBrush","legendBrush","labelBrush","exportMenuBrush","BubbleChart","constructor","props","el","options","series","bubble","data","modules","addData","animationControlFlag","updating","resetSeries","store","dispatch","setOptions","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","Object","assign","state","hideTooltip","initialize","componentManager","add","name","chartEl","painter","addGroups","addSeries","setData"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport dataRange from \"../store/dataRange\";\nimport plot from \"../store/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Plot from \"../component/plot\";\nimport BubbleSeries from \"../component/bubbleSeries\";\nimport Axis from \"../component/axis\";\nimport CircleLegend from \"../component/circleLegend\";\nimport Legend from \"../component/legend\";\nimport Title from \"../component/title\";\nimport AxisTitle from \"../component/axisTitle\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as circleLegendBrush from \"../brushes/circleLegend\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\n/**\n * @class\n * @classdesc Bubble Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Bubble Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {Array<Object>} props.data.series.data - Series data. Coordinates x, y values, radius r, and label values are required.\n *   @param {Object} [props.options] - Options for making Bubble Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object} [props.options.yAxis]\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.circleLegend]\n *       @param {boolean} [props.options.circleLegend.visible] - Whether to show circle legend.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Bubble Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class BubbleChart extends Chart {\n    constructor(props) {\n        super({\n            el: props.el,\n            options: props.options,\n            series: {\n                bubble: props.data.series,\n            },\n            modules: [dataRange, scale, axes, plot],\n        });\n        /**\n         * Add data.\n         * @param {Array<Object>} data - Array of data to be added.\n         * @api\n         * @example\n         * chart.addData([\n         *   {x: 10, y: 20, r: 10, label: 'label1'},\n         *   {x: 30, y: 40, r: 10, label: 'label2'},\n         * ]);\n         */\n        this.addData = (data) => {\n            this.animationControlFlag.updating = true;\n            this.resetSeries();\n            this.store.dispatch('addData', { data });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options.\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   xAxis: {\n         *     title: 'Month',\n         *     date: { format: 'yy/MM' },\n         *   },\n         *   yAxis: {\n         *     title: 'Energy (kWh)',\n         *   },\n         *   series: {\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options.\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n         *      @param {number} seriesInfo.seriesIndex - Index of series.\n         *      @param {number} seriesInfo.index - Index of data within series.\n         * @api\n         * @example\n         * chart.showTooltip({index: 1, seriesIndex: 2});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(Plot);\n        this.componentManager.add(Legend);\n        this.componentManager.add(BubbleSeries);\n        this.componentManager.add(Axis, { name: 'xAxis' });\n        this.componentManager.add(Axis, { name: 'yAxis' });\n        this.componentManager.add(AxisTitle, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'yAxis' });\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(CircleLegend);\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            axisBrush,\n            circleLegendBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n        ]);\n    }\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     *   @param {string} data.name - Series name.\n     *   @param {Array<Object>} data.data - Array of data to be added.\n     * @api\n     * @example\n     * chart.addSeries({\n     *   name: 'newSeries',\n     *   data: [\n     *     {x: 10, y: 20, r: 10, label: 'label1'},\n     *     {x: 30, y: 40, r: 10, label: 'label2'},\n     *   ],\n     * });\n     */\n    addSeries(data) {\n        this.resetSeries();\n        this.store.dispatch('addSeries', { data });\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set.\n     * @api\n     * @example\n     * chart.setData({\n     *   series: [\n     *     {\n     *       name: 'name'\n     *       data: [\n     *         {x: 10, y: 20, r: 10, label: 'label1'},\n     *         {x: 30, y: 40, r: 10, label: 'label2'},\n     *       ]\n     *     }\n     *   ]\n     * });\n     */\n    setData(data) {\n        this.resetSeries();\n        this.store.dispatch('setData', { series: { bubble: data.series } });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}