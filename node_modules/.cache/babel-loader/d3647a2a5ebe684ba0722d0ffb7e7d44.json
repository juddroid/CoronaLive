{"ast":null,"code":"import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport plot from \"../store/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Plot from \"../component/plot\";\nimport LineSeries from \"../component/lineSeries\";\nimport ScatterSeries from \"../component/scatterSeries\";\nimport Axis from \"../component/axis\";\nimport Legend from \"../component/legend\";\nimport DataLabels from \"../component/dataLabels\";\nimport AxisTitle from \"../component/axisTitle\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport Zoom from \"../component/zoom\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as lineSeriesBrush from \"../brushes/lineSeries\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as resetButtonBrush from \"../brushes/resetButton\";\nimport * as scatterSeriesBrush from \"../brushes/scatterSeries\";\n/**\n * @class\n * @classdesc LineScatter Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making LineArea Chart.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {Array<Object>} props.data.series.line - Line series data. Only coordinate type data is possible.\n *       @param {Array<Object>} props.data.series.scatter - Scatter series data.\n *   @param {Object} [props.options] - Options for making LineScatter Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series] - Write common options in the upper depth and separate options to be applied to each chart.\n *       @param {Object} [props.options.series.line] - Options to be applied to the line chart. 'spline', 'showDot' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Line Chart guide} on github.\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|LineScatter Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme. Each theme to be applied to the two charts should be written separately.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\nexport default class LineScatterChart extends Chart {\n  constructor(props) {\n    super({\n      el: props.el,\n      options: props.options,\n      series: props.data.series,\n      modules: [dataRange, scale, axes, plot]\n    });\n    /**\n     * Add data.\n     * @param {Array} data - Array of data to be added.\n     * @param {string} chartType - Which type of chart to add.\n     * @api\n     * @example\n     * chart.addData([{x: 10, y: 20}, {x: 30, y: 40}], 'line');\n     */\n\n    this.addData = (data, chartType) => {\n      this.animationControlFlag.updating = true;\n      this.resetSeries();\n      this.store.dispatch('addData', {\n        data,\n        chartType\n      });\n    };\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     *   @param {string} data.name - Series name.\n     *   @param {Array<Object>} data.data - Array of data to be added.\n     * @param {Object} dataInfo - Which type of chart to add.\n     *   @param {Object} dataInfo.chartType - Chart type.\n     * @api\n     * @example\n     * chart.addSeries(\n     *   {\n     *     name: 'newSeries',\n     *     data: [{x: 10, y: 20}, {x: 30, y: 40}],\n     *   },\n     *   {\n     *     chartType: 'line'\n     *   });\n     */\n\n\n    this.addSeries = (data, dataInfo) => {\n      this.resetSeries();\n      this.store.dispatch('addSeries', Object.assign({\n        data\n      }, dataInfo));\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   xAxis: {\n     *     title: 'Month',\n     *     date: { format: 'yy/MM' },\n     *   },\n     *   yAxis: {\n     *     title: 'Energy (kWh)',\n     *   },\n     *   series: {\n     *     line: {\n     *       showDot: true,\n     *     },\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   series: {\n     *     line: {\n     *       showDot: true,\n     *     },\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed\n     *      @param {number} seriesInfo.seriesIndex - Index of series\n     *      @param {number} seriesInfo.index - Index of data within series\n     *      @param {string} seriesInfo.chartType - Specify which chart to select.\n     * @api\n     * @example\n     * chart.showTooltip({index: 1, seriesIndex: 2, chartType: 'scatter'});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), {\n        state: this.store.state\n      }));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(Plot);\n    this.componentManager.add(Legend);\n    this.componentManager.add(LineSeries);\n    this.componentManager.add(ScatterSeries);\n    this.componentManager.add(Axis, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'secondaryYAxis'\n    });\n    this.componentManager.add(DataLabels);\n    this.componentManager.add(AxisTitle, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'secondaryYAxis'\n    });\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(Zoom);\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, axisBrush, lineSeriesBrush, legendBrush, labelBrush, exportMenuBrush, dataLabelBrush, resetButtonBrush, scatterSeriesBrush]);\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set\n   * @api\n   * @example\n   * chart.setData({\n   *   series: {\n   *     line: [\n   *       {\n   *         name: 'A',\n   *         data: [{x: 10, y: 20}, {x: 30, y: 40}],\n   *       }\n   *     ],\n   *     scatter: [\n   *       {\n   *         name: 'B',\n   *         data: [{x: 30, y: 20}, {x: 40, y: 40}],\n   *       }\n   *     ]\n   *   }\n   * });\n   */\n\n\n  setData(data) {\n    this.resetSeries();\n    this.store.dispatch('setData', data);\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/lineScatterChart.js"],"names":["Chart","dataRange","scale","axes","plot","Tooltip","Plot","LineSeries","ScatterSeries","Axis","Legend","DataLabels","AxisTitle","Title","ExportMenu","SelectedSeries","HoveredSeries","Zoom","Background","NoDataText","lineSeriesBrush","basicBrush","axisBrush","legendBrush","labelBrush","exportMenuBrush","dataLabelBrush","resetButtonBrush","scatterSeriesBrush","LineScatterChart","constructor","props","el","options","series","data","modules","addData","chartType","animationControlFlag","updating","resetSeries","store","dispatch","addSeries","dataInfo","Object","assign","setOptions","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","state","hideTooltip","initialize","componentManager","add","name","chartEl","painter","addGroups","setData"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport scale from \"../store/scale\";\nimport axes from \"../store/axes\";\nimport plot from \"../store/plot\";\nimport Tooltip from \"../component/tooltip\";\nimport Plot from \"../component/plot\";\nimport LineSeries from \"../component/lineSeries\";\nimport ScatterSeries from \"../component/scatterSeries\";\nimport Axis from \"../component/axis\";\nimport Legend from \"../component/legend\";\nimport DataLabels from \"../component/dataLabels\";\nimport AxisTitle from \"../component/axisTitle\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport Zoom from \"../component/zoom\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as lineSeriesBrush from \"../brushes/lineSeries\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as resetButtonBrush from \"../brushes/resetButton\";\nimport * as scatterSeriesBrush from \"../brushes/scatterSeries\";\n/**\n * @class\n * @classdesc LineScatter Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making LineArea Chart.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {Array<Object>} props.data.series.line - Line series data. Only coordinate type data is possible.\n *       @param {Array<Object>} props.data.series.scatter - Scatter series data.\n *   @param {Object} [props.options] - Options for making LineScatter Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series] - Write common options in the upper depth and separate options to be applied to each chart.\n *       @param {Object} [props.options.series.line] - Options to be applied to the line chart. 'spline', 'showDot' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Line Chart guide} on github.\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.pointOnColumn=false] - Whether to move the start of the chart to the center of the column.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|LineScatter Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme. Each theme to be applied to the two charts should be written separately.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object|Array<Object>} [props.options.theme.yAxis] - Y Axis theme. In the case of an arrangement, the first is the main axis and the second is the theme for the secondary axis.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class LineScatterChart extends Chart {\n    constructor(props) {\n        super({\n            el: props.el,\n            options: props.options,\n            series: props.data.series,\n            modules: [dataRange, scale, axes, plot],\n        });\n        /**\n         * Add data.\n         * @param {Array} data - Array of data to be added.\n         * @param {string} chartType - Which type of chart to add.\n         * @api\n         * @example\n         * chart.addData([{x: 10, y: 20}, {x: 30, y: 40}], 'line');\n         */\n        this.addData = (data, chartType) => {\n            this.animationControlFlag.updating = true;\n            this.resetSeries();\n            this.store.dispatch('addData', { data, chartType });\n        };\n        /**\n         * Add series.\n         * @param {Object} data - Data to be added.\n         *   @param {string} data.name - Series name.\n         *   @param {Array<Object>} data.data - Array of data to be added.\n         * @param {Object} dataInfo - Which type of chart to add.\n         *   @param {Object} dataInfo.chartType - Chart type.\n         * @api\n         * @example\n         * chart.addSeries(\n         *   {\n         *     name: 'newSeries',\n         *     data: [{x: 10, y: 20}, {x: 30, y: 40}],\n         *   },\n         *   {\n         *     chartType: 'line'\n         *   });\n         */\n        this.addSeries = (data, dataInfo) => {\n            this.resetSeries();\n            this.store.dispatch('addSeries', Object.assign({ data }, dataInfo));\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   xAxis: {\n         *     title: 'Month',\n         *     date: { format: 'yy/MM' },\n         *   },\n         *   yAxis: {\n         *     title: 'Energy (kWh)',\n         *   },\n         *   series: {\n         *     line: {\n         *       showDot: true,\n         *     },\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   series: {\n         *     line: {\n         *       showDot: true,\n         *     },\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed\n         *      @param {number} seriesInfo.seriesIndex - Index of series\n         *      @param {number} seriesInfo.index - Index of data within series\n         *      @param {string} seriesInfo.chartType - Specify which chart to select.\n         * @api\n         * @example\n         * chart.showTooltip({index: 1, seriesIndex: 2, chartType: 'scatter'});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(Plot);\n        this.componentManager.add(Legend);\n        this.componentManager.add(LineSeries);\n        this.componentManager.add(ScatterSeries);\n        this.componentManager.add(Axis, { name: 'yAxis' });\n        this.componentManager.add(Axis, { name: 'xAxis' });\n        this.componentManager.add(Axis, { name: 'secondaryYAxis' });\n        this.componentManager.add(DataLabels);\n        this.componentManager.add(AxisTitle, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'yAxis' });\n        this.componentManager.add(AxisTitle, { name: 'secondaryYAxis' });\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(Zoom);\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            axisBrush,\n            lineSeriesBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            dataLabelBrush,\n            resetButtonBrush,\n            scatterSeriesBrush,\n        ]);\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set\n     * @api\n     * @example\n     * chart.setData({\n     *   series: {\n     *     line: [\n     *       {\n     *         name: 'A',\n     *         data: [{x: 10, y: 20}, {x: 30, y: 40}],\n     *       }\n     *     ],\n     *     scatter: [\n     *       {\n     *         name: 'B',\n     *         data: [{x: 30, y: 20}, {x: 40, y: 40}],\n     *       }\n     *     ]\n     *   }\n     * });\n     */\n    setData(data) {\n        this.resetSeries();\n        this.store.dispatch('setData', data);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}