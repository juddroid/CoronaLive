{"ast":null,"code":"import { extend } from \"./store\";\nimport { calculateCoordinateScale } from \"../scale/coordinateScaleCalculator\";\nimport { getLimitSafely } from \"./dataRange\";\nimport { isVerticalAlign } from \"./layout\";\nimport { TREEMAP_ROOT_ID } from \"./treemapSeriesData\";\nconst colorValueScale = {\n  name: 'colorValueScale',\n  state: () => ({\n    treemapZoomId: {\n      prev: TREEMAP_ROOT_ID,\n      cur: TREEMAP_ROOT_ID\n    },\n    colorValueScale: {}\n  }),\n  action: {\n    setColorValueScale({\n      state\n    }) {\n      const {\n        layout,\n        treemapSeries,\n        legend,\n        heatmapSeries\n      } = state;\n\n      if (!legend.useSpectrumLegend) {\n        return;\n      }\n\n      const series = treemapSeries !== null && treemapSeries !== void 0 ? treemapSeries : heatmapSeries.flatMap(value => value);\n      const values = series.reduce((acc, {\n        colorValue\n      }) => colorValue ? [...acc, colorValue] : acc, []);\n      const dataRange = getLimitSafely([...new Set(values)]);\n      const offsetSize = isVerticalAlign(legend.align) ? layout.plot.width / 2 : layout.plot.height;\n      extend(state.colorValueScale, calculateCoordinateScale({\n        dataRange,\n        offsetSize,\n        useSpectrumLegend: true,\n        scaleOption: {}\n      }));\n    },\n\n    setTreemapZoomId({\n      state\n    }, id) {\n      state.treemapZoomId.prev = state.treemapZoomId.cur;\n      state.treemapZoomId.cur = id;\n    },\n\n    zoomBack({\n      state\n    }) {\n      var _a, _b;\n\n      const {\n        treemapSeries,\n        treemapZoomId\n      } = state;\n      const {\n        prev\n      } = treemapZoomId;\n      const prevSeries = treemapSeries.find(({\n        id\n      }) => id === prev);\n      state.treemapZoomId.prev = (_b = (_a = prevSeries) === null || _a === void 0 ? void 0 : _a.parentId, _b !== null && _b !== void 0 ? _b : TREEMAP_ROOT_ID);\n      state.treemapZoomId.cur = prev;\n    }\n\n  },\n  observe: {\n    updateColorValueScale() {\n      this.dispatch('setColorValueScale');\n    }\n\n  },\n  computed: {\n    isTreemapSeriesZooming: ({\n      treemapZoomId\n    }) => {\n      return treemapZoomId && treemapZoomId.cur !== treemapZoomId.prev;\n    }\n  }\n};\nexport default colorValueScale;","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/store/colorValueScale.js"],"names":["extend","calculateCoordinateScale","getLimitSafely","isVerticalAlign","TREEMAP_ROOT_ID","colorValueScale","name","state","treemapZoomId","prev","cur","action","setColorValueScale","layout","treemapSeries","legend","heatmapSeries","useSpectrumLegend","series","flatMap","value","values","reduce","acc","colorValue","dataRange","Set","offsetSize","align","plot","width","height","scaleOption","setTreemapZoomId","id","zoomBack","_a","_b","prevSeries","find","parentId","observe","updateColorValueScale","dispatch","computed","isTreemapSeriesZooming"],"mappings":"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","sourcesContent":["import { extend } from \"./store\";\nimport { calculateCoordinateScale } from \"../scale/coordinateScaleCalculator\";\nimport { getLimitSafely } from \"./dataRange\";\nimport { isVerticalAlign } from \"./layout\";\nimport { TREEMAP_ROOT_ID } from \"./treemapSeriesData\";\nconst colorValueScale = {\n    name: 'colorValueScale',\n    state: () => ({\n        treemapZoomId: {\n            prev: TREEMAP_ROOT_ID,\n            cur: TREEMAP_ROOT_ID,\n        },\n        colorValueScale: {},\n    }),\n    action: {\n        setColorValueScale({ state }) {\n            const { layout, treemapSeries, legend, heatmapSeries } = state;\n            if (!legend.useSpectrumLegend) {\n                return;\n            }\n            const series = (treemapSeries !== null && treemapSeries !== void 0 ? treemapSeries : heatmapSeries.flatMap((value) => value));\n            const values = series.reduce((acc, { colorValue }) => (colorValue ? [...acc, colorValue] : acc), []);\n            const dataRange = getLimitSafely([...new Set(values)]);\n            const offsetSize = isVerticalAlign(legend.align) ? layout.plot.width / 2 : layout.plot.height;\n            extend(state.colorValueScale, calculateCoordinateScale({\n                dataRange,\n                offsetSize,\n                useSpectrumLegend: true,\n                scaleOption: {},\n            }));\n        },\n        setTreemapZoomId({ state }, id) {\n            state.treemapZoomId.prev = state.treemapZoomId.cur;\n            state.treemapZoomId.cur = id;\n        },\n        zoomBack({ state }) {\n            var _a, _b;\n            const { treemapSeries, treemapZoomId } = state;\n            const { prev } = treemapZoomId;\n            const prevSeries = treemapSeries.find(({ id }) => id === prev);\n            state.treemapZoomId.prev = (_b = (_a = prevSeries) === null || _a === void 0 ? void 0 : _a.parentId, (_b !== null && _b !== void 0 ? _b : TREEMAP_ROOT_ID));\n            state.treemapZoomId.cur = prev;\n        },\n    },\n    observe: {\n        updateColorValueScale() {\n            this.dispatch('setColorValueScale');\n        },\n    },\n    computed: {\n        isTreemapSeriesZooming: ({ treemapZoomId }) => {\n            return treemapZoomId && treemapZoomId.cur !== treemapZoomId.prev;\n        },\n    },\n};\nexport default colorValueScale;\n"]},"metadata":{},"sourceType":"module"}