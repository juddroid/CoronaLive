{"ast":null,"code":"import { makeStyleObj, setLineDash, fillStyle, strokeWithOptions } from \"../helpers/style\";\nimport { calculateDegreeToRadian } from \"../helpers/sector\";\nconst circleStyle = {\n  default: {\n    strokeStyle: '#ffffff',\n    lineWidth: 2\n  },\n  plot: {\n    lineWidth: 1,\n    strokeStyle: 'rgba(0, 0, 0, 0.05)'\n  }\n};\nconst rectStyle = {\n  shadow: {\n    shadowColor: 'rgba(0, 0, 0, 0.3)',\n    shadowOffsetX: 2,\n    shadowOffsetY: 2,\n    shadowBlur: 6\n  }\n};\nexport function clipRectArea(ctx, clipRectAreaModel) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = clipRectAreaModel;\n  ctx.beginPath();\n  ctx.rect(x, y, width, height);\n  ctx.clip();\n}\nexport function pathRect(ctx, pathRectModel) {\n  const {\n    x,\n    y,\n    width,\n    height,\n    radius = 0,\n    stroke: strokeStyle = 'black',\n    fill = '',\n    lineWidth = 1\n  } = pathRectModel;\n  ctx.beginPath();\n  ctx.moveTo(x + radius, y);\n  ctx.lineTo(x + width - radius, y);\n  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n  ctx.lineTo(x + width, y + height - radius);\n  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n  ctx.lineTo(x + radius, y + height);\n  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n  ctx.lineTo(x, y + radius);\n  ctx.quadraticCurveTo(x, y, x + radius, y);\n  ctx.closePath();\n\n  if (fill) {\n    fillStyle(ctx, fill);\n  }\n\n  strokeWithOptions(ctx, {\n    lineWidth,\n    strokeStyle\n  });\n}\nexport function circle(ctx, circleModel) {\n  const {\n    x,\n    y,\n    style,\n    radius,\n    color,\n    angle = {\n      start: 0,\n      end: Math.PI * 2\n    },\n    borderWidth: lineWidth,\n    borderColor: strokeStyle\n  } = circleModel;\n  ctx.beginPath();\n\n  if (style) {\n    const styleObj = makeStyleObj(style, circleStyle);\n    Object.keys(styleObj).forEach(key => {\n      ctx[key] = styleObj[key];\n    });\n  }\n\n  ctx.arc(x, y, radius, angle.start, angle.end, true);\n  fillStyle(ctx, color);\n  strokeWithOptions(ctx, {\n    lineWidth,\n    strokeStyle\n  });\n  ctx.closePath();\n}\nexport function line(ctx, lineModel) {\n  const {\n    x,\n    y,\n    x2,\n    y2,\n    strokeStyle,\n    lineWidth,\n    dashSegments\n  } = lineModel;\n  ctx.beginPath();\n\n  if (dashSegments) {\n    setLineDash(ctx, dashSegments);\n  }\n\n  ctx.moveTo(x, y);\n  ctx.lineTo(x2, y2);\n  strokeWithOptions(ctx, {\n    strokeStyle,\n    lineWidth\n  });\n  ctx.closePath();\n}\nexport function rect(ctx, model) {\n  const {\n    x,\n    y,\n    width,\n    height,\n    style,\n    thickness = 0,\n    color,\n    borderColor = '#ffffff'\n  } = model;\n  ctx.beginPath();\n\n  if (style) {\n    const styleObj = makeStyleObj(style, rectStyle);\n    Object.keys(styleObj).forEach(key => {\n      ctx[key] = styleObj[key];\n    });\n  }\n\n  if (thickness) {\n    ctx.fillStyle = borderColor;\n    ctx.fillRect(x - thickness, y - thickness, width + thickness * 2, height + thickness * 2);\n    ctx.shadowColor = 'rgba(0, 0, 0, 0)'; // reset shadow color\n  }\n\n  ctx.rect(x, y, width, height);\n  fillStyle(ctx, color);\n}\nexport function arc(ctx, arcModel) {\n  const {\n    x,\n    y,\n    angle: {\n      start,\n      end\n    },\n    borderWidth: lineWidth,\n    borderColor: strokeStyle,\n    drawingStartAngle,\n    radius,\n    clockwise = true\n  } = arcModel;\n  ctx.beginPath();\n  const startRadian = calculateDegreeToRadian(start, drawingStartAngle);\n  const endRadian = calculateDegreeToRadian(end, drawingStartAngle);\n  ctx.arc(x, y, radius, startRadian, endRadian, !clockwise);\n  strokeWithOptions(ctx, {\n    lineWidth,\n    strokeStyle\n  });\n  ctx.closePath();\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/brushes/basic.js"],"names":["makeStyleObj","setLineDash","fillStyle","strokeWithOptions","calculateDegreeToRadian","circleStyle","default","strokeStyle","lineWidth","plot","rectStyle","shadow","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","clipRectArea","ctx","clipRectAreaModel","x","y","width","height","beginPath","rect","clip","pathRect","pathRectModel","radius","stroke","fill","moveTo","lineTo","quadraticCurveTo","closePath","circle","circleModel","style","color","angle","start","end","Math","PI","borderWidth","borderColor","styleObj","Object","keys","forEach","key","arc","line","lineModel","x2","y2","dashSegments","model","thickness","fillRect","arcModel","drawingStartAngle","clockwise","startRadian","endRadian"],"mappings":"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","sourcesContent":["import { makeStyleObj, setLineDash, fillStyle, strokeWithOptions } from \"../helpers/style\";\nimport { calculateDegreeToRadian } from \"../helpers/sector\";\nconst circleStyle = {\n    default: {\n        strokeStyle: '#ffffff',\n        lineWidth: 2,\n    },\n    plot: {\n        lineWidth: 1,\n        strokeStyle: 'rgba(0, 0, 0, 0.05)',\n    },\n};\nconst rectStyle = {\n    shadow: {\n        shadowColor: 'rgba(0, 0, 0, 0.3)',\n        shadowOffsetX: 2,\n        shadowOffsetY: 2,\n        shadowBlur: 6,\n    },\n};\nexport function clipRectArea(ctx, clipRectAreaModel) {\n    const { x, y, width, height } = clipRectAreaModel;\n    ctx.beginPath();\n    ctx.rect(x, y, width, height);\n    ctx.clip();\n}\nexport function pathRect(ctx, pathRectModel) {\n    const { x, y, width, height, radius = 0, stroke: strokeStyle = 'black', fill = '', lineWidth = 1, } = pathRectModel;\n    ctx.beginPath();\n    ctx.moveTo(x + radius, y);\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n    ctx.closePath();\n    if (fill) {\n        fillStyle(ctx, fill);\n    }\n    strokeWithOptions(ctx, { lineWidth, strokeStyle });\n}\nexport function circle(ctx, circleModel) {\n    const { x, y, style, radius, color, angle = { start: 0, end: Math.PI * 2 }, borderWidth: lineWidth, borderColor: strokeStyle, } = circleModel;\n    ctx.beginPath();\n    if (style) {\n        const styleObj = makeStyleObj(style, circleStyle);\n        Object.keys(styleObj).forEach((key) => {\n            ctx[key] = styleObj[key];\n        });\n    }\n    ctx.arc(x, y, radius, angle.start, angle.end, true);\n    fillStyle(ctx, color);\n    strokeWithOptions(ctx, { lineWidth, strokeStyle });\n    ctx.closePath();\n}\nexport function line(ctx, lineModel) {\n    const { x, y, x2, y2, strokeStyle, lineWidth, dashSegments } = lineModel;\n    ctx.beginPath();\n    if (dashSegments) {\n        setLineDash(ctx, dashSegments);\n    }\n    ctx.moveTo(x, y);\n    ctx.lineTo(x2, y2);\n    strokeWithOptions(ctx, { strokeStyle, lineWidth });\n    ctx.closePath();\n}\nexport function rect(ctx, model) {\n    const { x, y, width, height, style, thickness = 0, color, borderColor = '#ffffff' } = model;\n    ctx.beginPath();\n    if (style) {\n        const styleObj = makeStyleObj(style, rectStyle);\n        Object.keys(styleObj).forEach((key) => {\n            ctx[key] = styleObj[key];\n        });\n    }\n    if (thickness) {\n        ctx.fillStyle = borderColor;\n        ctx.fillRect(x - thickness, y - thickness, width + thickness * 2, height + thickness * 2);\n        ctx.shadowColor = 'rgba(0, 0, 0, 0)'; // reset shadow color\n    }\n    ctx.rect(x, y, width, height);\n    fillStyle(ctx, color);\n}\nexport function arc(ctx, arcModel) {\n    const { x, y, angle: { start, end }, borderWidth: lineWidth, borderColor: strokeStyle, drawingStartAngle, radius, clockwise = true, } = arcModel;\n    ctx.beginPath();\n    const startRadian = calculateDegreeToRadian(start, drawingStartAngle);\n    const endRadian = calculateDegreeToRadian(end, drawingStartAngle);\n    ctx.arc(x, y, radius, startRadian, endRadian, !clockwise);\n    strokeWithOptions(ctx, { lineWidth, strokeStyle });\n    ctx.closePath();\n}\n"]},"metadata":{},"sourceType":"module"}