{"ast":null,"code":"import Chart from \"./chart\";\nimport colorValueScale from \"../store/colorValueScale\";\nimport treemapSeriesData from \"../store/treemapSeriesData\";\nimport Tooltip from \"../component/tooltip\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport TreemapSeries from \"../component/treemapSeries\";\nimport SpectrumLegend from \"../component/spectrumLegend\";\nimport BackButton from \"../component/backButton\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as spectrumLegendBrush from \"../brushes/spectrumLegend\";\nimport * as resetButtonBrush from \"../brushes/resetButton\";\n/**\n * @class\n * @classdesc Treemap Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Treemap Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.label - Data name.\n *       @param {number} [props.data.series.data] - data value.\n *       @param {number} [props.data.series.colorValue] - color value. If you use the useColorValue option, the color is painted based on this value.\n *       @param {Array<Object>} [props.data.series.children] - Child element value.\n *   @param {Object} [props.options] - Options for making Treemap Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {boolean} [props.options.series.useColorValue] - Whether to use color value or not.\n *       @param {boolean} [props.options.series.zoomable] - Whether to use zoom feature or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {boolean} [props.options.legend.visible=false] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Treemap Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\nexport default class TreemapChart extends Chart {\n  constructor(props) {\n    super({\n      el: props.el,\n      options: props.options,\n      series: {\n        treemap: props.data.series\n      },\n      modules: [treemapSeriesData, colorValueScale]\n    });\n    /**\n     * Hide series data label.\n     * @api\n     * @example\n     * chart.hideSeriesDataLabel();\n     */\n\n    this.hideSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: false\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Show series data label.\n     * @api\n     * @example\n     * chart.showSeriesDataLabel();\n     */\n\n\n    this.showSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: true\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   series: {\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n     *      @param {number} seriesInfo.seriesIndex - Index of series.\n     * @api\n     * @example\n     * chart.showTooltip({seriesIndex: 1});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), {\n        state: this.store.state\n      }));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(SpectrumLegend);\n    this.componentManager.add(TreemapSeries);\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(DataLabels);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(BackButton);\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, legendBrush, labelBrush, exportMenuBrush, dataLabelBrush, spectrumLegendBrush, resetButtonBrush]);\n  }\n  /**\n   * Add series.\n   * @param {Object} data - Data to be added.\n   *   @param {string} data.name - Series name.\n   *   @param {Array<Object>} data.data - Array of data to be added.\n   * @api\n   * @example\n   * chart.addSeries({\n   *   label: 'Documents',\n   *   children: [\n   *     {label: 'A', data: 20},\n   *     {label: 'B', data: 40},\n   *   ],\n   * });\n   */\n\n\n  addSeries(data, dataInfo) {\n    this.resetSeries();\n    this.store.dispatch('addTreemapSeries', Object.assign({\n      data\n    }, dataInfo));\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set.\n   * @api\n   * @example\n   * chart.setData(\n   *   series: [\n   *     {\n   *       label: 'Documents',\n   *       children: [\n   *         {label: 'A', data: 20},\n   *         {label: 'B', data: 40},\n   *       ],\n   *     },\n   *     {\n   *       label: 'Documents',\n   *       data: 30,\n   *     }\n   *   ]\n   * );\n   */\n\n\n  setData(data) {\n    this.resetSeries();\n    this.store.dispatch('setData', {\n      series: {\n        treemap: data.series\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/treemapChart.js"],"names":["Chart","colorValueScale","treemapSeriesData","Tooltip","Title","ExportMenu","HoveredSeries","DataLabels","TreemapSeries","SpectrumLegend","BackButton","SelectedSeries","Background","NoDataText","basicBrush","legendBrush","labelBrush","exportMenuBrush","dataLabelBrush","spectrumLegendBrush","resetButtonBrush","TreemapChart","constructor","props","el","options","series","treemap","data","modules","hideSeriesDataLabel","store","dispatch","dataLabels","visible","showSeriesDataLabel","setOptions","resetSeries","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","Object","assign","state","hideTooltip","initialize","componentManager","add","chartEl","painter","addGroups","addSeries","dataInfo","setData"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport colorValueScale from \"../store/colorValueScale\";\nimport treemapSeriesData from \"../store/treemapSeriesData\";\nimport Tooltip from \"../component/tooltip\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport TreemapSeries from \"../component/treemapSeries\";\nimport SpectrumLegend from \"../component/spectrumLegend\";\nimport BackButton from \"../component/backButton\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as spectrumLegendBrush from \"../brushes/spectrumLegend\";\nimport * as resetButtonBrush from \"../brushes/resetButton\";\n/**\n * @class\n * @classdesc Treemap Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Treemap Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.label - Data name.\n *       @param {number} [props.data.series.data] - data value.\n *       @param {number} [props.data.series.colorValue] - color value. If you use the useColorValue option, the color is painted based on this value.\n *       @param {Array<Object>} [props.data.series.children] - Child element value.\n *   @param {Object} [props.options] - Options for making Treemap Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {boolean} [props.options.series.useColorValue] - Whether to use color value or not.\n *       @param {boolean} [props.options.series.zoomable] - Whether to use zoom feature or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {boolean} [props.options.legend.visible=false] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Treemap Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class TreemapChart extends Chart {\n    constructor(props) {\n        super({\n            el: props.el,\n            options: props.options,\n            series: {\n                treemap: props.data.series,\n            },\n            modules: [treemapSeriesData, colorValueScale],\n        });\n        /**\n         * Hide series data label.\n         * @api\n         * @example\n         * chart.hideSeriesDataLabel();\n         */\n        this.hideSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: false } } },\n            });\n        };\n        /**\n         * Show series data label.\n         * @api\n         * @example\n         * chart.showSeriesDataLabel();\n         */\n        this.showSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: true } } },\n            });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   series: {\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n         *      @param {number} seriesInfo.seriesIndex - Index of series.\n         * @api\n         * @example\n         * chart.showTooltip({seriesIndex: 1});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(SpectrumLegend);\n        this.componentManager.add(TreemapSeries);\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(DataLabels);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(BackButton);\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            dataLabelBrush,\n            spectrumLegendBrush,\n            resetButtonBrush,\n        ]);\n    }\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     *   @param {string} data.name - Series name.\n     *   @param {Array<Object>} data.data - Array of data to be added.\n     * @api\n     * @example\n     * chart.addSeries({\n     *   label: 'Documents',\n     *   children: [\n     *     {label: 'A', data: 20},\n     *     {label: 'B', data: 40},\n     *   ],\n     * });\n     */\n    addSeries(data, dataInfo) {\n        this.resetSeries();\n        this.store.dispatch('addTreemapSeries', Object.assign({ data }, dataInfo));\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set.\n     * @api\n     * @example\n     * chart.setData(\n     *   series: [\n     *     {\n     *       label: 'Documents',\n     *       children: [\n     *         {label: 'A', data: 20},\n     *         {label: 'B', data: 40},\n     *       ],\n     *     },\n     *     {\n     *       label: 'Documents',\n     *       data: 30,\n     *     }\n     *   ]\n     * );\n     */\n    setData(data) {\n        this.resetSeries();\n        this.store.dispatch('setData', { series: { treemap: data.series } });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}