{"ast":null,"code":"import { getInitialSize, isAutoValue } from \"../helpers/utils\";\n\nfunction initialSize(containerEl, {\n  width,\n  height\n}) {\n  return {\n    width: width === 0 ? containerEl.offsetWidth : width,\n    height: height === 0 ? containerEl.offsetHeight : height\n  };\n}\n\nconst root = {\n  name: 'root',\n  state: ({\n    options\n  }) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    return {\n      chart: Object.assign(Object.assign({}, options.chart), {\n        width: getInitialSize((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.chart) === null || _b === void 0 ? void 0 : _b.width),\n        height: getInitialSize((_d = (_c = options) === null || _c === void 0 ? void 0 : _c.chart) === null || _d === void 0 ? void 0 : _d.height)\n      }),\n      usingContainerSize: {\n        width: isAutoValue((_f = (_e = options) === null || _e === void 0 ? void 0 : _e.chart) === null || _f === void 0 ? void 0 : _f.width),\n        height: isAutoValue((_h = (_g = options) === null || _g === void 0 ? void 0 : _g.chart) === null || _h === void 0 ? void 0 : _h.height)\n      },\n      container: {}\n    };\n  },\n  action: {\n    setChartSize({\n      state\n    }, size) {\n      state.chart.width = size.width;\n      state.chart.height = size.height;\n      this.notify(state, 'chart');\n    },\n\n    initChartSize({\n      state\n    }, containerEl) {\n      const {\n        width,\n        height\n      } = state.chart;\n\n      if (width === 0 || height === 0) {\n        if (containerEl.parentNode) {\n          this.dispatch('setChartSize', initialSize(containerEl, {\n            width,\n            height\n          }));\n        } else {\n          setTimeout(() => {\n            this.dispatch('setChartSize', initialSize(containerEl, {\n              width,\n              height\n            }));\n          }, 0);\n        }\n      }\n    },\n\n    setUsingContainerSize({\n      state\n    }, {\n      width,\n      height\n    }) {\n      state.usingContainerSize.width = width;\n      state.usingContainerSize.height = height;\n    }\n\n  }\n};\nexport default root;","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/store/root.js"],"names":["getInitialSize","isAutoValue","initialSize","containerEl","width","height","offsetWidth","offsetHeight","root","name","state","options","_a","_b","_c","_d","_e","_f","_g","_h","chart","Object","assign","usingContainerSize","container","action","setChartSize","size","notify","initChartSize","parentNode","dispatch","setTimeout","setUsingContainerSize"],"mappings":"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","sourcesContent":["import { getInitialSize, isAutoValue } from \"../helpers/utils\";\nfunction initialSize(containerEl, { width, height }) {\n    return {\n        width: width === 0 ? containerEl.offsetWidth : width,\n        height: height === 0 ? containerEl.offsetHeight : height,\n    };\n}\nconst root = {\n    name: 'root',\n    state: ({ options }) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        return ({\n            chart: Object.assign(Object.assign({}, options.chart), { width: getInitialSize((_b = (_a = options) === null || _a === void 0 ? void 0 : _a.chart) === null || _b === void 0 ? void 0 : _b.width), height: getInitialSize((_d = (_c = options) === null || _c === void 0 ? void 0 : _c.chart) === null || _d === void 0 ? void 0 : _d.height) }),\n            usingContainerSize: {\n                width: isAutoValue((_f = (_e = options) === null || _e === void 0 ? void 0 : _e.chart) === null || _f === void 0 ? void 0 : _f.width),\n                height: isAutoValue((_h = (_g = options) === null || _g === void 0 ? void 0 : _g.chart) === null || _h === void 0 ? void 0 : _h.height),\n            },\n            container: {},\n        });\n    },\n    action: {\n        setChartSize({ state }, size) {\n            state.chart.width = size.width;\n            state.chart.height = size.height;\n            this.notify(state, 'chart');\n        },\n        initChartSize({ state }, containerEl) {\n            const { width, height } = state.chart;\n            if (width === 0 || height === 0) {\n                if (containerEl.parentNode) {\n                    this.dispatch('setChartSize', initialSize(containerEl, { width, height }));\n                }\n                else {\n                    setTimeout(() => {\n                        this.dispatch('setChartSize', initialSize(containerEl, { width, height }));\n                    }, 0);\n                }\n            }\n        },\n        setUsingContainerSize({ state }, { width, height }) {\n            state.usingContainerSize.width = width;\n            state.usingContainerSize.height = height;\n        },\n    },\n};\nexport default root;\n"]},"metadata":{},"sourceType":"module"}