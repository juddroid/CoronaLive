{"ast":null,"code":"import { circle, pathRect } from \"./basic\";\nimport { polygon } from \"./polygon\";\nimport { fillStyle } from \"../helpers/style\";\n\nfunction regularPolygon(ctx, model) {\n  const {\n    numberOfSides,\n    size,\n    x,\n    y,\n    borderColor,\n    borderWidth,\n    fillColor\n  } = model;\n  const s = size / 2;\n  const shift = numberOfSides % 2 ? Math.PI / 180.0 * (10 + (numberOfSides - 3) / 2) * numberOfSides : 0;\n  const step = 2 * Math.PI / numberOfSides;\n  ctx.beginPath();\n\n  for (let i = 0; i <= numberOfSides; i += 1) {\n    const curStep = i * step + shift;\n    ctx.lineTo(x + s * Math.cos(curStep), y + s * Math.sin(curStep));\n  }\n\n  ctx.strokeStyle = borderColor;\n  ctx.lineWidth = borderWidth;\n  fillStyle(ctx, fillColor);\n  ctx.stroke();\n  ctx.closePath();\n} // https://programmingthomas.wordpress.com/2012/05/16/drawing-stars-with-html5-canvas/\n\n\nfunction star(ctx, model) {\n  const {\n    x,\n    y,\n    borderColor,\n    borderWidth,\n    size,\n    fillColor\n  } = model;\n  ctx.lineWidth = borderWidth;\n  ctx.strokeStyle = borderColor;\n  ctx.fillStyle = fillColor;\n  ctx.save();\n  ctx.beginPath();\n  ctx.translate(x, y);\n  ctx.moveTo(0, -size);\n\n  for (let i = 0; i < 5; i += 1) {\n    ctx.rotate(Math.PI / 5);\n    ctx.lineTo(0, -size / 2);\n    ctx.rotate(Math.PI / 5);\n    ctx.lineTo(0, -size);\n  }\n\n  ctx.fill();\n  ctx.stroke();\n  ctx.restore();\n  ctx.closePath();\n}\n\nfunction cross(ctx, model) {\n  const {\n    x,\n    y,\n    borderColor,\n    borderWidth,\n    size,\n    fillColor\n  } = model;\n  const quarter = size / 4;\n  const half = size / 2;\n  const xPointsOffset = [-half, -half, -quarter, -quarter, quarter, quarter, half, half, quarter, quarter, -quarter, -quarter];\n  const yPointsOffset = [];\n\n  for (let idx = 0, len = xPointsOffset.length; idx < len; idx += 1) {\n    const startIdx = 9;\n    yPointsOffset.push(xPointsOffset[(startIdx + idx) % len]);\n  }\n\n  polygon(ctx, {\n    type: 'polygon',\n    lineWidth: borderWidth,\n    color: borderColor,\n    points: xPointsOffset.map((val, idx) => ({\n      x: x + val,\n      y: y + yPointsOffset[idx]\n    })),\n    fillColor\n  });\n}\n\nfunction getNumberOfSidesByIconType(iconType) {\n  switch (iconType) {\n    case 'triangle':\n      return 3;\n\n    case 'diamond':\n      return 4;\n\n    case 'pentagon':\n      return 5;\n\n    case 'hexagon':\n      return 6;\n  }\n}\n\nexport function scatterSeries(ctx, model) {\n  const {\n    x,\n    y,\n    borderColor,\n    borderWidth,\n    fillColor,\n    iconType,\n    size\n  } = model;\n  const commonModel = {\n    x,\n    y,\n    fillColor,\n    borderColor,\n    borderWidth,\n    size\n  };\n  ctx.beginPath();\n\n  switch (iconType) {\n    case 'rect':\n      pathRect(ctx, {\n        type: 'pathRect',\n        x: x - size / 2,\n        y: y - size / 2,\n        width: size,\n        height: size,\n        stroke: borderColor,\n        lineWidth: borderWidth,\n        fill: fillColor\n      });\n      break;\n\n    case 'triangle':\n    case 'pentagon':\n    case 'diamond':\n    case 'hexagon':\n      regularPolygon(ctx, Object.assign({\n        type: 'regularPolygon',\n        numberOfSides: getNumberOfSidesByIconType(iconType)\n      }, commonModel));\n      break;\n\n    case 'star':\n      star(ctx, Object.assign(Object.assign({\n        type: 'star'\n      }, commonModel), {\n        size: size / 2\n      }));\n      break;\n\n    case 'cross':\n      cross(ctx, Object.assign({\n        type: 'cross'\n      }, commonModel));\n      break;\n\n    default:\n      circle(ctx, {\n        type: 'circle',\n        x,\n        y,\n        radius: size / 2,\n        style: [{\n          strokeStyle: borderColor,\n          lineWidth: borderWidth\n        }],\n        color: fillColor\n      });\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/brushes/scatterSeries.js"],"names":["circle","pathRect","polygon","fillStyle","regularPolygon","ctx","model","numberOfSides","size","x","y","borderColor","borderWidth","fillColor","s","shift","Math","PI","step","beginPath","i","curStep","lineTo","cos","sin","strokeStyle","lineWidth","stroke","closePath","star","save","translate","moveTo","rotate","fill","restore","cross","quarter","half","xPointsOffset","yPointsOffset","idx","len","length","startIdx","push","type","color","points","map","val","getNumberOfSidesByIconType","iconType","scatterSeries","commonModel","width","height","Object","assign","radius","style"],"mappings":"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","sourcesContent":["import { circle, pathRect } from \"./basic\";\nimport { polygon } from \"./polygon\";\nimport { fillStyle } from \"../helpers/style\";\nfunction regularPolygon(ctx, model) {\n    const { numberOfSides, size, x, y, borderColor, borderWidth, fillColor } = model;\n    const s = size / 2;\n    const shift = numberOfSides % 2 ? (Math.PI / 180.0) * (10 + (numberOfSides - 3) / 2) * numberOfSides : 0;\n    const step = (2 * Math.PI) / numberOfSides;\n    ctx.beginPath();\n    for (let i = 0; i <= numberOfSides; i += 1) {\n        const curStep = i * step + shift;\n        ctx.lineTo(x + s * Math.cos(curStep), y + s * Math.sin(curStep));\n    }\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = borderWidth;\n    fillStyle(ctx, fillColor);\n    ctx.stroke();\n    ctx.closePath();\n}\n// https://programmingthomas.wordpress.com/2012/05/16/drawing-stars-with-html5-canvas/\nfunction star(ctx, model) {\n    const { x, y, borderColor, borderWidth, size, fillColor } = model;\n    ctx.lineWidth = borderWidth;\n    ctx.strokeStyle = borderColor;\n    ctx.fillStyle = fillColor;\n    ctx.save();\n    ctx.beginPath();\n    ctx.translate(x, y);\n    ctx.moveTo(0, -size);\n    for (let i = 0; i < 5; i += 1) {\n        ctx.rotate(Math.PI / 5);\n        ctx.lineTo(0, -size / 2);\n        ctx.rotate(Math.PI / 5);\n        ctx.lineTo(0, -size);\n    }\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n    ctx.closePath();\n}\nfunction cross(ctx, model) {\n    const { x, y, borderColor, borderWidth, size, fillColor } = model;\n    const quarter = size / 4;\n    const half = size / 2;\n    const xPointsOffset = [\n        -half,\n        -half,\n        -quarter,\n        -quarter,\n        quarter,\n        quarter,\n        half,\n        half,\n        quarter,\n        quarter,\n        -quarter,\n        -quarter,\n    ];\n    const yPointsOffset = [];\n    for (let idx = 0, len = xPointsOffset.length; idx < len; idx += 1) {\n        const startIdx = 9;\n        yPointsOffset.push(xPointsOffset[(startIdx + idx) % len]);\n    }\n    polygon(ctx, {\n        type: 'polygon',\n        lineWidth: borderWidth,\n        color: borderColor,\n        points: xPointsOffset.map((val, idx) => ({ x: x + val, y: y + yPointsOffset[idx] })),\n        fillColor,\n    });\n}\nfunction getNumberOfSidesByIconType(iconType) {\n    switch (iconType) {\n        case 'triangle':\n            return 3;\n        case 'diamond':\n            return 4;\n        case 'pentagon':\n            return 5;\n        case 'hexagon':\n            return 6;\n    }\n}\nexport function scatterSeries(ctx, model) {\n    const { x, y, borderColor, borderWidth, fillColor, iconType, size } = model;\n    const commonModel = { x, y, fillColor, borderColor, borderWidth, size };\n    ctx.beginPath();\n    switch (iconType) {\n        case 'rect':\n            pathRect(ctx, {\n                type: 'pathRect',\n                x: x - size / 2,\n                y: y - size / 2,\n                width: size,\n                height: size,\n                stroke: borderColor,\n                lineWidth: borderWidth,\n                fill: fillColor,\n            });\n            break;\n        case 'triangle':\n        case 'pentagon':\n        case 'diamond':\n        case 'hexagon':\n            regularPolygon(ctx, Object.assign({ type: 'regularPolygon', numberOfSides: getNumberOfSidesByIconType(iconType) }, commonModel));\n            break;\n        case 'star':\n            star(ctx, Object.assign(Object.assign({ type: 'star' }, commonModel), { size: size / 2 }));\n            break;\n        case 'cross':\n            cross(ctx, Object.assign({ type: 'cross' }, commonModel));\n            break;\n        default:\n            circle(ctx, {\n                type: 'circle',\n                x,\n                y,\n                radius: size / 2,\n                style: [{ strokeStyle: borderColor, lineWidth: borderWidth }],\n                color: fillColor,\n            });\n    }\n    ctx.stroke();\n    ctx.closePath();\n}\n"]},"metadata":{},"sourceType":"module"}