{"ast":null,"code":"import { padding } from \"../store/layout\";\nimport { getTextWidth, getMaxLengthLabelWidth } from \"../helpers/calculator\";\nimport { label, bubbleLabel } from \"./label\";\nimport { getBubbleArrowPoints } from \"./dataLabel\";\nexport const SPECTRUM_LEGEND_LABEL_HEIGHT = 12;\nexport const spectrumLegendBar = {\n  HEIGHT: 6,\n  PADDING: 5\n};\nexport const spectrumLegendTooltip = {\n  HEIGHT: 28,\n  POINT_WIDTH: 8,\n  POINT_HEIGHT: 6,\n  PADDING: 6\n};\n\nfunction getBarStartPoint(model) {\n  const {\n    align,\n    x: modelX,\n    y: modelY,\n    labels,\n    width\n  } = model;\n  const {\n    PADDING\n  } = spectrumLegendBar;\n  let x, y;\n\n  if (align === 'top') {\n    x = modelX;\n    y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING;\n  } else if (align === 'bottom') {\n    x = modelX;\n    y = modelY + spectrumLegendTooltip.HEIGHT;\n  } else if (align === 'left') {\n    x = modelX + getMaxLengthLabelWidth(labels) + PADDING;\n    y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT / 2;\n  } else {\n    x = modelX + width - (getMaxLengthLabelWidth(labels) + padding.X + PADDING * 2 + spectrumLegendBar.HEIGHT);\n    y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT / 2;\n  }\n\n  return {\n    x,\n    y\n  };\n}\n\nfunction getLabelsStartPoint(model) {\n  const {\n    align,\n    x: modelX,\n    y: modelY,\n    labels,\n    width\n  } = model;\n  let x, y;\n\n  if (align === 'top') {\n    x = modelX;\n    y = modelY;\n  } else if (align === 'bottom') {\n    x = modelX;\n    y = modelY + spectrumLegendTooltip.HEIGHT + spectrumLegendBar.HEIGHT + spectrumLegendBar.PADDING;\n  } else if (align === 'left') {\n    x = modelX + getMaxLengthLabelWidth(labels);\n    y = modelY;\n  } else {\n    x = modelX + width - getMaxLengthLabelWidth(labels) - padding.X;\n    y = modelY;\n  }\n\n  return {\n    x,\n    y\n  };\n}\n\nfunction getBarSize(width, height, verticalAlign) {\n  const {\n    HEIGHT\n  } = spectrumLegendBar;\n  const barWidth = verticalAlign ? width : HEIGHT;\n  const barHeight = verticalAlign ? HEIGHT : height - SPECTRUM_LEGEND_LABEL_HEIGHT;\n  return {\n    barWidth,\n    barHeight\n  };\n}\n\nfunction drawLabels(ctx, model) {\n  const {\n    labels,\n    align,\n    x,\n    y,\n    width,\n    height,\n    verticalAlign\n  } = model;\n  const {\n    barWidth,\n    barHeight\n  } = getBarSize(width, height, verticalAlign);\n  const labelSize = labels.length - 1;\n  const textBaseStyleMap = {\n    left: {\n      textAlign: 'right',\n      textBaseline: 'top'\n    },\n    right: {\n      textAlign: 'left',\n      textBaseline: 'top'\n    },\n    top: {\n      textAlign: 'center',\n      textBaseline: 'top'\n    },\n    bottom: {\n      textAlign: 'center',\n      textBaseline: 'top'\n    }\n  };\n  labels.forEach((text, idx) => {\n    const startX = verticalAlign ? x + barWidth / labelSize * idx : x;\n    const startY = verticalAlign ? y : y + barHeight / labelSize * idx;\n    label(ctx, {\n      type: 'label',\n      x: startX,\n      y: startY,\n      text,\n      style: ['default', textBaseStyleMap[align]]\n    });\n  });\n}\n\nfunction drawBar(ctx, model) {\n  const {\n    width,\n    height,\n    startColor,\n    endColor,\n    x,\n    y,\n    verticalAlign\n  } = model;\n  const {\n    barWidth,\n    barHeight\n  } = getBarSize(width, height, verticalAlign);\n  const gradient = verticalAlign ? ctx.createLinearGradient(x, y, x + barWidth, y) : ctx.createLinearGradient(x, y, x, y + barHeight);\n  gradient.addColorStop(0, startColor);\n  gradient.addColorStop(1, endColor);\n  ctx.fillStyle = gradient;\n  ctx.fillRect(x, y, barWidth, barHeight);\n}\n\nfunction getTooltipArrowPoint(model) {\n  const {\n    align,\n    colorRatio,\n    width,\n    height,\n    x,\n    y,\n    labels,\n    verticalAlign\n  } = model;\n  const {\n    barWidth,\n    barHeight\n  } = getBarSize(width, height, verticalAlign);\n  const {\n    PADDING,\n    HEIGHT\n  } = spectrumLegendBar;\n\n  if (align === 'top') {\n    return {\n      x: x + barWidth * colorRatio,\n      y: y + SPECTRUM_LEGEND_LABEL_HEIGHT + HEIGHT + PADDING * 2\n    };\n  }\n\n  if (align === 'bottom') {\n    return {\n      x: x + barWidth * colorRatio,\n      y: y + SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING * 2\n    };\n  }\n\n  if (align === 'left') {\n    return {\n      x: x + getMaxLengthLabelWidth(labels) + HEIGHT + PADDING * 2,\n      y: y + barHeight * colorRatio + PADDING\n    };\n  }\n\n  if (align === 'right') {\n    return {\n      x: x + width - (getMaxLengthLabelWidth(labels) + padding.X + PADDING * 3 + HEIGHT),\n      y: y + barHeight * colorRatio + PADDING\n    };\n  }\n}\n\nexport function spectrumLegend(ctx, model) {\n  const labelsStartPoint = getLabelsStartPoint(model);\n  const barStartPoint = getBarStartPoint(model);\n  drawLabels(ctx, Object.assign(Object.assign({}, model), labelsStartPoint));\n  drawBar(ctx, Object.assign(Object.assign({}, model), barStartPoint));\n}\nexport function spectrumTooltip(ctx, model) {\n  const {\n    x,\n    y\n  } = getTooltipArrowPoint(model);\n  const {\n    PADDING,\n    POINT_HEIGHT,\n    POINT_WIDTH\n  } = spectrumLegendTooltip;\n  const {\n    align,\n    text,\n    color\n  } = model;\n  const labelWidth = getTextWidth(text);\n  const width = labelWidth + PADDING * 2;\n  const height = SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING * 2;\n  const direction = align;\n  let boxStartX = x;\n  let boxStartY = y;\n\n  if (align === 'top') {\n    boxStartY += POINT_HEIGHT;\n  } else if (align === 'right') {\n    boxStartX -= width / 2 + POINT_HEIGHT;\n    boxStartY -= height / 2;\n  } else if (align === 'left') {\n    boxStartX += width / 2 + POINT_HEIGHT;\n    boxStartY -= height / 2;\n  } else if (align === 'bottom') {\n    boxStartY -= height + POINT_HEIGHT;\n  }\n\n  const points = getBubbleArrowPoints(align, {\n    x,\n    y\n  }, {\n    visible: true,\n    width: POINT_WIDTH,\n    height: POINT_HEIGHT\n  });\n  bubbleLabel(ctx, {\n    type: 'bubbleLabel',\n    bubble: {\n      x: boxStartX - width / 2,\n      y: boxStartY,\n      width,\n      height,\n      points,\n      direction,\n      fill: color\n    },\n    label: {\n      text,\n      x: boxStartX,\n      y: boxStartY + height / 2,\n      style: [{\n        font: 'normal 11px Arial',\n        fillStyle: '#333333',\n        textAlign: 'center',\n        textBaseline: 'middle'\n      }]\n    }\n  });\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/brushes/spectrumLegend.js"],"names":["padding","getTextWidth","getMaxLengthLabelWidth","label","bubbleLabel","getBubbleArrowPoints","SPECTRUM_LEGEND_LABEL_HEIGHT","spectrumLegendBar","HEIGHT","PADDING","spectrumLegendTooltip","POINT_WIDTH","POINT_HEIGHT","getBarStartPoint","model","align","x","modelX","y","modelY","labels","width","X","getLabelsStartPoint","getBarSize","height","verticalAlign","barWidth","barHeight","drawLabels","ctx","labelSize","length","textBaseStyleMap","left","textAlign","textBaseline","right","top","bottom","forEach","text","idx","startX","startY","type","style","drawBar","startColor","endColor","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","getTooltipArrowPoint","colorRatio","spectrumLegend","labelsStartPoint","barStartPoint","Object","assign","spectrumTooltip","color","labelWidth","direction","boxStartX","boxStartY","points","visible","bubble","fill","font"],"mappings":"AAAA,SAASA,OAAT,QAAwB,iBAAxB;AACA,SAASC,YAAT,EAAuBC,sBAAvB,QAAqD,uBAArD;AACA,SAASC,KAAT,EAAgBC,WAAhB,QAAmC,SAAnC;AACA,SAASC,oBAAT,QAAqC,aAArC;AACA,OAAO,MAAMC,4BAA4B,GAAG,EAArC;AACP,OAAO,MAAMC,iBAAiB,GAAG;AAC7BC,EAAAA,MAAM,EAAE,CADqB;AAE7BC,EAAAA,OAAO,EAAE;AAFoB,CAA1B;AAIP,OAAO,MAAMC,qBAAqB,GAAG;AACjCF,EAAAA,MAAM,EAAE,EADyB;AAEjCG,EAAAA,WAAW,EAAE,CAFoB;AAGjCC,EAAAA,YAAY,EAAE,CAHmB;AAIjCH,EAAAA,OAAO,EAAE;AAJwB,CAA9B;;AAMP,SAASI,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,CAAC,EAAEC,MAAZ;AAAoBC,IAAAA,CAAC,EAAEC,MAAvB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA;AAAvC,MAAiDP,KAAvD;AACA,QAAM;AAAEL,IAAAA;AAAF,MAAcF,iBAApB;AACA,MAAIS,CAAJ,EAAOE,CAAP;;AACA,MAAIH,KAAK,KAAK,KAAd,EAAqB;AACjBC,IAAAA,CAAC,GAAGC,MAAJ;AACAC,IAAAA,CAAC,GAAGC,MAAM,GAAGb,4BAAT,GAAwCG,OAA5C;AACH,GAHD,MAIK,IAAIM,KAAK,KAAK,QAAd,EAAwB;AACzBC,IAAAA,CAAC,GAAGC,MAAJ;AACAC,IAAAA,CAAC,GAAGC,MAAM,GAAGT,qBAAqB,CAACF,MAAnC;AACH,GAHI,MAIA,IAAIO,KAAK,KAAK,MAAd,EAAsB;AACvBC,IAAAA,CAAC,GAAGC,MAAM,GAAGf,sBAAsB,CAACkB,MAAD,CAA/B,GAA0CX,OAA9C;AACAS,IAAAA,CAAC,GAAGC,MAAM,GAAGb,4BAA4B,GAAG,CAA5C;AACH,GAHI,MAIA;AACDU,IAAAA,CAAC,GACGC,MAAM,GACFI,KADJ,IAEKnB,sBAAsB,CAACkB,MAAD,CAAtB,GAAiCpB,OAAO,CAACsB,CAAzC,GAA6Cb,OAAO,GAAG,CAAvD,GAA2DF,iBAAiB,CAACC,MAFlF,CADJ;AAIAU,IAAAA,CAAC,GAAGC,MAAM,GAAGb,4BAA4B,GAAG,CAA5C;AACH;;AACD,SAAO;AAAEU,IAAAA,CAAF;AAAKE,IAAAA;AAAL,GAAP;AACH;;AACD,SAASK,mBAAT,CAA6BT,KAA7B,EAAoC;AAChC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,CAAC,EAAEC,MAAZ;AAAoBC,IAAAA,CAAC,EAAEC,MAAvB;AAA+BC,IAAAA,MAA/B;AAAuCC,IAAAA;AAAvC,MAAiDP,KAAvD;AACA,MAAIE,CAAJ,EAAOE,CAAP;;AACA,MAAIH,KAAK,KAAK,KAAd,EAAqB;AACjBC,IAAAA,CAAC,GAAGC,MAAJ;AACAC,IAAAA,CAAC,GAAGC,MAAJ;AACH,GAHD,MAIK,IAAIJ,KAAK,KAAK,QAAd,EAAwB;AACzBC,IAAAA,CAAC,GAAGC,MAAJ;AACAC,IAAAA,CAAC,GACGC,MAAM,GAAGT,qBAAqB,CAACF,MAA/B,GAAwCD,iBAAiB,CAACC,MAA1D,GAAmED,iBAAiB,CAACE,OADzF;AAEH,GAJI,MAKA,IAAIM,KAAK,KAAK,MAAd,EAAsB;AACvBC,IAAAA,CAAC,GAAGC,MAAM,GAAGf,sBAAsB,CAACkB,MAAD,CAAnC;AACAF,IAAAA,CAAC,GAAGC,MAAJ;AACH,GAHI,MAIA;AACDH,IAAAA,CAAC,GAAGC,MAAM,GAAGI,KAAT,GAAiBnB,sBAAsB,CAACkB,MAAD,CAAvC,GAAkDpB,OAAO,CAACsB,CAA9D;AACAJ,IAAAA,CAAC,GAAGC,MAAJ;AACH;;AACD,SAAO;AAAEH,IAAAA,CAAF;AAAKE,IAAAA;AAAL,GAAP;AACH;;AACD,SAASM,UAAT,CAAoBH,KAApB,EAA2BI,MAA3B,EAAmCC,aAAnC,EAAkD;AAC9C,QAAM;AAAElB,IAAAA;AAAF,MAAaD,iBAAnB;AACA,QAAMoB,QAAQ,GAAGD,aAAa,GAAGL,KAAH,GAAWb,MAAzC;AACA,QAAMoB,SAAS,GAAGF,aAAa,GAAGlB,MAAH,GAAYiB,MAAM,GAAGnB,4BAApD;AACA,SAAO;AAAEqB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAP;AACH;;AACD,SAASC,UAAT,CAAoBC,GAApB,EAAyBhB,KAAzB,EAAgC;AAC5B,QAAM;AAAEM,IAAAA,MAAF;AAAUL,IAAAA,KAAV;AAAiBC,IAAAA,CAAjB;AAAoBE,IAAAA,CAApB;AAAuBG,IAAAA,KAAvB;AAA8BI,IAAAA,MAA9B;AAAsCC,IAAAA;AAAtC,MAAwDZ,KAA9D;AACA,QAAM;AAAEa,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BJ,UAAU,CAACH,KAAD,EAAQI,MAAR,EAAgBC,aAAhB,CAA1C;AACA,QAAMK,SAAS,GAAGX,MAAM,CAACY,MAAP,GAAgB,CAAlC;AACA,QAAMC,gBAAgB,GAAG;AACrBC,IAAAA,IAAI,EAAE;AACFC,MAAAA,SAAS,EAAE,OADT;AAEFC,MAAAA,YAAY,EAAE;AAFZ,KADe;AAKrBC,IAAAA,KAAK,EAAE;AACHF,MAAAA,SAAS,EAAE,MADR;AAEHC,MAAAA,YAAY,EAAE;AAFX,KALc;AASrBE,IAAAA,GAAG,EAAE;AACDH,MAAAA,SAAS,EAAE,QADV;AAEDC,MAAAA,YAAY,EAAE;AAFb,KATgB;AAarBG,IAAAA,MAAM,EAAE;AACJJ,MAAAA,SAAS,EAAE,QADP;AAEJC,MAAAA,YAAY,EAAE;AAFV;AAba,GAAzB;AAkBAhB,EAAAA,MAAM,CAACoB,OAAP,CAAe,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC1B,UAAMC,MAAM,GAAGjB,aAAa,GAAGV,CAAC,GAAIW,QAAQ,GAAGI,SAAZ,GAAyBW,GAAhC,GAAsC1B,CAAlE;AACA,UAAM4B,MAAM,GAAGlB,aAAa,GAAGR,CAAH,GAAOA,CAAC,GAAIU,SAAS,GAAGG,SAAb,GAA0BW,GAAjE;AACAvC,IAAAA,KAAK,CAAC2B,GAAD,EAAM;AACPe,MAAAA,IAAI,EAAE,OADC;AAEP7B,MAAAA,CAAC,EAAE2B,MAFI;AAGPzB,MAAAA,CAAC,EAAE0B,MAHI;AAIPH,MAAAA,IAJO;AAKPK,MAAAA,KAAK,EAAE,CAAC,SAAD,EAAYb,gBAAgB,CAAClB,KAAD,CAA5B;AALA,KAAN,CAAL;AAOH,GAVD;AAWH;;AACD,SAASgC,OAAT,CAAiBjB,GAAjB,EAAsBhB,KAAtB,EAA6B;AACzB,QAAM;AAAEO,IAAAA,KAAF;AAASI,IAAAA,MAAT;AAAiBuB,IAAAA,UAAjB;AAA6BC,IAAAA,QAA7B;AAAuCjC,IAAAA,CAAvC;AAA0CE,IAAAA,CAA1C;AAA6CQ,IAAAA;AAA7C,MAA+DZ,KAArE;AACA,QAAM;AAAEa,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BJ,UAAU,CAACH,KAAD,EAAQI,MAAR,EAAgBC,aAAhB,CAA1C;AACA,QAAMwB,QAAQ,GAAGxB,aAAa,GACxBI,GAAG,CAACqB,oBAAJ,CAAyBnC,CAAzB,EAA4BE,CAA5B,EAA+BF,CAAC,GAAGW,QAAnC,EAA6CT,CAA7C,CADwB,GAExBY,GAAG,CAACqB,oBAAJ,CAAyBnC,CAAzB,EAA4BE,CAA5B,EAA+BF,CAA/B,EAAkCE,CAAC,GAAGU,SAAtC,CAFN;AAGAsB,EAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAAyBJ,UAAzB;AACAE,EAAAA,QAAQ,CAACE,YAAT,CAAsB,CAAtB,EAAyBH,QAAzB;AACAnB,EAAAA,GAAG,CAACuB,SAAJ,GAAgBH,QAAhB;AACApB,EAAAA,GAAG,CAACwB,QAAJ,CAAatC,CAAb,EAAgBE,CAAhB,EAAmBS,QAAnB,EAA6BC,SAA7B;AACH;;AACD,SAAS2B,oBAAT,CAA8BzC,KAA9B,EAAqC;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASyC,IAAAA,UAAT;AAAqBnC,IAAAA,KAArB;AAA4BI,IAAAA,MAA5B;AAAoCT,IAAAA,CAApC;AAAuCE,IAAAA,CAAvC;AAA0CE,IAAAA,MAA1C;AAAkDM,IAAAA;AAAlD,MAAoEZ,KAA1E;AACA,QAAM;AAAEa,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA0BJ,UAAU,CAACH,KAAD,EAAQI,MAAR,EAAgBC,aAAhB,CAA1C;AACA,QAAM;AAAEjB,IAAAA,OAAF;AAAWD,IAAAA;AAAX,MAAsBD,iBAA5B;;AACA,MAAIQ,KAAK,KAAK,KAAd,EAAqB;AACjB,WAAO;AACHC,MAAAA,CAAC,EAAEA,CAAC,GAAGW,QAAQ,GAAG6B,UADf;AAEHtC,MAAAA,CAAC,EAAEA,CAAC,GAAGZ,4BAAJ,GAAmCE,MAAnC,GAA4CC,OAAO,GAAG;AAFtD,KAAP;AAIH;;AACD,MAAIM,KAAK,KAAK,QAAd,EAAwB;AACpB,WAAO;AACHC,MAAAA,CAAC,EAAEA,CAAC,GAAGW,QAAQ,GAAG6B,UADf;AAEHtC,MAAAA,CAAC,EAAEA,CAAC,GAAGZ,4BAAJ,GAAmCG,OAAO,GAAG;AAF7C,KAAP;AAIH;;AACD,MAAIM,KAAK,KAAK,MAAd,EAAsB;AAClB,WAAO;AACHC,MAAAA,CAAC,EAAEA,CAAC,GAAGd,sBAAsB,CAACkB,MAAD,CAA1B,GAAqCZ,MAArC,GAA8CC,OAAO,GAAG,CADxD;AAEHS,MAAAA,CAAC,EAAEA,CAAC,GAAGU,SAAS,GAAG4B,UAAhB,GAA6B/C;AAF7B,KAAP;AAIH;;AACD,MAAIM,KAAK,KAAK,OAAd,EAAuB;AACnB,WAAO;AACHC,MAAAA,CAAC,EAAEA,CAAC,GAAGK,KAAJ,IAAanB,sBAAsB,CAACkB,MAAD,CAAtB,GAAiCpB,OAAO,CAACsB,CAAzC,GAA6Cb,OAAO,GAAG,CAAvD,GAA2DD,MAAxE,CADA;AAEHU,MAAAA,CAAC,EAAEA,CAAC,GAAGU,SAAS,GAAG4B,UAAhB,GAA6B/C;AAF7B,KAAP;AAIH;AACJ;;AACD,OAAO,SAASgD,cAAT,CAAwB3B,GAAxB,EAA6BhB,KAA7B,EAAoC;AACvC,QAAM4C,gBAAgB,GAAGnC,mBAAmB,CAACT,KAAD,CAA5C;AACA,QAAM6C,aAAa,GAAG9C,gBAAgB,CAACC,KAAD,CAAtC;AACAe,EAAAA,UAAU,CAACC,GAAD,EAAM8B,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB/C,KAAlB,CAAd,EAAwC4C,gBAAxC,CAAN,CAAV;AACAX,EAAAA,OAAO,CAACjB,GAAD,EAAM8B,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB/C,KAAlB,CAAd,EAAwC6C,aAAxC,CAAN,CAAP;AACH;AACD,OAAO,SAASG,eAAT,CAAyBhC,GAAzB,EAA8BhB,KAA9B,EAAqC;AACxC,QAAM;AAAEE,IAAAA,CAAF;AAAKE,IAAAA;AAAL,MAAWqC,oBAAoB,CAACzC,KAAD,CAArC;AACA,QAAM;AAAEL,IAAAA,OAAF;AAAWG,IAAAA,YAAX;AAAyBD,IAAAA;AAAzB,MAAyCD,qBAA/C;AACA,QAAM;AAAEK,IAAAA,KAAF;AAAS0B,IAAAA,IAAT;AAAesB,IAAAA;AAAf,MAAyBjD,KAA/B;AACA,QAAMkD,UAAU,GAAG/D,YAAY,CAACwC,IAAD,CAA/B;AACA,QAAMpB,KAAK,GAAG2C,UAAU,GAAGvD,OAAO,GAAG,CAArC;AACA,QAAMgB,MAAM,GAAGnB,4BAA4B,GAAGG,OAAO,GAAG,CAAxD;AACA,QAAMwD,SAAS,GAAGlD,KAAlB;AACA,MAAImD,SAAS,GAAGlD,CAAhB;AACA,MAAImD,SAAS,GAAGjD,CAAhB;;AACA,MAAIH,KAAK,KAAK,KAAd,EAAqB;AACjBoD,IAAAA,SAAS,IAAIvD,YAAb;AACH,GAFD,MAGK,IAAIG,KAAK,KAAK,OAAd,EAAuB;AACxBmD,IAAAA,SAAS,IAAI7C,KAAK,GAAG,CAAR,GAAYT,YAAzB;AACAuD,IAAAA,SAAS,IAAI1C,MAAM,GAAG,CAAtB;AACH,GAHI,MAIA,IAAIV,KAAK,KAAK,MAAd,EAAsB;AACvBmD,IAAAA,SAAS,IAAI7C,KAAK,GAAG,CAAR,GAAYT,YAAzB;AACAuD,IAAAA,SAAS,IAAI1C,MAAM,GAAG,CAAtB;AACH,GAHI,MAIA,IAAIV,KAAK,KAAK,QAAd,EAAwB;AACzBoD,IAAAA,SAAS,IAAI1C,MAAM,GAAGb,YAAtB;AACH;;AACD,QAAMwD,MAAM,GAAG/D,oBAAoB,CAACU,KAAD,EAAQ;AAAEC,IAAAA,CAAF;AAAKE,IAAAA;AAAL,GAAR,EAAkB;AAAEmD,IAAAA,OAAO,EAAE,IAAX;AAAiBhD,IAAAA,KAAK,EAAEV,WAAxB;AAAqCc,IAAAA,MAAM,EAAEb;AAA7C,GAAlB,CAAnC;AACAR,EAAAA,WAAW,CAAC0B,GAAD,EAAM;AACbe,IAAAA,IAAI,EAAE,aADO;AAEbyB,IAAAA,MAAM,EAAE;AACJtD,MAAAA,CAAC,EAAEkD,SAAS,GAAG7C,KAAK,GAAG,CADnB;AAEJH,MAAAA,CAAC,EAAEiD,SAFC;AAGJ9C,MAAAA,KAHI;AAIJI,MAAAA,MAJI;AAKJ2C,MAAAA,MALI;AAMJH,MAAAA,SANI;AAOJM,MAAAA,IAAI,EAAER;AAPF,KAFK;AAWb5D,IAAAA,KAAK,EAAE;AACHsC,MAAAA,IADG;AAEHzB,MAAAA,CAAC,EAAEkD,SAFA;AAGHhD,MAAAA,CAAC,EAAEiD,SAAS,GAAG1C,MAAM,GAAG,CAHrB;AAIHqB,MAAAA,KAAK,EAAE,CACH;AACI0B,QAAAA,IAAI,EAAE,mBADV;AAEInB,QAAAA,SAAS,EAAE,SAFf;AAGIlB,QAAAA,SAAS,EAAE,QAHf;AAIIC,QAAAA,YAAY,EAAE;AAJlB,OADG;AAJJ;AAXM,GAAN,CAAX;AAyBH","sourcesContent":["import { padding } from \"../store/layout\";\nimport { getTextWidth, getMaxLengthLabelWidth } from \"../helpers/calculator\";\nimport { label, bubbleLabel } from \"./label\";\nimport { getBubbleArrowPoints } from \"./dataLabel\";\nexport const SPECTRUM_LEGEND_LABEL_HEIGHT = 12;\nexport const spectrumLegendBar = {\n    HEIGHT: 6,\n    PADDING: 5,\n};\nexport const spectrumLegendTooltip = {\n    HEIGHT: 28,\n    POINT_WIDTH: 8,\n    POINT_HEIGHT: 6,\n    PADDING: 6,\n};\nfunction getBarStartPoint(model) {\n    const { align, x: modelX, y: modelY, labels, width } = model;\n    const { PADDING } = spectrumLegendBar;\n    let x, y;\n    if (align === 'top') {\n        x = modelX;\n        y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING;\n    }\n    else if (align === 'bottom') {\n        x = modelX;\n        y = modelY + spectrumLegendTooltip.HEIGHT;\n    }\n    else if (align === 'left') {\n        x = modelX + getMaxLengthLabelWidth(labels) + PADDING;\n        y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT / 2;\n    }\n    else {\n        x =\n            modelX +\n                width -\n                (getMaxLengthLabelWidth(labels) + padding.X + PADDING * 2 + spectrumLegendBar.HEIGHT);\n        y = modelY + SPECTRUM_LEGEND_LABEL_HEIGHT / 2;\n    }\n    return { x, y };\n}\nfunction getLabelsStartPoint(model) {\n    const { align, x: modelX, y: modelY, labels, width } = model;\n    let x, y;\n    if (align === 'top') {\n        x = modelX;\n        y = modelY;\n    }\n    else if (align === 'bottom') {\n        x = modelX;\n        y =\n            modelY + spectrumLegendTooltip.HEIGHT + spectrumLegendBar.HEIGHT + spectrumLegendBar.PADDING;\n    }\n    else if (align === 'left') {\n        x = modelX + getMaxLengthLabelWidth(labels);\n        y = modelY;\n    }\n    else {\n        x = modelX + width - getMaxLengthLabelWidth(labels) - padding.X;\n        y = modelY;\n    }\n    return { x, y };\n}\nfunction getBarSize(width, height, verticalAlign) {\n    const { HEIGHT } = spectrumLegendBar;\n    const barWidth = verticalAlign ? width : HEIGHT;\n    const barHeight = verticalAlign ? HEIGHT : height - SPECTRUM_LEGEND_LABEL_HEIGHT;\n    return { barWidth, barHeight };\n}\nfunction drawLabels(ctx, model) {\n    const { labels, align, x, y, width, height, verticalAlign } = model;\n    const { barWidth, barHeight } = getBarSize(width, height, verticalAlign);\n    const labelSize = labels.length - 1;\n    const textBaseStyleMap = {\n        left: {\n            textAlign: 'right',\n            textBaseline: 'top',\n        },\n        right: {\n            textAlign: 'left',\n            textBaseline: 'top',\n        },\n        top: {\n            textAlign: 'center',\n            textBaseline: 'top',\n        },\n        bottom: {\n            textAlign: 'center',\n            textBaseline: 'top',\n        },\n    };\n    labels.forEach((text, idx) => {\n        const startX = verticalAlign ? x + (barWidth / labelSize) * idx : x;\n        const startY = verticalAlign ? y : y + (barHeight / labelSize) * idx;\n        label(ctx, {\n            type: 'label',\n            x: startX,\n            y: startY,\n            text,\n            style: ['default', textBaseStyleMap[align]],\n        });\n    });\n}\nfunction drawBar(ctx, model) {\n    const { width, height, startColor, endColor, x, y, verticalAlign } = model;\n    const { barWidth, barHeight } = getBarSize(width, height, verticalAlign);\n    const gradient = verticalAlign\n        ? ctx.createLinearGradient(x, y, x + barWidth, y)\n        : ctx.createLinearGradient(x, y, x, y + barHeight);\n    gradient.addColorStop(0, startColor);\n    gradient.addColorStop(1, endColor);\n    ctx.fillStyle = gradient;\n    ctx.fillRect(x, y, barWidth, barHeight);\n}\nfunction getTooltipArrowPoint(model) {\n    const { align, colorRatio, width, height, x, y, labels, verticalAlign } = model;\n    const { barWidth, barHeight } = getBarSize(width, height, verticalAlign);\n    const { PADDING, HEIGHT } = spectrumLegendBar;\n    if (align === 'top') {\n        return {\n            x: x + barWidth * colorRatio,\n            y: y + SPECTRUM_LEGEND_LABEL_HEIGHT + HEIGHT + PADDING * 2,\n        };\n    }\n    if (align === 'bottom') {\n        return {\n            x: x + barWidth * colorRatio,\n            y: y + SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING * 2,\n        };\n    }\n    if (align === 'left') {\n        return {\n            x: x + getMaxLengthLabelWidth(labels) + HEIGHT + PADDING * 2,\n            y: y + barHeight * colorRatio + PADDING,\n        };\n    }\n    if (align === 'right') {\n        return {\n            x: x + width - (getMaxLengthLabelWidth(labels) + padding.X + PADDING * 3 + HEIGHT),\n            y: y + barHeight * colorRatio + PADDING,\n        };\n    }\n}\nexport function spectrumLegend(ctx, model) {\n    const labelsStartPoint = getLabelsStartPoint(model);\n    const barStartPoint = getBarStartPoint(model);\n    drawLabels(ctx, Object.assign(Object.assign({}, model), labelsStartPoint));\n    drawBar(ctx, Object.assign(Object.assign({}, model), barStartPoint));\n}\nexport function spectrumTooltip(ctx, model) {\n    const { x, y } = getTooltipArrowPoint(model);\n    const { PADDING, POINT_HEIGHT, POINT_WIDTH } = spectrumLegendTooltip;\n    const { align, text, color } = model;\n    const labelWidth = getTextWidth(text);\n    const width = labelWidth + PADDING * 2;\n    const height = SPECTRUM_LEGEND_LABEL_HEIGHT + PADDING * 2;\n    const direction = align;\n    let boxStartX = x;\n    let boxStartY = y;\n    if (align === 'top') {\n        boxStartY += POINT_HEIGHT;\n    }\n    else if (align === 'right') {\n        boxStartX -= width / 2 + POINT_HEIGHT;\n        boxStartY -= height / 2;\n    }\n    else if (align === 'left') {\n        boxStartX += width / 2 + POINT_HEIGHT;\n        boxStartY -= height / 2;\n    }\n    else if (align === 'bottom') {\n        boxStartY -= height + POINT_HEIGHT;\n    }\n    const points = getBubbleArrowPoints(align, { x, y }, { visible: true, width: POINT_WIDTH, height: POINT_HEIGHT });\n    bubbleLabel(ctx, {\n        type: 'bubbleLabel',\n        bubble: {\n            x: boxStartX - width / 2,\n            y: boxStartY,\n            width,\n            height,\n            points,\n            direction,\n            fill: color,\n        },\n        label: {\n            text,\n            x: boxStartX,\n            y: boxStartY + height / 2,\n            style: [\n                {\n                    font: 'normal 11px Arial',\n                    fillStyle: '#333333',\n                    textAlign: 'center',\n                    textBaseline: 'middle',\n                },\n            ],\n        },\n    });\n}\n"]},"metadata":{},"sourceType":"module"}