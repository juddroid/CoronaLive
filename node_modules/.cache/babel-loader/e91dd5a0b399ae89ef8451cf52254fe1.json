{"ast":null,"code":"import { deepCopy, deepMergedCopy } from \"../helpers/utils\";\n\nfunction getOptionsBySize(size, options) {\n  var _a;\n\n  const rules = (_a = options.responsive) === null || _a === void 0 ? void 0 : _a.rules;\n  return Array.isArray(rules) ? rules.reduce((acc, cur) => {\n    return cur.condition(size) ? deepMergedCopy(acc, cur.options) : acc;\n  }, options) : options;\n}\n\nfunction getSize(usingContainerSize, containerSize, chartSize) {\n  var _a, _b;\n\n  const {\n    width: usingContainerWidth,\n    height: usingContainerHeight\n  } = usingContainerSize;\n  return {\n    width: usingContainerWidth ? containerSize.width : (_a = chartSize) === null || _a === void 0 ? void 0 : _a.width,\n    height: usingContainerHeight ? containerSize.height : (_b = chartSize) === null || _b === void 0 ? void 0 : _b.height\n  };\n}\n\nconst optionsData = {\n  name: 'options',\n  state: ({\n    options\n  }) => ({\n    originalOptions: deepCopy(options),\n    options\n  }),\n  action: {\n    setOptions({\n      state\n    }) {\n      const {\n        width,\n        height\n      } = state.chart;\n\n      if (width < 0 || height < 0) {\n        return;\n      }\n\n      state.options = getOptionsBySize({\n        width,\n        height\n      }, state.originalOptions);\n    },\n\n    initOptions({\n      initStoreState,\n      state\n    }, {\n      options,\n      containerSize\n    }) {\n      initStoreState.options = options;\n      state.originalOptions = deepCopy(options);\n      const {\n        usingContainerSize,\n        originalOptions\n      } = state;\n      const size = getSize(usingContainerSize, containerSize, {\n        width: originalOptions.chart.width,\n        height: originalOptions.chart.height\n      });\n      this.dispatch('setChartSize', size);\n    },\n\n    updateOptions({\n      state,\n      initStoreState\n    }, {\n      options,\n      containerSize\n    }) {\n      var _a, _b;\n\n      initStoreState.options = deepMergedCopy(initStoreState.options, options);\n      state.originalOptions = deepMergedCopy(state.originalOptions, options);\n      const {\n        usingContainerSize,\n        originalOptions\n      } = state;\n      const size = getSize(usingContainerSize, containerSize, {\n        width: (_a = originalOptions.chart) === null || _a === void 0 ? void 0 : _a.width,\n        height: (_b = originalOptions.chart) === null || _b === void 0 ? void 0 : _b.height\n      });\n      this.dispatch('setChartSize', size);\n      this.dispatch('initThemeState');\n    }\n\n  },\n  observe: {\n    updateOptions() {\n      this.dispatch('setOptions');\n    }\n\n  }\n};\nexport default optionsData;","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/store/options.js"],"names":["deepCopy","deepMergedCopy","getOptionsBySize","size","options","_a","rules","responsive","Array","isArray","reduce","acc","cur","condition","getSize","usingContainerSize","containerSize","chartSize","_b","width","usingContainerWidth","height","usingContainerHeight","optionsData","name","state","originalOptions","action","setOptions","chart","initOptions","initStoreState","dispatch","updateOptions","observe"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,kBAAzC;;AACA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,OAAhC,EAAyC;AACrC,MAAIC,EAAJ;;AACA,QAAMC,KAAK,GAAG,CAACD,EAAE,GAAGD,OAAO,CAACG,UAAd,MAA8B,IAA9B,IAAsCF,EAAE,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+DA,EAAE,CAACC,KAAhF;AACA,SAAOE,KAAK,CAACC,OAAN,CAAcH,KAAd,IACDA,KAAK,CAACI,MAAN,CAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzB,WAAOA,GAAG,CAACC,SAAJ,CAAcV,IAAd,IAAsBF,cAAc,CAACU,GAAD,EAAMC,GAAG,CAACR,OAAV,CAApC,GAAyDO,GAAhE;AACH,GAFC,EAECP,OAFD,CADC,GAIDA,OAJN;AAKH;;AACD,SAASU,OAAT,CAAiBC,kBAAjB,EAAqCC,aAArC,EAAoDC,SAApD,EAA+D;AAC3D,MAAIZ,EAAJ,EAAQa,EAAR;;AACA,QAAM;AAAEC,IAAAA,KAAK,EAAEC,mBAAT;AAA8BC,IAAAA,MAAM,EAAEC;AAAtC,MAA+DP,kBAArE;AACA,SAAO;AACHI,IAAAA,KAAK,EAAEC,mBAAmB,GAAGJ,aAAa,CAACG,KAAjB,GAAyB,CAACd,EAAE,GAAGY,SAAN,MAAqB,IAArB,IAA6BZ,EAAE,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,EAAE,CAACc,KADzG;AAEHE,IAAAA,MAAM,EAAEC,oBAAoB,GAAGN,aAAa,CAACK,MAAjB,GAA0B,CAACH,EAAE,GAAGD,SAAN,MAAqB,IAArB,IAA6BC,EAAE,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,EAAE,CAACG;AAF5G,GAAP;AAIH;;AACD,MAAME,WAAW,GAAG;AAChBC,EAAAA,IAAI,EAAE,SADU;AAEhBC,EAAAA,KAAK,EAAE,CAAC;AAAErB,IAAAA;AAAF,GAAD,MAAkB;AACrBsB,IAAAA,eAAe,EAAE1B,QAAQ,CAACI,OAAD,CADJ;AAErBA,IAAAA;AAFqB,GAAlB,CAFS;AAMhBuB,EAAAA,MAAM,EAAE;AACJC,IAAAA,UAAU,CAAC;AAAEH,MAAAA;AAAF,KAAD,EAAY;AAClB,YAAM;AAAEN,QAAAA,KAAF;AAASE,QAAAA;AAAT,UAAoBI,KAAK,CAACI,KAAhC;;AACA,UAAIV,KAAK,GAAG,CAAR,IAAaE,MAAM,GAAG,CAA1B,EAA6B;AACzB;AACH;;AACDI,MAAAA,KAAK,CAACrB,OAAN,GAAgBF,gBAAgB,CAAC;AAAEiB,QAAAA,KAAF;AAASE,QAAAA;AAAT,OAAD,EAAoBI,KAAK,CAACC,eAA1B,CAAhC;AACH,KAPG;;AAQJI,IAAAA,WAAW,CAAC;AAAEC,MAAAA,cAAF;AAAkBN,MAAAA;AAAlB,KAAD,EAA4B;AAAErB,MAAAA,OAAF;AAAWY,MAAAA;AAAX,KAA5B,EAAwD;AAC/De,MAAAA,cAAc,CAAC3B,OAAf,GAAyBA,OAAzB;AACAqB,MAAAA,KAAK,CAACC,eAAN,GAAwB1B,QAAQ,CAACI,OAAD,CAAhC;AACA,YAAM;AAAEW,QAAAA,kBAAF;AAAsBW,QAAAA;AAAtB,UAA0CD,KAAhD;AACA,YAAMtB,IAAI,GAAGW,OAAO,CAACC,kBAAD,EAAqBC,aAArB,EAAoC;AACpDG,QAAAA,KAAK,EAAEO,eAAe,CAACG,KAAhB,CAAsBV,KADuB;AAEpDE,QAAAA,MAAM,EAAEK,eAAe,CAACG,KAAhB,CAAsBR;AAFsB,OAApC,CAApB;AAIA,WAAKW,QAAL,CAAc,cAAd,EAA8B7B,IAA9B;AACH,KAjBG;;AAkBJ8B,IAAAA,aAAa,CAAC;AAAER,MAAAA,KAAF;AAASM,MAAAA;AAAT,KAAD,EAA4B;AAAE3B,MAAAA,OAAF;AAAWY,MAAAA;AAAX,KAA5B,EAAwD;AACjE,UAAIX,EAAJ,EAAQa,EAAR;;AACAa,MAAAA,cAAc,CAAC3B,OAAf,GAAyBH,cAAc,CAAC8B,cAAc,CAAC3B,OAAhB,EAAyBA,OAAzB,CAAvC;AACAqB,MAAAA,KAAK,CAACC,eAAN,GAAwBzB,cAAc,CAACwB,KAAK,CAACC,eAAP,EAAwBtB,OAAxB,CAAtC;AACA,YAAM;AAAEW,QAAAA,kBAAF;AAAsBW,QAAAA;AAAtB,UAA0CD,KAAhD;AACA,YAAMtB,IAAI,GAAGW,OAAO,CAACC,kBAAD,EAAqBC,aAArB,EAAoC;AACpDG,QAAAA,KAAK,EAAE,CAACd,EAAE,GAAGqB,eAAe,CAACG,KAAtB,MAAiC,IAAjC,IAAyCxB,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACc,KADxB;AAEpDE,QAAAA,MAAM,EAAE,CAACH,EAAE,GAAGQ,eAAe,CAACG,KAAtB,MAAiC,IAAjC,IAAyCX,EAAE,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,EAAE,CAACG;AAFzB,OAApC,CAApB;AAIA,WAAKW,QAAL,CAAc,cAAd,EAA8B7B,IAA9B;AACA,WAAK6B,QAAL,CAAc,gBAAd;AACH;;AA7BG,GANQ;AAqChBE,EAAAA,OAAO,EAAE;AACLD,IAAAA,aAAa,GAAG;AACZ,WAAKD,QAAL,CAAc,YAAd;AACH;;AAHI;AArCO,CAApB;AA2CA,eAAeT,WAAf","sourcesContent":["import { deepCopy, deepMergedCopy } from \"../helpers/utils\";\nfunction getOptionsBySize(size, options) {\n    var _a;\n    const rules = (_a = options.responsive) === null || _a === void 0 ? void 0 : _a.rules;\n    return Array.isArray(rules)\n        ? rules.reduce((acc, cur) => {\n            return cur.condition(size) ? deepMergedCopy(acc, cur.options) : acc;\n        }, options)\n        : options;\n}\nfunction getSize(usingContainerSize, containerSize, chartSize) {\n    var _a, _b;\n    const { width: usingContainerWidth, height: usingContainerHeight } = usingContainerSize;\n    return {\n        width: usingContainerWidth ? containerSize.width : (_a = chartSize) === null || _a === void 0 ? void 0 : _a.width,\n        height: usingContainerHeight ? containerSize.height : (_b = chartSize) === null || _b === void 0 ? void 0 : _b.height,\n    };\n}\nconst optionsData = {\n    name: 'options',\n    state: ({ options }) => ({\n        originalOptions: deepCopy(options),\n        options,\n    }),\n    action: {\n        setOptions({ state }) {\n            const { width, height } = state.chart;\n            if (width < 0 || height < 0) {\n                return;\n            }\n            state.options = getOptionsBySize({ width, height }, state.originalOptions);\n        },\n        initOptions({ initStoreState, state }, { options, containerSize }) {\n            initStoreState.options = options;\n            state.originalOptions = deepCopy(options);\n            const { usingContainerSize, originalOptions } = state;\n            const size = getSize(usingContainerSize, containerSize, {\n                width: originalOptions.chart.width,\n                height: originalOptions.chart.height,\n            });\n            this.dispatch('setChartSize', size);\n        },\n        updateOptions({ state, initStoreState }, { options, containerSize }) {\n            var _a, _b;\n            initStoreState.options = deepMergedCopy(initStoreState.options, options);\n            state.originalOptions = deepMergedCopy(state.originalOptions, options);\n            const { usingContainerSize, originalOptions } = state;\n            const size = getSize(usingContainerSize, containerSize, {\n                width: (_a = originalOptions.chart) === null || _a === void 0 ? void 0 : _a.width,\n                height: (_b = originalOptions.chart) === null || _b === void 0 ? void 0 : _b.height,\n            });\n            this.dispatch('setChartSize', size);\n            this.dispatch('initThemeState');\n        },\n    },\n    observe: {\n        updateOptions() {\n            this.dispatch('setOptions');\n        },\n    },\n};\nexport default optionsData;\n"]},"metadata":{},"sourceType":"module"}