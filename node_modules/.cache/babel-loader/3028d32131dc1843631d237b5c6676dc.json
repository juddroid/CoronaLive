{"ast":null,"code":"import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport scale from \"../store/scale\";\nimport radialAxes from \"../store/radialAxes\";\nimport Legend from \"../component/legend\";\nimport RadarSeries from \"../component/radarSeries\";\nimport RadialPlot from \"../component/radialPlot\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport Tooltip from \"../component/tooltip\";\nimport RadialAxis from \"../component/radialAxis\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as polygonBrush from \"../brushes/polygon\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as lineSeriesBrush from \"../brushes/lineSeries\";\n/**\n * @class\n * @classdesc Radar Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Radar Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {Array<number>} props.data.series.data - Series data.\n *   @param {Object} [props.options] - Options for making Radar Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {boolean} [props.options.series.showDot=false] - Whether to show dot or not.\n *       @param {boolean} [props.options.series.showArea=false] - Whether to fill area or not.\n *     @param {Object} [props.options.circularAxis]\n *       @param {Object} [props.options.circularAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.circularAxis.label] - Option to adjust label interval.\n *     @param {Object} [props.options.verticalAxis]\n *       @param {Object} [props.options.verticalAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.verticalAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.verticalAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.type] - Radar plot type. 'spiderweb', 'circle' is available.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Radar Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.circularAxis] - Circular Axis theme.\n *       @param {Object} [props.options.theme.verticalAxis] - Vertical Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\nexport default class RadarChart extends Chart {\n  constructor({\n    el,\n    options,\n    data\n  }) {\n    super({\n      el,\n      options,\n      series: {\n        radar: data.series\n      },\n      categories: data.categories,\n      modules: [dataRange, scale, radialAxes]\n    });\n    /**\n     * Add data.\n     * @param {Array<number>} data - Array of data to be added.\n     * @param {string} category - Category to be added.\n     * @api\n     * @example\n     * chart.addData([10, 20], '6');\n     */\n\n    this.addData = (data, category) => {\n      this.animationControlFlag.updating = true;\n      this.resetSeries();\n      this.store.dispatch('addData', {\n        data,\n        category\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options.\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   series: {\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options.\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n     *      @param {number} seriesInfo.seriesIndex - Index of series.\n     *      @param {number} seriesInfo.index - Index of data within series.\n     * @api\n     * @example\n     * chart.showTooltip({index: 1, seriesIndex: 2});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), {\n        state: this.store.state\n      }));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(Legend);\n    this.componentManager.add(RadialPlot);\n    this.componentManager.add(RadialAxis);\n    this.componentManager.add(RadarSeries);\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, legendBrush, labelBrush, exportMenuBrush, polygonBrush, axisBrush, lineSeriesBrush]);\n  }\n  /**\n   * Add series.\n   * @param {Object} data - Data to be added.\n   *   @param {string} data.name - Series name.\n   *   @param {Array<number>} data.data - Array of data to be added.\n   * @api\n   * @example\n   * chart.addSeries({\n   *   name: 'newSeries',\n   *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],\n   * });\n   */\n\n\n  addSeries(data) {\n    this.resetSeries();\n    this.store.dispatch('addSeries', {\n      data\n    });\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set.\n   * @api\n   * @example\n   * chart.setData({\n   *   categories: ['1', '2', '3'],\n   *   series: [\n   *     {\n   *       name: 'new series',\n   *       data: [1, 2, 3],\n   *     },\n   *     {\n   *       name: 'new series2',\n   *       data: [4, 5, 6],\n   *     }\n   *   ]\n   * });\n   */\n\n\n  setData(data) {\n    const {\n      categories,\n      series\n    } = data;\n    this.resetSeries();\n    this.store.dispatch('setData', {\n      series: {\n        radar: series\n      },\n      categories\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/radarChart.js"],"names":["Chart","dataRange","scale","radialAxes","Legend","RadarSeries","RadialPlot","Title","ExportMenu","SelectedSeries","HoveredSeries","Tooltip","RadialAxis","Background","NoDataText","basicBrush","legendBrush","labelBrush","exportMenuBrush","polygonBrush","axisBrush","lineSeriesBrush","RadarChart","constructor","el","options","data","series","radar","categories","modules","addData","category","animationControlFlag","updating","resetSeries","store","dispatch","setOptions","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","Object","assign","state","hideTooltip","initialize","componentManager","add","chartEl","painter","addGroups","addSeries","setData"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport dataRange from \"../store/dataRange\";\nimport scale from \"../store/scale\";\nimport radialAxes from \"../store/radialAxes\";\nimport Legend from \"../component/legend\";\nimport RadarSeries from \"../component/radarSeries\";\nimport RadialPlot from \"../component/radialPlot\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport Tooltip from \"../component/tooltip\";\nimport RadialAxis from \"../component/radialAxis\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as polygonBrush from \"../brushes/polygon\";\nimport * as axisBrush from \"../brushes/axis\";\nimport * as lineSeriesBrush from \"../brushes/lineSeries\";\n/**\n * @class\n * @classdesc Radar Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Radar Chart.\n *     @param {Array<string>} props.data.categories - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {Array<number>} props.data.series.data - Series data.\n *   @param {Object} [props.options] - Options for making Radar Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {boolean} [props.options.series.showDot=false] - Whether to show dot or not.\n *       @param {boolean} [props.options.series.showArea=false] - Whether to fill area or not.\n *     @param {Object} [props.options.circularAxis]\n *       @param {Object} [props.options.circularAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.circularAxis.label] - Option to adjust label interval.\n *     @param {Object} [props.options.verticalAxis]\n *       @param {Object} [props.options.verticalAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.verticalAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.verticalAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.type] - Radar plot type. 'spiderweb', 'circle' is available.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Radar Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.circularAxis] - Circular Axis theme.\n *       @param {Object} [props.options.theme.verticalAxis] - Vertical Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class RadarChart extends Chart {\n    constructor({ el, options, data }) {\n        super({\n            el,\n            options,\n            series: {\n                radar: data.series,\n            },\n            categories: data.categories,\n            modules: [dataRange, scale, radialAxes],\n        });\n        /**\n         * Add data.\n         * @param {Array<number>} data - Array of data to be added.\n         * @param {string} category - Category to be added.\n         * @api\n         * @example\n         * chart.addData([10, 20], '6');\n         */\n        this.addData = (data, category) => {\n            this.animationControlFlag.updating = true;\n            this.resetSeries();\n            this.store.dispatch('addData', { data, category });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options.\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   series: {\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options.\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n         *      @param {number} seriesInfo.seriesIndex - Index of series.\n         *      @param {number} seriesInfo.index - Index of data within series.\n         * @api\n         * @example\n         * chart.showTooltip({index: 1, seriesIndex: 2});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(Legend);\n        this.componentManager.add(RadialPlot);\n        this.componentManager.add(RadialAxis);\n        this.componentManager.add(RadarSeries);\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            polygonBrush,\n            axisBrush,\n            lineSeriesBrush,\n        ]);\n    }\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     *   @param {string} data.name - Series name.\n     *   @param {Array<number>} data.data - Array of data to be added.\n     * @api\n     * @example\n     * chart.addSeries({\n     *   name: 'newSeries',\n     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],\n     * });\n     */\n    addSeries(data) {\n        this.resetSeries();\n        this.store.dispatch('addSeries', { data });\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set.\n     * @api\n     * @example\n     * chart.setData({\n     *   categories: ['1', '2', '3'],\n     *   series: [\n     *     {\n     *       name: 'new series',\n     *       data: [1, 2, 3],\n     *     },\n     *     {\n     *       name: 'new series2',\n     *       data: [4, 5, 6],\n     *     }\n     *   ]\n     * });\n     */\n    setData(data) {\n        const { categories, series } = data;\n        this.resetSeries();\n        this.store.dispatch('setData', { series: { radar: series }, categories });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}