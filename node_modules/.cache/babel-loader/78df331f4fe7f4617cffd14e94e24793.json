{"ast":null,"code":"import { rgbToHEX } from \"./color\";\nimport { isNull, isString, isUndefined } from \"./utils\";\nexport function makeDistances(startRGB, endRGB) {\n  return startRGB.map((value, index) => endRGB[index] - value);\n}\nexport function getColorRatio(limit, value) {\n  if (isUndefined(value)) {\n    return;\n  }\n\n  const divNumber = Math.abs(limit.max - limit.min);\n  return divNumber && !isNull(value) ? (value - limit.min) / divNumber : 0;\n}\nexport function getSpectrumColor(ratio, distances, startRGB) {\n  const rgbColor = startRGB.map((start, index) => start + parseInt(String(distances[index] * ratio), 10));\n  const color = rgbToHEX(...rgbColor);\n  return isString(color) ? color : '';\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/helpers/colorSpectrum.js"],"names":["rgbToHEX","isNull","isString","isUndefined","makeDistances","startRGB","endRGB","map","value","index","getColorRatio","limit","divNumber","Math","abs","max","min","getSpectrumColor","ratio","distances","rgbColor","start","parseInt","String","color"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,WAA3B,QAA8C,SAA9C;AACA,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,MAAjC,EAAyC;AAC5C,SAAOD,QAAQ,CAACE,GAAT,CAAa,CAACC,KAAD,EAAQC,KAAR,KAAkBH,MAAM,CAACG,KAAD,CAAN,GAAgBD,KAA/C,CAAP;AACH;AACD,OAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA8BH,KAA9B,EAAqC;AACxC,MAAIL,WAAW,CAACK,KAAD,CAAf,EAAwB;AACpB;AACH;;AACD,QAAMI,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASH,KAAK,CAACI,GAAN,GAAYJ,KAAK,CAACK,GAA3B,CAAlB;AACA,SAAOJ,SAAS,IAAI,CAACX,MAAM,CAACO,KAAD,CAApB,GAA8B,CAACA,KAAK,GAAGG,KAAK,CAACK,GAAf,IAAsBJ,SAApD,GAAgE,CAAvE;AACH;AACD,OAAO,SAASK,gBAAT,CAA0BC,KAA1B,EAAiCC,SAAjC,EAA4Cd,QAA5C,EAAsD;AACzD,QAAMe,QAAQ,GAAGf,QAAQ,CAACE,GAAT,CAAa,CAACc,KAAD,EAAQZ,KAAR,KAAkBY,KAAK,GAAGC,QAAQ,CAACC,MAAM,CAACJ,SAAS,CAACV,KAAD,CAAT,GAAmBS,KAApB,CAAP,EAAmC,EAAnC,CAA/C,CAAjB;AACA,QAAMM,KAAK,GAAGxB,QAAQ,CAAC,GAAGoB,QAAJ,CAAtB;AACA,SAAOlB,QAAQ,CAACsB,KAAD,CAAR,GAAkBA,KAAlB,GAA0B,EAAjC;AACH","sourcesContent":["import { rgbToHEX } from \"./color\";\nimport { isNull, isString, isUndefined } from \"./utils\";\nexport function makeDistances(startRGB, endRGB) {\n    return startRGB.map((value, index) => endRGB[index] - value);\n}\nexport function getColorRatio(limit, value) {\n    if (isUndefined(value)) {\n        return;\n    }\n    const divNumber = Math.abs(limit.max - limit.min);\n    return divNumber && !isNull(value) ? (value - limit.min) / divNumber : 0;\n}\nexport function getSpectrumColor(ratio, distances, startRGB) {\n    const rgbColor = startRGB.map((start, index) => start + parseInt(String(distances[index] * ratio), 10));\n    const color = rgbToHEX(...rgbColor);\n    return isString(color) ? color : '';\n}\n"]},"metadata":{},"sourceType":"module"}