{"ast":null,"code":"import { isNull, isUndefined, last } from \"../helpers/utils\";\nconst TREEMAP_ID_PREFIX = '__TOAST_UI_TREEMAP';\nexport const TREEMAP_ROOT_ID = `${TREEMAP_ID_PREFIX}_ROOT`;\n\nfunction makeTreeModel(series, indexes, depth, parentId) {\n  var _a;\n\n  const idx = last(indexes);\n  const id = parentId ? `${parentId}_${idx}` : `${TREEMAP_ID_PREFIX}_${idx}`;\n  const {\n    colorValue\n  } = series;\n  const models = [{\n    label: series.label,\n    hasChild: !!series.children,\n    id,\n    indexes,\n    parentId: parentId ? parentId : TREEMAP_ROOT_ID,\n    depth,\n    data: (_a = series.data, _a !== null && _a !== void 0 ? _a : 0),\n    colorValue\n  }];\n\n  if (series.children) {\n    series.children.forEach((child, childIdx) => {\n      if (!isNull(child.data)) {\n        models.push(...makeTreeModel(child, [...indexes, childIdx], depth + 1, id));\n      }\n    });\n  }\n\n  return models;\n}\n\nfunction setParentSeriesData(treemapSeries) {\n  treemapSeries.forEach(({\n    parentId,\n    data\n  }) => {\n    if (parentId !== TREEMAP_ROOT_ID) {\n      treemapSeries.find(({\n        id\n      }) => id === parentId).data += data;\n    }\n  });\n}\n\nfunction setParentColorValue(treemapSeries) {\n  treemapSeries.forEach(datum => {\n    const {\n      id,\n      colorValue\n    } = datum;\n\n    if (isUndefined(colorValue)) {\n      const series = treemapSeries.filter(({\n        parentId\n      }) => parentId === id);\n      const totalColorValue = series.reduce((acc, cur) => {\n        return acc + (isUndefined(cur.colorValue) ? 0 : cur.colorValue);\n      }, 0);\n      datum.colorValue = totalColorValue / series.length;\n    }\n  });\n}\n\nfunction setRatio(treemapSeries) {\n  const rootTotal = treemapSeries.filter(({\n    parentId\n  }) => parentId === TREEMAP_ROOT_ID).reduce((acc, {\n    data\n  }) => acc + data, 0);\n  treemapSeries.forEach(series => {\n    const total = series.parentId === TREEMAP_ROOT_ID ? rootTotal : treemapSeries.find(({\n      id\n    }) => id === series.parentId).data;\n    series.ratio = series.data / total;\n  });\n}\n\nfunction makeTreemapSeries(series, options) {\n  var _a;\n\n  if (!series.treemap) {\n    return [];\n  }\n\n  const treemapSeries = series.treemap.data.filter(datum => !isNull(datum.data)).map((datum, idx) => makeTreeModel(datum, [idx], 0)).flatMap(s => s).sort((a, b) => b.depth - a.depth);\n  setParentSeriesData(treemapSeries);\n  setRatio(treemapSeries);\n\n  if ((_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue) {\n    setParentColorValue(treemapSeries);\n  }\n\n  return treemapSeries;\n}\n\nconst treemapSeriesData = {\n  name: 'treemapSeriesData',\n  state: () => ({\n    treemapSeries: []\n  }),\n  action: {\n    setTreemapSeriesData({\n      state\n    }) {\n      state.treemapSeries = makeTreemapSeries(state.series, state.options);\n    }\n\n  },\n  observe: {\n    updateTreemapSeriesData() {\n      this.dispatch('setTreemapSeriesData');\n    }\n\n  }\n};\nexport default treemapSeriesData;","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/store/treemapSeriesData.js"],"names":["isNull","isUndefined","last","TREEMAP_ID_PREFIX","TREEMAP_ROOT_ID","makeTreeModel","series","indexes","depth","parentId","_a","idx","id","colorValue","models","label","hasChild","children","data","forEach","child","childIdx","push","setParentSeriesData","treemapSeries","find","setParentColorValue","datum","filter","totalColorValue","reduce","acc","cur","length","setRatio","rootTotal","total","ratio","makeTreemapSeries","options","treemap","map","flatMap","s","sort","a","b","useColorValue","treemapSeriesData","name","state","action","setTreemapSeriesData","observe","updateTreemapSeriesData","dispatch"],"mappings":"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","sourcesContent":["import { isNull, isUndefined, last } from \"../helpers/utils\";\nconst TREEMAP_ID_PREFIX = '__TOAST_UI_TREEMAP';\nexport const TREEMAP_ROOT_ID = `${TREEMAP_ID_PREFIX}_ROOT`;\nfunction makeTreeModel(series, indexes, depth, parentId) {\n    var _a;\n    const idx = last(indexes);\n    const id = parentId ? `${parentId}_${idx}` : `${TREEMAP_ID_PREFIX}_${idx}`;\n    const { colorValue } = series;\n    const models = [\n        {\n            label: series.label,\n            hasChild: !!series.children,\n            id,\n            indexes,\n            parentId: parentId ? parentId : TREEMAP_ROOT_ID,\n            depth,\n            data: (_a = series.data, (_a !== null && _a !== void 0 ? _a : 0)),\n            colorValue,\n        },\n    ];\n    if (series.children) {\n        series.children.forEach((child, childIdx) => {\n            if (!isNull(child.data)) {\n                models.push(...makeTreeModel(child, [...indexes, childIdx], depth + 1, id));\n            }\n        });\n    }\n    return models;\n}\nfunction setParentSeriesData(treemapSeries) {\n    treemapSeries.forEach(({ parentId, data }) => {\n        if (parentId !== TREEMAP_ROOT_ID) {\n            treemapSeries.find(({ id }) => id === parentId).data += data;\n        }\n    });\n}\nfunction setParentColorValue(treemapSeries) {\n    treemapSeries.forEach((datum) => {\n        const { id, colorValue } = datum;\n        if (isUndefined(colorValue)) {\n            const series = treemapSeries.filter(({ parentId }) => parentId === id);\n            const totalColorValue = series.reduce((acc, cur) => {\n                return acc + (isUndefined(cur.colorValue) ? 0 : cur.colorValue);\n            }, 0);\n            datum.colorValue = totalColorValue / series.length;\n        }\n    });\n}\nfunction setRatio(treemapSeries) {\n    const rootTotal = treemapSeries\n        .filter(({ parentId }) => parentId === TREEMAP_ROOT_ID)\n        .reduce((acc, { data }) => acc + data, 0);\n    treemapSeries.forEach((series) => {\n        const total = series.parentId === TREEMAP_ROOT_ID\n            ? rootTotal\n            : treemapSeries.find(({ id }) => id === series.parentId).data;\n        series.ratio = series.data / total;\n    });\n}\nfunction makeTreemapSeries(series, options) {\n    var _a;\n    if (!series.treemap) {\n        return [];\n    }\n    const treemapSeries = series.treemap.data\n        .filter((datum) => !isNull(datum.data))\n        .map((datum, idx) => makeTreeModel(datum, [idx], 0))\n        .flatMap((s) => s)\n        .sort((a, b) => b.depth - a.depth);\n    setParentSeriesData(treemapSeries);\n    setRatio(treemapSeries);\n    if ((_a = options.series) === null || _a === void 0 ? void 0 : _a.useColorValue) {\n        setParentColorValue(treemapSeries);\n    }\n    return treemapSeries;\n}\nconst treemapSeriesData = {\n    name: 'treemapSeriesData',\n    state: () => ({\n        treemapSeries: [],\n    }),\n    action: {\n        setTreemapSeriesData({ state }) {\n            state.treemapSeries = makeTreemapSeries(state.series, state.options);\n        },\n    },\n    observe: {\n        updateTreemapSeriesData() {\n            this.dispatch('setTreemapSeriesData');\n        },\n    },\n};\nexport default treemapSeriesData;\n"]},"metadata":{},"sourceType":"module"}