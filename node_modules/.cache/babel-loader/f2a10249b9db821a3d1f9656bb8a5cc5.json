{"ast":null,"code":"import Chart from \"./chart\";\nimport nestedPieSeriesData from \"../store/nestedPieSeriesData\";\nimport Tooltip from \"../component/tooltip\";\nimport Legend from \"../component/legend\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport PieSeries from \"../component/pieSeries\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as sectorBrush from \"../brushes/sector\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\n/**\n * @class\n * @classdesc NestedPie Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making NestedPie Chart.\n *     @param {Array<string>} [props.data.categories] - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {number} props.data.series.data - Series data.\n *       @param {string} [props.data.series.parentName] - Value specifying parent data when using group nested pie chart.\n *   @param {Object} [props.options] - Options for making NestedPie Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *       @param {Object} [props.options.series.aliasName] - Chart options are specified based on the alias name. 'radiusRange', 'angleRange', 'clockwise', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|NestedPie Chart guide} on github.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|NestedPie Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\nexport default class NestedPieChart extends Chart {\n  constructor({\n    el,\n    options,\n    data: {\n      series,\n      categories\n    }\n  }) {\n    super({\n      el,\n      options,\n      series: {\n        pie: series\n      },\n      categories,\n      modules: [nestedPieSeriesData]\n    });\n    /**\n     * Hide series data label.\n     * @api\n     * @example\n     * chart.hideSeriesDataLabel();\n     */\n\n    this.hideSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: false\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Show series data label.\n     * @api\n     * @example\n     * chart.showSeriesDataLabel();\n     */\n\n\n    this.showSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: true\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options.\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   series: {\n     *     alias2: {\n     *       radiusRange: [20%, 50%],\n     *     },\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options.\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   series: {\n     *     alias1: {\n     *       showDot: true,\n     *     },\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n     *      @param {number} seriesInfo.seriesIndex - Index of series.\n     *      @param {number} seriesInfo.alias - alias name.\n     * @api\n     * @example\n     * chart.showTooltip({seriesIndex: 1, alias: 'name'});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    var _a;\n\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(Legend);\n    (_a = this.store.initStoreState.series.pie, _a !== null && _a !== void 0 ? _a : []).forEach(({\n      name\n    }) => {\n      this.componentManager.add(PieSeries, {\n        alias: name\n      });\n    });\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(DataLabels);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, legendBrush, labelBrush, exportMenuBrush, sectorBrush, dataLabelBrush]);\n  }\n  /**\n   * Add series.\n   * @param {Object} data - Data to be added.\n   *   @param {string} data.name - Series name.\n   *   @param {Array<Object>} data.data - Array of data to be added.\n   * @param {Object} dataInfo - Which name of chart to add.\n   *   @param {string} dataInfo.name - Chart series name.\n   * @api\n   * @example\n   * chart.addSeries(\n   *   {\n   *     name: 'newSeries',\n   *     data: [\n   *       { name: 'A', data: 10 },\n   *       { name: 'B', data: 20 },\n   *     ],\n   *   },\n   *   {\n   *     name: 'series name'\n   *   });\n   */\n\n\n  addSeries(data, dataInfo) {\n    this.resetSeries();\n    this.store.dispatch('addSeries', Object.assign({\n      data\n    }, dataInfo));\n    this.componentManager.add(PieSeries, {\n      alias: data.name\n    });\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set\n   * @api\n   * @example\n   * chart.setData({\n   *   categories: ['A', 'B'],\n   *   series: [\n   *     {\n   *       name: 'browsers',\n   *       data: [\n   *         {\n   *           name: 'Chrome',\n   *           data: 50,\n   *         },\n   *         {\n   *           name: 'Safari',\n   *           data: 20,\n   *         },\n   *       ]\n   *     },\n   *     {\n   *       name: 'versions',\n   *       data: [\n   *         {\n   *           name: '1',\n   *           data: 50,\n   *         },\n   *         {\n   *           name: '2',\n   *           data: 20,\n   *         },\n   *       ]\n   *     }\n   *   ]\n   * });\n   */\n\n\n  setData(data) {\n    var _a;\n\n    this.componentManager.remove(PieSeries);\n    this.resetSeries();\n    this.store.dispatch('setData', {\n      series: {\n        pie: data.series\n      }\n    });\n    (_a = this.store.initStoreState.series.pie, _a !== null && _a !== void 0 ? _a : []).forEach(({\n      name\n    }) => {\n      this.componentManager.add(PieSeries, {\n        alias: name\n      });\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/nestedPieChart.js"],"names":["Chart","nestedPieSeriesData","Tooltip","Legend","Title","ExportMenu","HoveredSeries","DataLabels","SelectedSeries","Background","PieSeries","NoDataText","basicBrush","legendBrush","labelBrush","exportMenuBrush","sectorBrush","dataLabelBrush","NestedPieChart","constructor","el","options","data","series","categories","pie","modules","hideSeriesDataLabel","store","dispatch","dataLabels","visible","showSeriesDataLabel","setOptions","resetSeries","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","Object","assign","hideTooltip","initialize","_a","componentManager","add","initStoreState","forEach","name","alias","chartEl","painter","addGroups","addSeries","dataInfo","setData","remove"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport nestedPieSeriesData from \"../store/nestedPieSeriesData\";\nimport Tooltip from \"../component/tooltip\";\nimport Legend from \"../component/legend\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport PieSeries from \"../component/pieSeries\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as sectorBrush from \"../brushes/sector\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\n/**\n * @class\n * @classdesc NestedPie Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making NestedPie Chart.\n *     @param {Array<string>} [props.data.categories] - Categories.\n *     @param {Array<Object>} props.data.series - Series data.\n *       @param {string} props.data.series.name - Series name.\n *       @param {number} props.data.series.data - Series data.\n *       @param {string} [props.data.series.parentName] - Value specifying parent data when using group nested pie chart.\n *   @param {Object} [props.options] - Options for making NestedPie Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *       @param {Object} [props.options.series.aliasName] - Chart options are specified based on the alias name. 'radiusRange', 'angleRange', 'clockwise', 'dataLabels' is available. For specific information, refer to the {@link https://github.com/nhn/tui.chart|NestedPie Chart guide} on github.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {string} [props.options.legend.showCheckbox] - Whether to show checkbox.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *       @param {Object} [props.options.legend.item] - `width` and `overflow` options of the legend item. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Legend guide} on github.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|NestedPie Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class NestedPieChart extends Chart {\n    constructor({ el, options, data: { series, categories } }) {\n        super({\n            el,\n            options,\n            series: { pie: series },\n            categories,\n            modules: [nestedPieSeriesData],\n        });\n        /**\n         * Hide series data label.\n         * @api\n         * @example\n         * chart.hideSeriesDataLabel();\n         */\n        this.hideSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: false } } },\n            });\n        };\n        /**\n         * Show series data label.\n         * @api\n         * @example\n         * chart.showSeriesDataLabel();\n         */\n        this.showSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: true } } },\n            });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options.\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   series: {\n         *     alias2: {\n         *       radiusRange: [20%, 50%],\n         *     },\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options.\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   series: {\n         *     alias1: {\n         *       showDot: true,\n         *     },\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n         *      @param {number} seriesInfo.seriesIndex - Index of series.\n         *      @param {number} seriesInfo.alias - alias name.\n         * @api\n         * @example\n         * chart.showTooltip({seriesIndex: 1, alias: 'name'});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign({}, seriesInfo));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        var _a;\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(Legend);\n        (_a = this.store.initStoreState.series.pie, (_a !== null && _a !== void 0 ? _a : [])).forEach(({ name }) => {\n            this.componentManager.add(PieSeries, { alias: name });\n        });\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(DataLabels);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            sectorBrush,\n            dataLabelBrush,\n        ]);\n    }\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     *   @param {string} data.name - Series name.\n     *   @param {Array<Object>} data.data - Array of data to be added.\n     * @param {Object} dataInfo - Which name of chart to add.\n     *   @param {string} dataInfo.name - Chart series name.\n     * @api\n     * @example\n     * chart.addSeries(\n     *   {\n     *     name: 'newSeries',\n     *     data: [\n     *       { name: 'A', data: 10 },\n     *       { name: 'B', data: 20 },\n     *     ],\n     *   },\n     *   {\n     *     name: 'series name'\n     *   });\n     */\n    addSeries(data, dataInfo) {\n        this.resetSeries();\n        this.store.dispatch('addSeries', Object.assign({ data }, dataInfo));\n        this.componentManager.add(PieSeries, { alias: data.name });\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set\n     * @api\n     * @example\n     * chart.setData({\n     *   categories: ['A', 'B'],\n     *   series: [\n     *     {\n     *       name: 'browsers',\n     *       data: [\n     *         {\n     *           name: 'Chrome',\n     *           data: 50,\n     *         },\n     *         {\n     *           name: 'Safari',\n     *           data: 20,\n     *         },\n     *       ]\n     *     },\n     *     {\n     *       name: 'versions',\n     *       data: [\n     *         {\n     *           name: '1',\n     *           data: 50,\n     *         },\n     *         {\n     *           name: '2',\n     *           data: 20,\n     *         },\n     *       ]\n     *     }\n     *   ]\n     * });\n     */\n    setData(data) {\n        var _a;\n        this.componentManager.remove(PieSeries);\n        this.resetSeries();\n        this.store.dispatch('setData', { series: { pie: data.series } });\n        (_a = this.store.initStoreState.series.pie, (_a !== null && _a !== void 0 ? _a : [])).forEach(({ name }) => {\n            this.componentManager.add(PieSeries, { alias: name });\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}