{"ast":null,"code":"import { isString, pick } from \"./utils\";\nexport function makeStyleObj(style, styleSet) {\n  return style.reduce((acc, curValue) => {\n    if (isString(curValue)) {\n      return Object.assign(Object.assign({}, acc), styleSet[curValue]);\n    }\n\n    return Object.assign(Object.assign({}, acc), curValue);\n  }, {});\n}\nexport function getTranslateString(x, y) {\n  return `translate(${x}px,${y}px)`;\n}\nexport function getTitleFontString(fontTheme) {\n  const {\n    fontFamily,\n    fontSize,\n    fontWeight\n  } = fontTheme;\n  return `${fontWeight} ${fontSize}px ${fontFamily}`;\n}\nexport function getFontStyleString(theme) {\n  const {\n    color,\n    fontSize,\n    fontFamily,\n    fontWeight\n  } = theme;\n  return `font-weight: ${fontWeight}; font-family: ${fontFamily}; font-size: ${fontSize}px; color: ${color};`;\n}\nexport function getFont(theme) {\n  return getTitleFontString(pick(theme, 'fontFamily', 'fontWeight', 'fontSize'));\n}\nexport function setLineDash(ctx, dashSegments) {\n  if (ctx.setLineDash) {\n    ctx.setLineDash(dashSegments);\n  }\n}\nexport function getBoxTypeSeriesPadding(tickDistance) {\n  return Math.floor(tickDistance * 0.15);\n}\nexport function fillStyle(ctx, fillOption) {\n  ctx.fillStyle = fillOption;\n  ctx.fill();\n}\nexport function strokeWithOptions(ctx, style) {\n  const {\n    lineWidth,\n    strokeStyle\n  } = style;\n\n  if (strokeStyle) {\n    ctx.strokeStyle = strokeStyle;\n  }\n\n  if (lineWidth) {\n    ctx.lineWidth = lineWidth;\n  }\n\n  ctx.stroke();\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/helpers/style.js"],"names":["isString","pick","makeStyleObj","style","styleSet","reduce","acc","curValue","Object","assign","getTranslateString","x","y","getTitleFontString","fontTheme","fontFamily","fontSize","fontWeight","getFontStyleString","theme","color","getFont","setLineDash","ctx","dashSegments","getBoxTypeSeriesPadding","tickDistance","Math","floor","fillStyle","fillOption","fill","strokeWithOptions","lineWidth","strokeStyle","stroke"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,QAA+B,SAA/B;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AAC1C,SAAOD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAMC,QAAN,KAAmB;AACnC,QAAIP,QAAQ,CAACO,QAAD,CAAZ,EAAwB;AACpB,aAAOC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,GAAlB,CAAd,EAAsCF,QAAQ,CAACG,QAAD,CAA9C,CAAP;AACH;;AACD,WAAOC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,GAAlB,CAAd,EAAsCC,QAAtC,CAAP;AACH,GALM,EAKJ,EALI,CAAP;AAMH;AACD,OAAO,SAASG,kBAAT,CAA4BC,CAA5B,EAA+BC,CAA/B,EAAkC;AACrC,SAAQ,aAAYD,CAAE,MAAKC,CAAE,KAA7B;AACH;AACD,OAAO,SAASC,kBAAT,CAA4BC,SAA5B,EAAuC;AAC1C,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAAuCH,SAA7C;AACA,SAAQ,GAAEG,UAAW,IAAGD,QAAS,MAAKD,UAAW,EAAjD;AACH;AACD,OAAO,SAASG,kBAAT,CAA4BC,KAA5B,EAAmC;AACtC,QAAM;AAAEC,IAAAA,KAAF;AAASJ,IAAAA,QAAT;AAAmBD,IAAAA,UAAnB;AAA+BE,IAAAA;AAA/B,MAA8CE,KAApD;AACA,SAAQ,gBAAeF,UAAW,kBAAiBF,UAAW,gBAAeC,QAAS,cAAaI,KAAM,GAAzG;AACH;AACD,OAAO,SAASC,OAAT,CAAiBF,KAAjB,EAAwB;AAC3B,SAAON,kBAAkB,CAACZ,IAAI,CAACkB,KAAD,EAAQ,YAAR,EAAsB,YAAtB,EAAoC,UAApC,CAAL,CAAzB;AACH;AACD,OAAO,SAASG,WAAT,CAAqBC,GAArB,EAA0BC,YAA1B,EAAwC;AAC3C,MAAID,GAAG,CAACD,WAAR,EAAqB;AACjBC,IAAAA,GAAG,CAACD,WAAJ,CAAgBE,YAAhB;AACH;AACJ;AACD,OAAO,SAASC,uBAAT,CAAiCC,YAAjC,EAA+C;AAClD,SAAOC,IAAI,CAACC,KAAL,CAAWF,YAAY,GAAG,IAA1B,CAAP;AACH;AACD,OAAO,SAASG,SAAT,CAAmBN,GAAnB,EAAwBO,UAAxB,EAAoC;AACvCP,EAAAA,GAAG,CAACM,SAAJ,GAAgBC,UAAhB;AACAP,EAAAA,GAAG,CAACQ,IAAJ;AACH;AACD,OAAO,SAASC,iBAAT,CAA2BT,GAA3B,EAAgCpB,KAAhC,EAAuC;AAC1C,QAAM;AAAE8B,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6B/B,KAAnC;;AACA,MAAI+B,WAAJ,EAAiB;AACbX,IAAAA,GAAG,CAACW,WAAJ,GAAkBA,WAAlB;AACH;;AACD,MAAID,SAAJ,EAAe;AACXV,IAAAA,GAAG,CAACU,SAAJ,GAAgBA,SAAhB;AACH;;AACDV,EAAAA,GAAG,CAACY,MAAJ;AACH","sourcesContent":["import { isString, pick } from \"./utils\";\nexport function makeStyleObj(style, styleSet) {\n    return style.reduce((acc, curValue) => {\n        if (isString(curValue)) {\n            return Object.assign(Object.assign({}, acc), styleSet[curValue]);\n        }\n        return Object.assign(Object.assign({}, acc), curValue);\n    }, {});\n}\nexport function getTranslateString(x, y) {\n    return `translate(${x}px,${y}px)`;\n}\nexport function getTitleFontString(fontTheme) {\n    const { fontFamily, fontSize, fontWeight } = fontTheme;\n    return `${fontWeight} ${fontSize}px ${fontFamily}`;\n}\nexport function getFontStyleString(theme) {\n    const { color, fontSize, fontFamily, fontWeight } = theme;\n    return `font-weight: ${fontWeight}; font-family: ${fontFamily}; font-size: ${fontSize}px; color: ${color};`;\n}\nexport function getFont(theme) {\n    return getTitleFontString(pick(theme, 'fontFamily', 'fontWeight', 'fontSize'));\n}\nexport function setLineDash(ctx, dashSegments) {\n    if (ctx.setLineDash) {\n        ctx.setLineDash(dashSegments);\n    }\n}\nexport function getBoxTypeSeriesPadding(tickDistance) {\n    return Math.floor(tickDistance * 0.15);\n}\nexport function fillStyle(ctx, fillOption) {\n    ctx.fillStyle = fillOption;\n    ctx.fill();\n}\nexport function strokeWithOptions(ctx, style) {\n    const { lineWidth, strokeStyle } = style;\n    if (strokeStyle) {\n        ctx.strokeStyle = strokeStyle;\n    }\n    if (lineWidth) {\n        ctx.lineWidth = lineWidth;\n    }\n    ctx.stroke();\n}\n"]},"metadata":{},"sourceType":"module"}