{"ast":null,"code":"import { findNodes, removeNode } from \"./dom\";\nimport { isString, toArray } from \"./utils\";\nconst HTML_ATTR_LIST_RX = new RegExp('^(abbr|align|alt|axis|bgcolor|border|cellpadding|cellspacing|class|clear|' + 'color|cols|compact|coords|dir|face|headers|height|hreflang|hspace|' + 'ismap|lang|language|nohref|nowrap|rel|rev|rows|rules|' + 'scope|scrolling|shape|size|span|start|summary|tabindex|target|title|type|' + 'valign|value|vspace|width|checked|mathvariant|encoding|id|name|' + 'background|cite|href|longdesc|src|usemap|xlink:href|data-+|checked|style)', 'g');\nconst SVG_ATTR_LIST_RX = new RegExp('^(accent-height|accumulate|additive|alphabetic|arabic-form|ascent|' + 'baseProfile|bbox|begin|by|calcMode|cap-height|class|color|color-rendering|content|' + 'cx|cy|d|dx|dy|descent|display|dur|end|fill|fill-rule|font-family|font-size|font-stretch|' + 'font-style|font-variant|font-weight|from|fx|fy|g1|g2|glyph-name|gradientUnits|hanging|' + 'height|horiz-adv-x|horiz-origin-x|ideographic|k|keyPoints|keySplines|keyTimes|lang|' + 'marker-end|marker-mid|marker-start|markerHeight|markerUnits|markerWidth|mathematical|' + 'max|min|offset|opacity|orient|origin|overline-position|overline-thickness|panose-1|' + 'path|pathLength|points|preserveAspectRatio|r|refX|refY|repeatCount|repeatDur|' + 'requiredExtensions|requiredFeatures|restart|rotate|rx|ry|slope|stemh|stemv|stop-color|' + 'stop-opacity|strikethrough-position|strikethrough-thickness|stroke|stroke-dasharray|' + 'stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|' + 'stroke-width|systemLanguage|target|text-anchor|to|transform|type|u1|u2|underline-position|' + 'underline-thickness|unicode|unicode-range|units-per-em|values|version|viewBox|visibility|' + 'width|widths|x|x-height|x1|x2|xlink:actuate|xlink:arcrole|xlink:role|xlink:show|xlink:title|' + 'xlink:type|xml:base|xml:lang|xml:space|xmlns|xmlns:xlink|y|y1|y2|zoomAndPan)', 'g');\nconst DEFAULT_TAG_DENY_LIST = ['script', 'iframe', 'textarea', 'form', 'button', 'select', 'input', 'meta', 'style', 'link', 'title', 'embed', 'object'];\nconst XSS_ATTR_RX = /href|src|background/gi;\nconst XSS_VALUE_RX = /((java|vb|live)script|x):/gi;\nconst ON_EVENT_RX = /^on\\S+/;\nexport function sanitizeHTML(html) {\n  const root = document.createElement('div');\n\n  if (isString(html)) {\n    html = html.replace(/<!--[\\s\\S]*?-->/g, '');\n    root.innerHTML = html;\n  } else {\n    root.appendChild(html);\n  }\n\n  removeUnnecessaryTags(root);\n  leaveOnlyWhitelistAttribute(root);\n  return root.innerHTML;\n}\n\nfunction removeUnnecessaryTags(html) {\n  const removedTags = findNodes(html, DEFAULT_TAG_DENY_LIST.join(','));\n  removedTags.forEach(node => {\n    removeNode(node);\n  });\n}\n\nfunction isXSSAttribute(attrName, attrValue) {\n  return attrName.match(XSS_ATTR_RX) && attrValue.match(XSS_VALUE_RX);\n}\n\nfunction removeBlacklistAttributes(node, blacklistAttrs) {\n  blacklistAttrs.forEach(({\n    name\n  }) => {\n    if (ON_EVENT_RX.test(name)) {\n      node[name] = null;\n    }\n\n    if (node.getAttribute(name)) {\n      node.removeAttribute(name);\n    }\n  });\n}\n\nfunction leaveOnlyWhitelistAttribute(html) {\n  findNodes(html, '*').forEach(node => {\n    const {\n      attributes\n    } = node;\n    const blacklist = toArray(attributes).filter(attr => {\n      const {\n        name,\n        value\n      } = attr;\n      const htmlAttr = name.match(HTML_ATTR_LIST_RX);\n      const svgAttr = name.match(SVG_ATTR_LIST_RX);\n      const xssAttr = htmlAttr && isXSSAttribute(name, value);\n      return !htmlAttr && !svgAttr || xssAttr;\n    });\n    removeBlacklistAttributes(node, blacklist);\n  });\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/helpers/htmlSanitizer.js"],"names":["findNodes","removeNode","isString","toArray","HTML_ATTR_LIST_RX","RegExp","SVG_ATTR_LIST_RX","DEFAULT_TAG_DENY_LIST","XSS_ATTR_RX","XSS_VALUE_RX","ON_EVENT_RX","sanitizeHTML","html","root","document","createElement","replace","innerHTML","appendChild","removeUnnecessaryTags","leaveOnlyWhitelistAttribute","removedTags","join","forEach","node","isXSSAttribute","attrName","attrValue","match","removeBlacklistAttributes","blacklistAttrs","name","test","getAttribute","removeAttribute","attributes","blacklist","filter","attr","value","htmlAttr","svgAttr","xssAttr"],"mappings":"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","sourcesContent":["import { findNodes, removeNode } from \"./dom\";\nimport { isString, toArray } from \"./utils\";\nconst HTML_ATTR_LIST_RX = new RegExp('^(abbr|align|alt|axis|bgcolor|border|cellpadding|cellspacing|class|clear|' +\n    'color|cols|compact|coords|dir|face|headers|height|hreflang|hspace|' +\n    'ismap|lang|language|nohref|nowrap|rel|rev|rows|rules|' +\n    'scope|scrolling|shape|size|span|start|summary|tabindex|target|title|type|' +\n    'valign|value|vspace|width|checked|mathvariant|encoding|id|name|' +\n    'background|cite|href|longdesc|src|usemap|xlink:href|data-+|checked|style)', 'g');\nconst SVG_ATTR_LIST_RX = new RegExp('^(accent-height|accumulate|additive|alphabetic|arabic-form|ascent|' +\n    'baseProfile|bbox|begin|by|calcMode|cap-height|class|color|color-rendering|content|' +\n    'cx|cy|d|dx|dy|descent|display|dur|end|fill|fill-rule|font-family|font-size|font-stretch|' +\n    'font-style|font-variant|font-weight|from|fx|fy|g1|g2|glyph-name|gradientUnits|hanging|' +\n    'height|horiz-adv-x|horiz-origin-x|ideographic|k|keyPoints|keySplines|keyTimes|lang|' +\n    'marker-end|marker-mid|marker-start|markerHeight|markerUnits|markerWidth|mathematical|' +\n    'max|min|offset|opacity|orient|origin|overline-position|overline-thickness|panose-1|' +\n    'path|pathLength|points|preserveAspectRatio|r|refX|refY|repeatCount|repeatDur|' +\n    'requiredExtensions|requiredFeatures|restart|rotate|rx|ry|slope|stemh|stemv|stop-color|' +\n    'stop-opacity|strikethrough-position|strikethrough-thickness|stroke|stroke-dasharray|' +\n    'stroke-dashoffset|stroke-linecap|stroke-linejoin|stroke-miterlimit|stroke-opacity|' +\n    'stroke-width|systemLanguage|target|text-anchor|to|transform|type|u1|u2|underline-position|' +\n    'underline-thickness|unicode|unicode-range|units-per-em|values|version|viewBox|visibility|' +\n    'width|widths|x|x-height|x1|x2|xlink:actuate|xlink:arcrole|xlink:role|xlink:show|xlink:title|' +\n    'xlink:type|xml:base|xml:lang|xml:space|xmlns|xmlns:xlink|y|y1|y2|zoomAndPan)', 'g');\nconst DEFAULT_TAG_DENY_LIST = [\n    'script',\n    'iframe',\n    'textarea',\n    'form',\n    'button',\n    'select',\n    'input',\n    'meta',\n    'style',\n    'link',\n    'title',\n    'embed',\n    'object',\n];\nconst XSS_ATTR_RX = /href|src|background/gi;\nconst XSS_VALUE_RX = /((java|vb|live)script|x):/gi;\nconst ON_EVENT_RX = /^on\\S+/;\nexport function sanitizeHTML(html) {\n    const root = document.createElement('div');\n    if (isString(html)) {\n        html = html.replace(/<!--[\\s\\S]*?-->/g, '');\n        root.innerHTML = html;\n    }\n    else {\n        root.appendChild(html);\n    }\n    removeUnnecessaryTags(root);\n    leaveOnlyWhitelistAttribute(root);\n    return root.innerHTML;\n}\nfunction removeUnnecessaryTags(html) {\n    const removedTags = findNodes(html, DEFAULT_TAG_DENY_LIST.join(','));\n    removedTags.forEach((node) => {\n        removeNode(node);\n    });\n}\nfunction isXSSAttribute(attrName, attrValue) {\n    return attrName.match(XSS_ATTR_RX) && attrValue.match(XSS_VALUE_RX);\n}\nfunction removeBlacklistAttributes(node, blacklistAttrs) {\n    blacklistAttrs.forEach(({ name }) => {\n        if (ON_EVENT_RX.test(name)) {\n            node[name] = null;\n        }\n        if (node.getAttribute(name)) {\n            node.removeAttribute(name);\n        }\n    });\n}\nfunction leaveOnlyWhitelistAttribute(html) {\n    findNodes(html, '*').forEach((node) => {\n        const { attributes } = node;\n        const blacklist = toArray(attributes).filter((attr) => {\n            const { name, value } = attr;\n            const htmlAttr = name.match(HTML_ATTR_LIST_RX);\n            const svgAttr = name.match(SVG_ATTR_LIST_RX);\n            const xssAttr = htmlAttr && isXSSAttribute(name, value);\n            return (!htmlAttr && !svgAttr) || xssAttr;\n        });\n        removeBlacklistAttributes(node, blacklist);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}