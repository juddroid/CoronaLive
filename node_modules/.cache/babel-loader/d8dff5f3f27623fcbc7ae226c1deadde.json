{"ast":null,"code":"import Chart from \"./chart\";\nimport heatmapAxes from \"../store/heatmapAxes\";\nimport heatmapSeriesData from \"../store/heatmapSeriesData\";\nimport colorValueScale from \"../store/colorValueScale\";\nimport Tooltip from \"../component/tooltip\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport SpectrumLegend from \"../component/spectrumLegend\";\nimport HeatmapSeries from \"../component/heatmapSeries\";\nimport AxisTitle from \"../component/axisTitle\";\nimport Axis from \"../component/axis\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as spectrumLegendBrush from \"../brushes/spectrumLegend\";\nimport * as axisBrush from \"../brushes/axis\";\n\nfunction getSeriesWithYCategory(series, categories) {\n  return series.map((rowSeries, y) => ({\n    data: rowSeries,\n    yCategory: categories.y[y]\n  }));\n}\n/**\n * @class\n * @classdesc Heatmap Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Heatmap Chart.\n *     @param {Object} props.data.categories\n *       @param {Array<string>} props.data.categories.x - X Categories.\n *       @param {Array<string>} props.data.categories.y - Y Categories.\n *     @param {Array<Array<number>>} props.data.series - Series data.\n *   @param {Object} [props.options] - Options for making Heatmap Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {boolean|Object} [props.options.yAxis.date] - Whether the y axis label is of date type. Format option used for date type. Whether the y axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Heatmap Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\n\n\nexport default class HeatmapChart extends Chart {\n  constructor(props) {\n    super({\n      el: props.el,\n      categories: props.data.categories,\n      options: props.options,\n      series: {\n        heatmap: getSeriesWithYCategory(props.data.series, props.data.categories)\n      },\n      modules: [heatmapSeriesData, colorValueScale, heatmapAxes]\n    });\n    /**\n     * Add data.\n     * @param {Array} data - Array of data to be added.\n     * @param {string} category - Category to be added.\n     * @api\n     * @example\n     * chart.addData([10, 20], '6');\n     */\n\n    this.addData = (data, category) => {\n      this.animationControlFlag.updating = true;\n      this.resetSeries();\n      this.store.dispatch('addData', {\n        data,\n        category\n      });\n    };\n    /**\n     * Add series.\n     * @param {Object} data - Data to be added.\n     *   @param {string} data.name - Series name.\n     *   @param {Array<number>} data.data - Array of data to be added.\n     * @param {Object} dataInfo - Category information of the series.\n     *   @param {Object} dataInfo.category - Y category.\n     * @api\n     * @example\n     * chart.addSeries({\n     *   name: 'newSeries',\n     *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],\n     * });\n     */\n\n\n    this.addSeries = (data, dataInfo) => {\n      this.resetSeries();\n      this.store.dispatch('addHeatmapSeries', Object.assign({\n        data\n      }, dataInfo));\n    };\n    /**\n     * Hide series data label.\n     * @api\n     * @example\n     * chart.hideSeriesDataLabel();\n     */\n\n\n    this.hideSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: false\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Show series data label.\n     * @api\n     * @example\n     * chart.showSeriesDataLabel();\n     */\n\n\n    this.showSeriesDataLabel = () => {\n      this.store.dispatch('updateOptions', {\n        options: {\n          series: {\n            dataLabels: {\n              visible: true\n            }\n          }\n        }\n      });\n    };\n    /**\n     * Convert the chart options to new options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.setOptions({\n     *   chart: {\n     *     width: 500,\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   xAxis: {\n     *     title: 'Month',\n     *   },\n     *   yAxis: {\n     *     title: 'Energy (kWh)',\n     *   },\n     *   series: {\n     *     selectable: true,\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.setOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('initOptions', options);\n    };\n    /**\n     * Update chart options.\n     * @param {Object} options - Chart options\n     * @api\n     * @example\n     * chart.updateOptions({\n     *   chart: {\n     *     height: 'auto',\n     *     title: 'Energy Usage',\n     *   },\n     *   tooltip: {\n     *     formatter: (value) => `${value}kWh`,\n     *   },\n     * });\n     */\n\n\n    this.updateOptions = options => {\n      this.resetSeries();\n      this.dispatchOptionsEvent('updateOptions', options);\n    };\n    /**\n     * Show tooltip.\n     * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n     *      @param {number} seriesInfo.seriesIndex - Index of series.\n     *      @param {number} seriesInfo.index - Index of data within series.\n     * @api\n     * @example\n     * chart.showTooltip({index: 1, seriesIndex: 2});\n     */\n\n\n    this.showTooltip = seriesInfo => {\n      this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), {\n        state: this.store.state\n      }));\n    };\n    /**\n     * Hide tooltip.\n     * @api\n     * @example\n     * chart.hideTooltip();\n     */\n\n\n    this.hideTooltip = () => {\n      this.eventBus.emit('hideTooltip');\n    };\n  }\n\n  initialize() {\n    super.initialize();\n    this.componentManager.add(Background);\n    this.componentManager.add(Title);\n    this.componentManager.add(SpectrumLegend);\n    this.componentManager.add(ExportMenu, {\n      chartEl: this.el\n    });\n    this.componentManager.add(HeatmapSeries);\n    this.componentManager.add(Axis, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(Axis, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'xAxis'\n    });\n    this.componentManager.add(AxisTitle, {\n      name: 'yAxis'\n    });\n    this.componentManager.add(HoveredSeries);\n    this.componentManager.add(SelectedSeries);\n    this.componentManager.add(DataLabels);\n    this.componentManager.add(Tooltip, {\n      chartEl: this.el\n    });\n    this.componentManager.add(NoDataText);\n    this.painter.addGroups([basicBrush, axisBrush, legendBrush, labelBrush, exportMenuBrush, dataLabelBrush, spectrumLegendBrush]);\n  }\n  /**\n   * Convert the chart data to new data.\n   * @param {Object} data - Data to be set.\n   *   @param {Array<string>} data.categories.x - X Categories.\n   *   @param {Array<string>} data.categories.y - Y Categories.\n   * @param {Array<Array<number>>} data.series - Series data.\n   * @api\n   * @example\n   * chart.setData({\n   *   categories: {\n   *     x: ['1', '2', '3' ],\n   *     y: ['A', 'B'],\n   *   },\n   *   series: [\n   *     [1, 2, 3],\n   *     [4, 5, 6],\n   *   ]\n   * });\n   */\n\n\n  setData(data) {\n    const {\n      categories,\n      series\n    } = data;\n    this.resetSeries();\n    this.store.dispatch('setData', {\n      series: {\n        heatmap: getSeriesWithYCategory(series, categories)\n      },\n      categories\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/raccoon/Desktop/fe-w6-free-style/node_modules/@toast-ui/chart/dist/esm/charts/heatmapChart.js"],"names":["Chart","heatmapAxes","heatmapSeriesData","colorValueScale","Tooltip","Title","ExportMenu","HoveredSeries","DataLabels","SpectrumLegend","HeatmapSeries","AxisTitle","Axis","SelectedSeries","Background","NoDataText","basicBrush","legendBrush","labelBrush","exportMenuBrush","dataLabelBrush","spectrumLegendBrush","axisBrush","getSeriesWithYCategory","series","categories","map","rowSeries","y","data","yCategory","HeatmapChart","constructor","props","el","options","heatmap","modules","addData","category","animationControlFlag","updating","resetSeries","store","dispatch","addSeries","dataInfo","Object","assign","hideSeriesDataLabel","dataLabels","visible","showSeriesDataLabel","setOptions","dispatchOptionsEvent","updateOptions","showTooltip","seriesInfo","eventBus","emit","state","hideTooltip","initialize","componentManager","add","chartEl","name","painter","addGroups","setData"],"mappings":"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","sourcesContent":["import Chart from \"./chart\";\nimport heatmapAxes from \"../store/heatmapAxes\";\nimport heatmapSeriesData from \"../store/heatmapSeriesData\";\nimport colorValueScale from \"../store/colorValueScale\";\nimport Tooltip from \"../component/tooltip\";\nimport Title from \"../component/title\";\nimport ExportMenu from \"../component/exportMenu\";\nimport HoveredSeries from \"../component/hoveredSeries\";\nimport DataLabels from \"../component/dataLabels\";\nimport SpectrumLegend from \"../component/spectrumLegend\";\nimport HeatmapSeries from \"../component/heatmapSeries\";\nimport AxisTitle from \"../component/axisTitle\";\nimport Axis from \"../component/axis\";\nimport SelectedSeries from \"../component/selectedSeries\";\nimport Background from \"../component/background\";\nimport NoDataText from \"../component/noDataText\";\nimport * as basicBrush from \"../brushes/basic\";\nimport * as legendBrush from \"../brushes/legend\";\nimport * as labelBrush from \"../brushes/label\";\nimport * as exportMenuBrush from \"../brushes/exportMenu\";\nimport * as dataLabelBrush from \"../brushes/dataLabel\";\nimport * as spectrumLegendBrush from \"../brushes/spectrumLegend\";\nimport * as axisBrush from \"../brushes/axis\";\nfunction getSeriesWithYCategory(series, categories) {\n    return series.map((rowSeries, y) => ({\n        data: rowSeries,\n        yCategory: categories.y[y],\n    }));\n}\n/**\n * @class\n * @classdesc Heatmap Chart\n * @param {Object} props\n *   @param {HTMLElement} props.el - The target element to create chart.\n *   @param {Object} props.data - Data for making Heatmap Chart.\n *     @param {Object} props.data.categories\n *       @param {Array<string>} props.data.categories.x - X Categories.\n *       @param {Array<string>} props.data.categories.y - Y Categories.\n *     @param {Array<Array<number>>} props.data.series - Series data.\n *   @param {Object} [props.options] - Options for making Heatmap Chart.\n *     @param {Object} [props.options.chart]\n *       @param {string|Object} [props.options.chart.title] - Chart title text or options.\n *         @param {string} [props.options.chart.title.text] - Chart title text.\n *         @param {number} [props.options.chart.title.offsetX] - Offset value to move title horizontally.\n *         @param {number} [props.options.chart.title.offsetY] - Offset value to move title vertically.\n *         @param {string} [props.options.chart.title.align] - Chart text align. 'left', 'right', 'center' is available.\n *       @param {boolean|Object} [props.options.chart.animation] - Whether to use animation and duration when rendering the initial chart.\n *       @param {number|string} [props.options.chart.width] - Chart width. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the width of the parent container is followed.\n *       @param {number|string} [props.options.chart.height] - Chart height. 'auto' or if not write, the width of the parent container is followed. 'auto' or if not created, the height of the parent container is followed.\n *     @param {Object} [props.options.series]\n *       @param {boolean} [props.options.series.selectable=false] - Whether to make selectable series or not.\n *       @param {boolean} [props.options.series.shift=false] - Whether to use shift when addData or not.\n *       @param {Object} [props.options.series.dataLabels] - Set the visibility, location, and formatting of dataLabel. For specific information, refer to the {@link https://github.com/nhn/tui.chart|DataLabels guide} on github.\n *     @param {Object} [props.options.xAxis]\n *       @param {Object} [props.options.xAxis.title] - Axis title.\n *       @param {boolean} [props.options.xAxis.rotateLabel=true] - Whether to allow axis label rotation.\n *       @param {boolean|Object} [props.options.xAxis.date] - Whether the x axis label is of date type. Format option used for date type. Whether the x axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.xAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.xAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.xAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.xAxis.width] - Width of xAxis.\n *       @param {number} [props.options.xAxis.height] - Height of xAxis.\n *     @param {Object|Array<Object>} [props.options.yAxis] - If this option is an array type, use the secondary y axis.\n *       @param {Object} [props.options.yAxis.title] - Axis title.\n *       @param {boolean|Object} [props.options.yAxis.date] - Whether the y axis label is of date type. Format option used for date type. Whether the y axis label is of date type. If use date type, format option used for date type.\n *       @param {Object} [props.options.yAxis.tick] - Option to adjust tick interval.\n *       @param {Object} [props.options.yAxis.label] - Option to adjust label interval.\n *       @param {Object} [props.options.yAxis.scale] - Option to adjust axis minimum, maximum, step size.\n *       @param {number} [props.options.yAxis.width] - Width of yAxis.\n *       @param {number} [props.options.yAxis.height] - Height of yAxis.\n *     @param {Object} [props.options.plot]\n *       @param {number} [props.options.plot.width] - Width of plot.\n *       @param {number} [props.options.plot.height] - Height of plot.\n *       @param {boolean} [props.options.plot.visible] - Whether to show plot line.\n *     @param {Object} [props.options.legend]\n *       @param {string} [props.options.legend.align] - Legend align. 'top', 'bottom', 'right', 'left' is available.\n *       @param {boolean} [props.options.legend.visible] - Whether to show legend.\n *       @param {number} [props.options.legend.width] - Width of legend.\n *     @param {Object} [props.options.exportMenu]\n *       @param {boolean} [props.options.exportMenu.visible] - Whether to show export menu.\n *       @param {string} [props.options.exportMenu.filename] - File name applied when downloading.\n *     @param {Object} [props.options.tooltip]\n *       @param {number} [props.options.tooltip.offsetX] - Offset value to move title horizontally.\n *       @param {number} [props.options.tooltip.offsetY] - Offset value to move title vertically.\n *       @param {Function} [props.options.tooltip.formatter] - Function to format data value.\n *       @param {Function} [props.options.tooltip.template] - Function to create custom template. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Tooltip guide} on github.\n *     @param {Object} [props.options.responsive] - Rules for changing chart options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Responsive guide} on github.\n *       @param {boolean|Object} [props.options.responsive.animation] - Animation duration when the chart is modified.\n *       @param {Array<Object>} [props.options.responsive.rules] - Rules for the Chart to Respond.\n *     @param {Object} [props.options.lang] - Options for changing the text displayed on the chart or i18n languages.\n *       @param {Object} [props.options.lang.noData] - No Data Layer Text.\n *     @param {Object} [props.options.theme] - Chart theme options. For specific information, refer to the {@link https://github.com/nhn/tui.chart|Heatmap Chart guide} on github.\n *       @param {Object} [props.options.theme.chart] - Chart font theme.\n *       @param {Object} [props.options.theme.noData] - No Data Layer Text theme.\n *       @param {Object} [props.options.theme.series] - Series theme.\n *       @param {Object} [props.options.theme.title] - Title theme.\n *       @param {Object} [props.options.theme.xAxis] - X Axis theme.\n *       @param {Object} [props.options.theme.yAxis] - Y Axis theme.\n *       @param {Object} [props.options.theme.legend] - Legend theme.\n *       @param {Object} [props.options.theme.tooltip] - Tooltip theme.\n *       @param {Object} [props.options.theme.plot] - Plot theme.\n *       @param {Object} [props.options.theme.exportMenu] - ExportMenu theme.\n * @extends Chart\n */\nexport default class HeatmapChart extends Chart {\n    constructor(props) {\n        super({\n            el: props.el,\n            categories: props.data.categories,\n            options: props.options,\n            series: {\n                heatmap: getSeriesWithYCategory(props.data.series, props.data.categories),\n            },\n            modules: [heatmapSeriesData, colorValueScale, heatmapAxes],\n        });\n        /**\n         * Add data.\n         * @param {Array} data - Array of data to be added.\n         * @param {string} category - Category to be added.\n         * @api\n         * @example\n         * chart.addData([10, 20], '6');\n         */\n        this.addData = (data, category) => {\n            this.animationControlFlag.updating = true;\n            this.resetSeries();\n            this.store.dispatch('addData', { data, category });\n        };\n        /**\n         * Add series.\n         * @param {Object} data - Data to be added.\n         *   @param {string} data.name - Series name.\n         *   @param {Array<number>} data.data - Array of data to be added.\n         * @param {Object} dataInfo - Category information of the series.\n         *   @param {Object} dataInfo.category - Y category.\n         * @api\n         * @example\n         * chart.addSeries({\n         *   name: 'newSeries',\n         *   data: [10, 100, 50, 40, 70, 55, 33, 70, 90, 110],\n         * });\n         */\n        this.addSeries = (data, dataInfo) => {\n            this.resetSeries();\n            this.store.dispatch('addHeatmapSeries', Object.assign({ data }, dataInfo));\n        };\n        /**\n         * Hide series data label.\n         * @api\n         * @example\n         * chart.hideSeriesDataLabel();\n         */\n        this.hideSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: false } } },\n            });\n        };\n        /**\n         * Show series data label.\n         * @api\n         * @example\n         * chart.showSeriesDataLabel();\n         */\n        this.showSeriesDataLabel = () => {\n            this.store.dispatch('updateOptions', {\n                options: { series: { dataLabels: { visible: true } } },\n            });\n        };\n        /**\n         * Convert the chart options to new options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.setOptions({\n         *   chart: {\n         *     width: 500,\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   xAxis: {\n         *     title: 'Month',\n         *   },\n         *   yAxis: {\n         *     title: 'Energy (kWh)',\n         *   },\n         *   series: {\n         *     selectable: true,\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.setOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('initOptions', options);\n        };\n        /**\n         * Update chart options.\n         * @param {Object} options - Chart options\n         * @api\n         * @example\n         * chart.updateOptions({\n         *   chart: {\n         *     height: 'auto',\n         *     title: 'Energy Usage',\n         *   },\n         *   tooltip: {\n         *     formatter: (value) => `${value}kWh`,\n         *   },\n         * });\n         */\n        this.updateOptions = (options) => {\n            this.resetSeries();\n            this.dispatchOptionsEvent('updateOptions', options);\n        };\n        /**\n         * Show tooltip.\n         * @param {Object} seriesInfo - Information of the series for the tooltip to be displayed.\n         *      @param {number} seriesInfo.seriesIndex - Index of series.\n         *      @param {number} seriesInfo.index - Index of data within series.\n         * @api\n         * @example\n         * chart.showTooltip({index: 1, seriesIndex: 2});\n         */\n        this.showTooltip = (seriesInfo) => {\n            this.eventBus.emit('showTooltip', Object.assign(Object.assign({}, seriesInfo), { state: this.store.state }));\n        };\n        /**\n         * Hide tooltip.\n         * @api\n         * @example\n         * chart.hideTooltip();\n         */\n        this.hideTooltip = () => {\n            this.eventBus.emit('hideTooltip');\n        };\n    }\n    initialize() {\n        super.initialize();\n        this.componentManager.add(Background);\n        this.componentManager.add(Title);\n        this.componentManager.add(SpectrumLegend);\n        this.componentManager.add(ExportMenu, { chartEl: this.el });\n        this.componentManager.add(HeatmapSeries);\n        this.componentManager.add(Axis, { name: 'yAxis' });\n        this.componentManager.add(Axis, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'xAxis' });\n        this.componentManager.add(AxisTitle, { name: 'yAxis' });\n        this.componentManager.add(HoveredSeries);\n        this.componentManager.add(SelectedSeries);\n        this.componentManager.add(DataLabels);\n        this.componentManager.add(Tooltip, { chartEl: this.el });\n        this.componentManager.add(NoDataText);\n        this.painter.addGroups([\n            basicBrush,\n            axisBrush,\n            legendBrush,\n            labelBrush,\n            exportMenuBrush,\n            dataLabelBrush,\n            spectrumLegendBrush,\n        ]);\n    }\n    /**\n     * Convert the chart data to new data.\n     * @param {Object} data - Data to be set.\n     *   @param {Array<string>} data.categories.x - X Categories.\n     *   @param {Array<string>} data.categories.y - Y Categories.\n     * @param {Array<Array<number>>} data.series - Series data.\n     * @api\n     * @example\n     * chart.setData({\n     *   categories: {\n     *     x: ['1', '2', '3' ],\n     *     y: ['A', 'B'],\n     *   },\n     *   series: [\n     *     [1, 2, 3],\n     *     [4, 5, 6],\n     *   ]\n     * });\n     */\n    setData(data) {\n        const { categories, series } = data;\n        this.resetSeries();\n        this.store.dispatch('setData', {\n            series: { heatmap: getSeriesWithYCategory(series, categories) },\n            categories,\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}